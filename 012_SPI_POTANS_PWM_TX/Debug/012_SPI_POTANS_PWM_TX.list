
012_SPI_POTANS_PWM_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f54  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003014  08003014  00004014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003044  08003044  00005014  2**0
                  CONTENTS
  4 .ARM          00000000  08003044  08003044  00005014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003044  08003044  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003044  08003044  00004044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003048  08003048  00004048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  0800304c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000014  08003060  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08003060  000050dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000063a1  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015be  00000000  00000000  0000b3dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  0000c9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000534  00000000  00000000  0000d090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f7d7  00000000  00000000  0000d5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008aaa  00000000  00000000  0001cd9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005cf46  00000000  00000000  00025845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008278b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001774  00000000  00000000  000827d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00083f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ffc 	.word	0x08002ffc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08002ffc 	.word	0x08002ffc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <ADC_Gelen_deger>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t ADC_Gelen_deger(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

	HAL_ADC_Start(&hadc);
 8000224:	4b0e      	ldr	r3, [pc, #56]	@ (8000260 <ADC_Gelen_deger+0x40>)
 8000226:	0018      	movs	r0, r3
 8000228:	f000 fd92 	bl	8000d50 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800022c:	2301      	movs	r3, #1
 800022e:	425a      	negs	r2, r3
 8000230:	4b0b      	ldr	r3, [pc, #44]	@ (8000260 <ADC_Gelen_deger+0x40>)
 8000232:	0011      	movs	r1, r2
 8000234:	0018      	movs	r0, r3
 8000236:	f000 fe1f 	bl	8000e78 <HAL_ADC_PollForConversion>
	ADC_value= (uint8_t)HAL_ADC_GetValue(&hadc);
 800023a:	4b09      	ldr	r3, [pc, #36]	@ (8000260 <ADC_Gelen_deger+0x40>)
 800023c:	0018      	movs	r0, r3
 800023e:	f000 feb3 	bl	8000fa8 <HAL_ADC_GetValue>
 8000242:	0003      	movs	r3, r0
 8000244:	b2da      	uxtb	r2, r3
 8000246:	4b07      	ldr	r3, [pc, #28]	@ (8000264 <ADC_Gelen_deger+0x44>)
 8000248:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Stop(&hadc);
 800024a:	4b05      	ldr	r3, [pc, #20]	@ (8000260 <ADC_Gelen_deger+0x40>)
 800024c:	0018      	movs	r0, r3
 800024e:	f000 fdd3 	bl	8000df8 <HAL_ADC_Stop>

	return (ADC_value >> 4);
 8000252:	4b04      	ldr	r3, [pc, #16]	@ (8000264 <ADC_Gelen_deger+0x44>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	091b      	lsrs	r3, r3, #4
 8000258:	b2db      	uxtb	r3, r3
}
 800025a:	0018      	movs	r0, r3
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000030 	.word	0x20000030
 8000264:	200000d5 	.word	0x200000d5

08000268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026c:	f000 fba8 	bl	80009c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000270:	f000 f82c 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000274:	f000 f90a 	bl	800048c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000278:	f000 f8ca 	bl	8000410 <MX_SPI1_Init>
  MX_ADC_Init();
 800027c:	f000 f86c 	bl	8000358 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  	 nrf24_config(40, 1); // 2.4 GHz bandında 40. kanalda, 32 byte payload
 8000280:	2101      	movs	r1, #1
 8000282:	2028      	movs	r0, #40	@ 0x28
 8000284:	f000 f96c 	bl	8000560 <nrf24_config>
     nrf24_tx_address(tx_address);
 8000288:	4b0e      	ldr	r3, [pc, #56]	@ (80002c4 <main+0x5c>)
 800028a:	0018      	movs	r0, r3
 800028c:	f000 f995 	bl	80005ba <nrf24_tx_address>
     nrf24_tx_mode();
 8000290:	f000 f9a7 	bl	80005e2 <nrf24_tx_mode>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  tx_data[0] = ADC_Gelen_deger();
 8000294:	f7ff ffc4 	bl	8000220 <ADC_Gelen_deger>
 8000298:	0003      	movs	r3, r0
 800029a:	001a      	movs	r2, r3
 800029c:	4b0a      	ldr	r3, [pc, #40]	@ (80002c8 <main+0x60>)
 800029e:	701a      	strb	r2, [r3, #0]

	             if (nrf24_send((uint8_t*)tx_data, 1))
 80002a0:	4b09      	ldr	r3, [pc, #36]	@ (80002c8 <main+0x60>)
 80002a2:	2101      	movs	r1, #1
 80002a4:	0018      	movs	r0, r3
 80002a6:	f000 f9ab 	bl	8000600 <nrf24_send>
 80002aa:	1e03      	subs	r3, r0, #0
 80002ac:	d005      	beq.n	80002ba <main+0x52>
	             {
	                 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80002ae:	2390      	movs	r3, #144	@ 0x90
 80002b0:	05db      	lsls	r3, r3, #23
 80002b2:	2120      	movs	r1, #32
 80002b4:	0018      	movs	r0, r3
 80002b6:	f001 fafc 	bl	80018b2 <HAL_GPIO_TogglePin>

	             }
	             HAL_Delay(50);
 80002ba:	2032      	movs	r0, #50	@ 0x32
 80002bc:	f000 fbe4 	bl	8000a88 <HAL_Delay>
	  tx_data[0] = ADC_Gelen_deger();
 80002c0:	e7e8      	b.n	8000294 <main+0x2c>
 80002c2:	46c0      	nop			@ (mov r8, r8)
 80002c4:	20000000 	.word	0x20000000
 80002c8:	200000d4 	.word	0x200000d4

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b590      	push	{r4, r7, lr}
 80002ce:	b091      	sub	sp, #68	@ 0x44
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	2410      	movs	r4, #16
 80002d4:	193b      	adds	r3, r7, r4
 80002d6:	0018      	movs	r0, r3
 80002d8:	2330      	movs	r3, #48	@ 0x30
 80002da:	001a      	movs	r2, r3
 80002dc:	2100      	movs	r1, #0
 80002de:	f002 fe61 	bl	8002fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e2:	003b      	movs	r3, r7
 80002e4:	0018      	movs	r0, r3
 80002e6:	2310      	movs	r3, #16
 80002e8:	001a      	movs	r2, r3
 80002ea:	2100      	movs	r1, #0
 80002ec:	f002 fe5a 	bl	8002fa4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80002f0:	0021      	movs	r1, r4
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2212      	movs	r2, #18
 80002f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2201      	movs	r2, #1
 80002fc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2201      	movs	r2, #1
 8000302:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2210      	movs	r2, #16
 8000308:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2210      	movs	r2, #16
 800030e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2200      	movs	r2, #0
 8000314:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000316:	187b      	adds	r3, r7, r1
 8000318:	0018      	movs	r0, r3
 800031a:	f001 fae5 	bl	80018e8 <HAL_RCC_OscConfig>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000322:	f000 f917 	bl	8000554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000326:	003b      	movs	r3, r7
 8000328:	2207      	movs	r2, #7
 800032a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800032c:	003b      	movs	r3, r7
 800032e:	2200      	movs	r2, #0
 8000330:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000332:	003b      	movs	r3, r7
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000338:	003b      	movs	r3, r7
 800033a:	2200      	movs	r2, #0
 800033c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800033e:	003b      	movs	r3, r7
 8000340:	2100      	movs	r1, #0
 8000342:	0018      	movs	r0, r3
 8000344:	f001 fdea 	bl	8001f1c <HAL_RCC_ClockConfig>
 8000348:	1e03      	subs	r3, r0, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800034c:	f000 f902 	bl	8000554 <Error_Handler>
  }
}
 8000350:	46c0      	nop			@ (mov r8, r8)
 8000352:	46bd      	mov	sp, r7
 8000354:	b011      	add	sp, #68	@ 0x44
 8000356:	bd90      	pop	{r4, r7, pc}

08000358 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	0018      	movs	r0, r3
 8000362:	230c      	movs	r3, #12
 8000364:	001a      	movs	r2, r3
 8000366:	2100      	movs	r1, #0
 8000368:	f002 fe1c 	bl	8002fa4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800036c:	4b26      	ldr	r3, [pc, #152]	@ (8000408 <MX_ADC_Init+0xb0>)
 800036e:	4a27      	ldr	r2, [pc, #156]	@ (800040c <MX_ADC_Init+0xb4>)
 8000370:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000372:	4b25      	ldr	r3, [pc, #148]	@ (8000408 <MX_ADC_Init+0xb0>)
 8000374:	2200      	movs	r2, #0
 8000376:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8000378:	4b23      	ldr	r3, [pc, #140]	@ (8000408 <MX_ADC_Init+0xb0>)
 800037a:	2210      	movs	r2, #16
 800037c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800037e:	4b22      	ldr	r3, [pc, #136]	@ (8000408 <MX_ADC_Init+0xb0>)
 8000380:	2200      	movs	r2, #0
 8000382:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000384:	4b20      	ldr	r3, [pc, #128]	@ (8000408 <MX_ADC_Init+0xb0>)
 8000386:	2201      	movs	r2, #1
 8000388:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800038a:	4b1f      	ldr	r3, [pc, #124]	@ (8000408 <MX_ADC_Init+0xb0>)
 800038c:	2204      	movs	r2, #4
 800038e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000390:	4b1d      	ldr	r3, [pc, #116]	@ (8000408 <MX_ADC_Init+0xb0>)
 8000392:	2200      	movs	r2, #0
 8000394:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000396:	4b1c      	ldr	r3, [pc, #112]	@ (8000408 <MX_ADC_Init+0xb0>)
 8000398:	2200      	movs	r2, #0
 800039a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 800039c:	4b1a      	ldr	r3, [pc, #104]	@ (8000408 <MX_ADC_Init+0xb0>)
 800039e:	2201      	movs	r2, #1
 80003a0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80003a2:	4b19      	ldr	r3, [pc, #100]	@ (8000408 <MX_ADC_Init+0xb0>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003a8:	4b17      	ldr	r3, [pc, #92]	@ (8000408 <MX_ADC_Init+0xb0>)
 80003aa:	22c2      	movs	r2, #194	@ 0xc2
 80003ac:	32ff      	adds	r2, #255	@ 0xff
 80003ae:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003b0:	4b15      	ldr	r3, [pc, #84]	@ (8000408 <MX_ADC_Init+0xb0>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80003b6:	4b14      	ldr	r3, [pc, #80]	@ (8000408 <MX_ADC_Init+0xb0>)
 80003b8:	2224      	movs	r2, #36	@ 0x24
 80003ba:	2100      	movs	r1, #0
 80003bc:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003be:	4b12      	ldr	r3, [pc, #72]	@ (8000408 <MX_ADC_Init+0xb0>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003c4:	4b10      	ldr	r3, [pc, #64]	@ (8000408 <MX_ADC_Init+0xb0>)
 80003c6:	0018      	movs	r0, r3
 80003c8:	f000 fb82 	bl	8000ad0 <HAL_ADC_Init>
 80003cc:	1e03      	subs	r3, r0, #0
 80003ce:	d001      	beq.n	80003d4 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80003d0:	f000 f8c0 	bl	8000554 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2280      	movs	r2, #128	@ 0x80
 80003de:	0152      	lsls	r2, r2, #5
 80003e0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2280      	movs	r2, #128	@ 0x80
 80003e6:	0552      	lsls	r2, r2, #21
 80003e8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003ea:	1d3a      	adds	r2, r7, #4
 80003ec:	4b06      	ldr	r3, [pc, #24]	@ (8000408 <MX_ADC_Init+0xb0>)
 80003ee:	0011      	movs	r1, r2
 80003f0:	0018      	movs	r0, r3
 80003f2:	f000 fde5 	bl	8000fc0 <HAL_ADC_ConfigChannel>
 80003f6:	1e03      	subs	r3, r0, #0
 80003f8:	d001      	beq.n	80003fe <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80003fa:	f000 f8ab 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80003fe:	46c0      	nop			@ (mov r8, r8)
 8000400:	46bd      	mov	sp, r7
 8000402:	b004      	add	sp, #16
 8000404:	bd80      	pop	{r7, pc}
 8000406:	46c0      	nop			@ (mov r8, r8)
 8000408:	20000030 	.word	0x20000030
 800040c:	40012400 	.word	0x40012400

08000410 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000414:	4b1b      	ldr	r3, [pc, #108]	@ (8000484 <MX_SPI1_Init+0x74>)
 8000416:	4a1c      	ldr	r2, [pc, #112]	@ (8000488 <MX_SPI1_Init+0x78>)
 8000418:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800041a:	4b1a      	ldr	r3, [pc, #104]	@ (8000484 <MX_SPI1_Init+0x74>)
 800041c:	2282      	movs	r2, #130	@ 0x82
 800041e:	0052      	lsls	r2, r2, #1
 8000420:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000422:	4b18      	ldr	r3, [pc, #96]	@ (8000484 <MX_SPI1_Init+0x74>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000428:	4b16      	ldr	r3, [pc, #88]	@ (8000484 <MX_SPI1_Init+0x74>)
 800042a:	22e0      	movs	r2, #224	@ 0xe0
 800042c:	00d2      	lsls	r2, r2, #3
 800042e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000430:	4b14      	ldr	r3, [pc, #80]	@ (8000484 <MX_SPI1_Init+0x74>)
 8000432:	2200      	movs	r2, #0
 8000434:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000436:	4b13      	ldr	r3, [pc, #76]	@ (8000484 <MX_SPI1_Init+0x74>)
 8000438:	2200      	movs	r2, #0
 800043a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800043c:	4b11      	ldr	r3, [pc, #68]	@ (8000484 <MX_SPI1_Init+0x74>)
 800043e:	2280      	movs	r2, #128	@ 0x80
 8000440:	0092      	lsls	r2, r2, #2
 8000442:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000444:	4b0f      	ldr	r3, [pc, #60]	@ (8000484 <MX_SPI1_Init+0x74>)
 8000446:	2208      	movs	r2, #8
 8000448:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800044a:	4b0e      	ldr	r3, [pc, #56]	@ (8000484 <MX_SPI1_Init+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000450:	4b0c      	ldr	r3, [pc, #48]	@ (8000484 <MX_SPI1_Init+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000456:	4b0b      	ldr	r3, [pc, #44]	@ (8000484 <MX_SPI1_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800045c:	4b09      	ldr	r3, [pc, #36]	@ (8000484 <MX_SPI1_Init+0x74>)
 800045e:	2207      	movs	r2, #7
 8000460:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000462:	4b08      	ldr	r3, [pc, #32]	@ (8000484 <MX_SPI1_Init+0x74>)
 8000464:	2200      	movs	r2, #0
 8000466:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000468:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <MX_SPI1_Init+0x74>)
 800046a:	2208      	movs	r2, #8
 800046c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800046e:	4b05      	ldr	r3, [pc, #20]	@ (8000484 <MX_SPI1_Init+0x74>)
 8000470:	0018      	movs	r0, r3
 8000472:	f001 fe77 	bl	8002164 <HAL_SPI_Init>
 8000476:	1e03      	subs	r3, r0, #0
 8000478:	d001      	beq.n	800047e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800047a:	f000 f86b 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800047e:	46c0      	nop			@ (mov r8, r8)
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20000070 	.word	0x20000070
 8000488:	40013000 	.word	0x40013000

0800048c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800048c:	b590      	push	{r4, r7, lr}
 800048e:	b089      	sub	sp, #36	@ 0x24
 8000490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	240c      	movs	r4, #12
 8000494:	193b      	adds	r3, r7, r4
 8000496:	0018      	movs	r0, r3
 8000498:	2314      	movs	r3, #20
 800049a:	001a      	movs	r2, r3
 800049c:	2100      	movs	r1, #0
 800049e:	f002 fd81 	bl	8002fa4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a2:	4b2a      	ldr	r3, [pc, #168]	@ (800054c <MX_GPIO_Init+0xc0>)
 80004a4:	695a      	ldr	r2, [r3, #20]
 80004a6:	4b29      	ldr	r3, [pc, #164]	@ (800054c <MX_GPIO_Init+0xc0>)
 80004a8:	2180      	movs	r1, #128	@ 0x80
 80004aa:	0289      	lsls	r1, r1, #10
 80004ac:	430a      	orrs	r2, r1
 80004ae:	615a      	str	r2, [r3, #20]
 80004b0:	4b26      	ldr	r3, [pc, #152]	@ (800054c <MX_GPIO_Init+0xc0>)
 80004b2:	695a      	ldr	r2, [r3, #20]
 80004b4:	2380      	movs	r3, #128	@ 0x80
 80004b6:	029b      	lsls	r3, r3, #10
 80004b8:	4013      	ands	r3, r2
 80004ba:	60bb      	str	r3, [r7, #8]
 80004bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004be:	4b23      	ldr	r3, [pc, #140]	@ (800054c <MX_GPIO_Init+0xc0>)
 80004c0:	695a      	ldr	r2, [r3, #20]
 80004c2:	4b22      	ldr	r3, [pc, #136]	@ (800054c <MX_GPIO_Init+0xc0>)
 80004c4:	2180      	movs	r1, #128	@ 0x80
 80004c6:	02c9      	lsls	r1, r1, #11
 80004c8:	430a      	orrs	r2, r1
 80004ca:	615a      	str	r2, [r3, #20]
 80004cc:	4b1f      	ldr	r3, [pc, #124]	@ (800054c <MX_GPIO_Init+0xc0>)
 80004ce:	695a      	ldr	r2, [r3, #20]
 80004d0:	2380      	movs	r3, #128	@ 0x80
 80004d2:	02db      	lsls	r3, r3, #11
 80004d4:	4013      	ands	r3, r2
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80004da:	2390      	movs	r3, #144	@ 0x90
 80004dc:	05db      	lsls	r3, r3, #23
 80004de:	2200      	movs	r2, #0
 80004e0:	2120      	movs	r1, #32
 80004e2:	0018      	movs	r0, r3
 80004e4:	f001 f9c8 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_9, GPIO_PIN_RESET);
 80004e8:	23c0      	movs	r3, #192	@ 0xc0
 80004ea:	00db      	lsls	r3, r3, #3
 80004ec:	4818      	ldr	r0, [pc, #96]	@ (8000550 <MX_GPIO_Init+0xc4>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	0019      	movs	r1, r3
 80004f2:	f001 f9c1 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	2220      	movs	r2, #32
 80004fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	2201      	movs	r2, #1
 8000500:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	193b      	adds	r3, r7, r4
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000508:	193b      	adds	r3, r7, r4
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050e:	193a      	adds	r2, r7, r4
 8000510:	2390      	movs	r3, #144	@ 0x90
 8000512:	05db      	lsls	r3, r3, #23
 8000514:	0011      	movs	r1, r2
 8000516:	0018      	movs	r0, r3
 8000518:	f001 f83e 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800051c:	0021      	movs	r1, r4
 800051e:	187b      	adds	r3, r7, r1
 8000520:	22c0      	movs	r2, #192	@ 0xc0
 8000522:	00d2      	lsls	r2, r2, #3
 8000524:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2201      	movs	r2, #1
 800052a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2203      	movs	r2, #3
 8000536:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000538:	187b      	adds	r3, r7, r1
 800053a:	4a05      	ldr	r2, [pc, #20]	@ (8000550 <MX_GPIO_Init+0xc4>)
 800053c:	0019      	movs	r1, r3
 800053e:	0010      	movs	r0, r2
 8000540:	f001 f82a 	bl	8001598 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000544:	46c0      	nop			@ (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b009      	add	sp, #36	@ 0x24
 800054a:	bd90      	pop	{r4, r7, pc}
 800054c:	40021000 	.word	0x40021000
 8000550:	48000400 	.word	0x48000400

08000554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000558:	b672      	cpsid	i
}
 800055a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800055c:	46c0      	nop			@ (mov r8, r8)
 800055e:	e7fd      	b.n	800055c <Error_Handler+0x8>

08000560 <nrf24_config>:
    HAL_Delay(5);
}

// **RF Modülü Konfigürasyonu**
void nrf24_config(uint8_t channel, uint8_t payloadSize)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	0002      	movs	r2, r0
 8000568:	1dfb      	adds	r3, r7, #7
 800056a:	701a      	strb	r2, [r3, #0]
 800056c:	1dbb      	adds	r3, r7, #6
 800056e:	1c0a      	adds	r2, r1, #0
 8000570:	701a      	strb	r2, [r3, #0]
    nrf24_writeRegister(0x05, channel);  // RF Kanalı
 8000572:	1dfb      	adds	r3, r7, #7
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	0019      	movs	r1, r3
 8000578:	2005      	movs	r0, #5
 800057a:	f000 f87b 	bl	8000674 <nrf24_writeRegister>
    nrf24_writeRegister(0x11, payloadSize);  // RX Payload boyutu
 800057e:	1dbb      	adds	r3, r7, #6
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	0019      	movs	r1, r3
 8000584:	2011      	movs	r0, #17
 8000586:	f000 f875 	bl	8000674 <nrf24_writeRegister>
    nrf24_writeRegister(0x01, 0x01);  // Auto ACK Açık
 800058a:	2101      	movs	r1, #1
 800058c:	2001      	movs	r0, #1
 800058e:	f000 f871 	bl	8000674 <nrf24_writeRegister>
    nrf24_writeRegister(0x02, 0x01);  // Data Pipe 0 Aktif
 8000592:	2101      	movs	r1, #1
 8000594:	2002      	movs	r0, #2
 8000596:	f000 f86d 	bl	8000674 <nrf24_writeRegister>
    nrf24_writeRegister(0x03, 0x03);  // Adres genişliği 5 bayt
 800059a:	2103      	movs	r1, #3
 800059c:	2003      	movs	r0, #3
 800059e:	f000 f869 	bl	8000674 <nrf24_writeRegister>
    nrf24_writeRegister(0x06, 0x07);  // Data rate: 1Mbps, Güç: 0dBm
 80005a2:	2107      	movs	r1, #7
 80005a4:	2006      	movs	r0, #6
 80005a6:	f000 f865 	bl	8000674 <nrf24_writeRegister>
    nrf24_writeRegister(0x00, 0x0E);  // CRC ve güç açık
 80005aa:	210e      	movs	r1, #14
 80005ac:	2000      	movs	r0, #0
 80005ae:	f000 f861 	bl	8000674 <nrf24_writeRegister>
}
 80005b2:	46c0      	nop			@ (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b002      	add	sp, #8
 80005b8:	bd80      	pop	{r7, pc}

080005ba <nrf24_tx_address>:

// **Verici Adresi Ayarla**
void nrf24_tx_address(uint8_t *address)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b082      	sub	sp, #8
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
    nrf24_writeRegisterMulti(0x10, address, 5);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2205      	movs	r2, #5
 80005c6:	0019      	movs	r1, r3
 80005c8:	2010      	movs	r0, #16
 80005ca:	f000 f87b 	bl	80006c4 <nrf24_writeRegisterMulti>
    nrf24_writeRegisterMulti(0x0A, address, 5);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2205      	movs	r2, #5
 80005d2:	0019      	movs	r1, r3
 80005d4:	200a      	movs	r0, #10
 80005d6:	f000 f875 	bl	80006c4 <nrf24_writeRegisterMulti>
}
 80005da:	46c0      	nop			@ (mov r8, r8)
 80005dc:	46bd      	mov	sp, r7
 80005de:	b002      	add	sp, #8
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <nrf24_tx_mode>:
    nrf24_writeRegisterMulti(0x0A, address, 5);
}

// **Verici Moduna Geç**
void nrf24_tx_mode(void)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	af00      	add	r7, sp, #0
    nrf24_writeRegister(0x00, 0x0E);
 80005e6:	210e      	movs	r1, #14
 80005e8:	2000      	movs	r0, #0
 80005ea:	f000 f843 	bl	8000674 <nrf24_writeRegister>
    nrf24_ceHigh();
 80005ee:	f000 f8bd 	bl	800076c <nrf24_ceHigh>
    HAL_Delay(1);
 80005f2:	2001      	movs	r0, #1
 80005f4:	f000 fa48 	bl	8000a88 <HAL_Delay>
}
 80005f8:	46c0      	nop			@ (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <nrf24_send>:
    HAL_Delay(1);
}

// **Veri Gönder**
uint8_t nrf24_send(uint8_t *data, uint8_t length)
{
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	000a      	movs	r2, r1
 800060a:	1cfb      	adds	r3, r7, #3
 800060c:	701a      	strb	r2, [r3, #0]
    uint8_t status;

    // SPI haberleşmesini başlat
    nrf24_csnLow();
 800060e:	f000 f8c9 	bl	80007a4 <nrf24_csnLow>

    // TX FIFO'ya veri yazmak için komut gönder
    uint8_t command = NRF24_CMD_W_TX_PAYLOAD;
 8000612:	210e      	movs	r1, #14
 8000614:	187b      	adds	r3, r7, r1
 8000616:	22a0      	movs	r2, #160	@ 0xa0
 8000618:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&NRF_SPI, &command, 1, 100);
 800061a:	1879      	adds	r1, r7, r1
 800061c:	4814      	ldr	r0, [pc, #80]	@ (8000670 <nrf24_send+0x70>)
 800061e:	2364      	movs	r3, #100	@ 0x64
 8000620:	2201      	movs	r2, #1
 8000622:	f001 fe57 	bl	80022d4 <HAL_SPI_Transmit>

    // Veriyi gönder (length kadar bayt gönderiyoruz)
    HAL_SPI_Transmit(&NRF_SPI, data, length, 100);
 8000626:	1cfb      	adds	r3, r7, #3
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	b29a      	uxth	r2, r3
 800062c:	6879      	ldr	r1, [r7, #4]
 800062e:	4810      	ldr	r0, [pc, #64]	@ (8000670 <nrf24_send+0x70>)
 8000630:	2364      	movs	r3, #100	@ 0x64
 8000632:	f001 fe4f 	bl	80022d4 <HAL_SPI_Transmit>

    // SPI haberleşmesini bitir
    nrf24_csnHigh();
 8000636:	f000 f8a7 	bl	8000788 <nrf24_csnHigh>

    // Kısa bir gecikme
    HAL_Delay(10);
 800063a:	200a      	movs	r0, #10
 800063c:	f000 fa24 	bl	8000a88 <HAL_Delay>

    // Durum registerini oku
    nrf24_readRegisterMulti(0x07, &status, 1);
 8000640:	240f      	movs	r4, #15
 8000642:	193b      	adds	r3, r7, r4
 8000644:	2201      	movs	r2, #1
 8000646:	0019      	movs	r1, r3
 8000648:	2007      	movs	r0, #7
 800064a:	f000 f867 	bl	800071c <nrf24_readRegisterMulti>

    // Eğer veri başarıyla gönderildiyse
    if (status & 0x20)
 800064e:	193b      	adds	r3, r7, r4
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	001a      	movs	r2, r3
 8000654:	2320      	movs	r3, #32
 8000656:	4013      	ands	r3, r2
 8000658:	d005      	beq.n	8000666 <nrf24_send+0x66>
    {
        nrf24_writeRegister(0x07, 0x20);  // TX flag temizle
 800065a:	2120      	movs	r1, #32
 800065c:	2007      	movs	r0, #7
 800065e:	f000 f809 	bl	8000674 <nrf24_writeRegister>
        return 1;  // Başarılı
 8000662:	2301      	movs	r3, #1
 8000664:	e000      	b.n	8000668 <nrf24_send+0x68>
    }

    return 0;  // Başarısız
 8000666:	2300      	movs	r3, #0
}
 8000668:	0018      	movs	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	b005      	add	sp, #20
 800066e:	bd90      	pop	{r4, r7, pc}
 8000670:	20000070 	.word	0x20000070

08000674 <nrf24_writeRegister>:
    nrf24_writeRegister(0x07, 0x40);
}

// **SPI Register Yaz**
static void nrf24_writeRegister(uint8_t reg, uint8_t value)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	0002      	movs	r2, r0
 800067c:	1dfb      	adds	r3, r7, #7
 800067e:	701a      	strb	r2, [r3, #0]
 8000680:	1dbb      	adds	r3, r7, #6
 8000682:	1c0a      	adds	r2, r1, #0
 8000684:	701a      	strb	r2, [r3, #0]
    nrf24_csnLow();
 8000686:	f000 f88d 	bl	80007a4 <nrf24_csnLow>
    uint8_t command = NRF24_CMD_W_REGISTER | reg;
 800068a:	1dfb      	adds	r3, r7, #7
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2220      	movs	r2, #32
 8000690:	4313      	orrs	r3, r2
 8000692:	b2da      	uxtb	r2, r3
 8000694:	210f      	movs	r1, #15
 8000696:	187b      	adds	r3, r7, r1
 8000698:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&NRF_SPI, &command, 1, 100);
 800069a:	1879      	adds	r1, r7, r1
 800069c:	4808      	ldr	r0, [pc, #32]	@ (80006c0 <nrf24_writeRegister+0x4c>)
 800069e:	2364      	movs	r3, #100	@ 0x64
 80006a0:	2201      	movs	r2, #1
 80006a2:	f001 fe17 	bl	80022d4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&NRF_SPI, &value, 1, 100);
 80006a6:	1db9      	adds	r1, r7, #6
 80006a8:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <nrf24_writeRegister+0x4c>)
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	2201      	movs	r2, #1
 80006ae:	f001 fe11 	bl	80022d4 <HAL_SPI_Transmit>
    nrf24_csnHigh();
 80006b2:	f000 f869 	bl	8000788 <nrf24_csnHigh>
}
 80006b6:	46c0      	nop			@ (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b004      	add	sp, #16
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			@ (mov r8, r8)
 80006c0:	20000070 	.word	0x20000070

080006c4 <nrf24_writeRegisterMulti>:

// **SPI Register Çoklu Yaz**
static void nrf24_writeRegisterMulti(uint8_t reg, uint8_t *data, uint8_t length)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6039      	str	r1, [r7, #0]
 80006cc:	0011      	movs	r1, r2
 80006ce:	1dfb      	adds	r3, r7, #7
 80006d0:	1c02      	adds	r2, r0, #0
 80006d2:	701a      	strb	r2, [r3, #0]
 80006d4:	1dbb      	adds	r3, r7, #6
 80006d6:	1c0a      	adds	r2, r1, #0
 80006d8:	701a      	strb	r2, [r3, #0]
    nrf24_csnLow();
 80006da:	f000 f863 	bl	80007a4 <nrf24_csnLow>
    uint8_t command = NRF24_CMD_W_REGISTER | reg;
 80006de:	1dfb      	adds	r3, r7, #7
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2220      	movs	r2, #32
 80006e4:	4313      	orrs	r3, r2
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	210f      	movs	r1, #15
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&NRF_SPI, &command, 1, 100);
 80006ee:	1879      	adds	r1, r7, r1
 80006f0:	4809      	ldr	r0, [pc, #36]	@ (8000718 <nrf24_writeRegisterMulti+0x54>)
 80006f2:	2364      	movs	r3, #100	@ 0x64
 80006f4:	2201      	movs	r2, #1
 80006f6:	f001 fded 	bl	80022d4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&NRF_SPI, data, length, 100);
 80006fa:	1dbb      	adds	r3, r7, #6
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	b29a      	uxth	r2, r3
 8000700:	6839      	ldr	r1, [r7, #0]
 8000702:	4805      	ldr	r0, [pc, #20]	@ (8000718 <nrf24_writeRegisterMulti+0x54>)
 8000704:	2364      	movs	r3, #100	@ 0x64
 8000706:	f001 fde5 	bl	80022d4 <HAL_SPI_Transmit>
    nrf24_csnHigh();
 800070a:	f000 f83d 	bl	8000788 <nrf24_csnHigh>
}
 800070e:	46c0      	nop			@ (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b004      	add	sp, #16
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	20000070 	.word	0x20000070

0800071c <nrf24_readRegisterMulti>:

// **SPI Register Çoklu Oku**
static void nrf24_readRegisterMulti(uint8_t reg, uint8_t *data, uint8_t length)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6039      	str	r1, [r7, #0]
 8000724:	0011      	movs	r1, r2
 8000726:	1dfb      	adds	r3, r7, #7
 8000728:	1c02      	adds	r2, r0, #0
 800072a:	701a      	strb	r2, [r3, #0]
 800072c:	1dbb      	adds	r3, r7, #6
 800072e:	1c0a      	adds	r2, r1, #0
 8000730:	701a      	strb	r2, [r3, #0]
    nrf24_csnLow();
 8000732:	f000 f837 	bl	80007a4 <nrf24_csnLow>
    uint8_t command = NRF24_CMD_R_REGISTER | reg;
 8000736:	210f      	movs	r1, #15
 8000738:	187b      	adds	r3, r7, r1
 800073a:	1dfa      	adds	r2, r7, #7
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&NRF_SPI, &command, 1, 100);
 8000740:	1879      	adds	r1, r7, r1
 8000742:	4809      	ldr	r0, [pc, #36]	@ (8000768 <nrf24_readRegisterMulti+0x4c>)
 8000744:	2364      	movs	r3, #100	@ 0x64
 8000746:	2201      	movs	r2, #1
 8000748:	f001 fdc4 	bl	80022d4 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&NRF_SPI, data, length, 100);
 800074c:	1dbb      	adds	r3, r7, #6
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	b29a      	uxth	r2, r3
 8000752:	6839      	ldr	r1, [r7, #0]
 8000754:	4804      	ldr	r0, [pc, #16]	@ (8000768 <nrf24_readRegisterMulti+0x4c>)
 8000756:	2364      	movs	r3, #100	@ 0x64
 8000758:	f001 ff1c 	bl	8002594 <HAL_SPI_Receive>
    nrf24_csnHigh();
 800075c:	f000 f814 	bl	8000788 <nrf24_csnHigh>
}
 8000760:	46c0      	nop			@ (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	b004      	add	sp, #16
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000070 	.word	0x20000070

0800076c <nrf24_ceHigh>:

// **CE Yüksek (Aktif)**
static void nrf24_ceHigh(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_PORT, NRF_CE_PIN, GPIO_PIN_SET);
 8000770:	2380      	movs	r3, #128	@ 0x80
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	4803      	ldr	r0, [pc, #12]	@ (8000784 <nrf24_ceHigh+0x18>)
 8000776:	2201      	movs	r2, #1
 8000778:	0019      	movs	r1, r3
 800077a:	f001 f87d 	bl	8001878 <HAL_GPIO_WritePin>
}
 800077e:	46c0      	nop			@ (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	48000400 	.word	0x48000400

08000788 <nrf24_csnHigh>:
    HAL_GPIO_WritePin(NRF_CE_PORT, NRF_CE_PIN, GPIO_PIN_RESET);
}

// **CSN Yüksek (İşlem Yok)**
static void nrf24_csnHigh(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_PORT, NRF_CSN_PIN, GPIO_PIN_SET);
 800078c:	2380      	movs	r3, #128	@ 0x80
 800078e:	00db      	lsls	r3, r3, #3
 8000790:	4803      	ldr	r0, [pc, #12]	@ (80007a0 <nrf24_csnHigh+0x18>)
 8000792:	2201      	movs	r2, #1
 8000794:	0019      	movs	r1, r3
 8000796:	f001 f86f 	bl	8001878 <HAL_GPIO_WritePin>
}
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	48000400 	.word	0x48000400

080007a4 <nrf24_csnLow>:

// **CSN Düşük (İşlem Başlat)**
static void nrf24_csnLow(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_PORT, NRF_CSN_PIN, GPIO_PIN_RESET);
 80007a8:	2380      	movs	r3, #128	@ 0x80
 80007aa:	00db      	lsls	r3, r3, #3
 80007ac:	4803      	ldr	r0, [pc, #12]	@ (80007bc <nrf24_csnLow+0x18>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	0019      	movs	r1, r3
 80007b2:	f001 f861 	bl	8001878 <HAL_GPIO_WritePin>
}
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	48000400 	.word	0x48000400

080007c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <HAL_MspInit+0x44>)
 80007c8:	699a      	ldr	r2, [r3, #24]
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <HAL_MspInit+0x44>)
 80007cc:	2101      	movs	r1, #1
 80007ce:	430a      	orrs	r2, r1
 80007d0:	619a      	str	r2, [r3, #24]
 80007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <HAL_MspInit+0x44>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	2201      	movs	r2, #1
 80007d8:	4013      	ands	r3, r2
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <HAL_MspInit+0x44>)
 80007e0:	69da      	ldr	r2, [r3, #28]
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <HAL_MspInit+0x44>)
 80007e4:	2180      	movs	r1, #128	@ 0x80
 80007e6:	0549      	lsls	r1, r1, #21
 80007e8:	430a      	orrs	r2, r1
 80007ea:	61da      	str	r2, [r3, #28]
 80007ec:	4b05      	ldr	r3, [pc, #20]	@ (8000804 <HAL_MspInit+0x44>)
 80007ee:	69da      	ldr	r2, [r3, #28]
 80007f0:	2380      	movs	r3, #128	@ 0x80
 80007f2:	055b      	lsls	r3, r3, #21
 80007f4:	4013      	ands	r3, r2
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fa:	46c0      	nop			@ (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b002      	add	sp, #8
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	40021000 	.word	0x40021000

08000808 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b08b      	sub	sp, #44	@ 0x2c
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	2414      	movs	r4, #20
 8000812:	193b      	adds	r3, r7, r4
 8000814:	0018      	movs	r0, r3
 8000816:	2314      	movs	r3, #20
 8000818:	001a      	movs	r2, r3
 800081a:	2100      	movs	r1, #0
 800081c:	f002 fbc2 	bl	8002fa4 <memset>
  if(hadc->Instance==ADC1)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a19      	ldr	r2, [pc, #100]	@ (800088c <HAL_ADC_MspInit+0x84>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d12b      	bne.n	8000882 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800082a:	4b19      	ldr	r3, [pc, #100]	@ (8000890 <HAL_ADC_MspInit+0x88>)
 800082c:	699a      	ldr	r2, [r3, #24]
 800082e:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <HAL_ADC_MspInit+0x88>)
 8000830:	2180      	movs	r1, #128	@ 0x80
 8000832:	0089      	lsls	r1, r1, #2
 8000834:	430a      	orrs	r2, r1
 8000836:	619a      	str	r2, [r3, #24]
 8000838:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <HAL_ADC_MspInit+0x88>)
 800083a:	699a      	ldr	r2, [r3, #24]
 800083c:	2380      	movs	r3, #128	@ 0x80
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	4013      	ands	r3, r2
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	4b12      	ldr	r3, [pc, #72]	@ (8000890 <HAL_ADC_MspInit+0x88>)
 8000848:	695a      	ldr	r2, [r3, #20]
 800084a:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <HAL_ADC_MspInit+0x88>)
 800084c:	2180      	movs	r1, #128	@ 0x80
 800084e:	0289      	lsls	r1, r1, #10
 8000850:	430a      	orrs	r2, r1
 8000852:	615a      	str	r2, [r3, #20]
 8000854:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <HAL_ADC_MspInit+0x88>)
 8000856:	695a      	ldr	r2, [r3, #20]
 8000858:	2380      	movs	r3, #128	@ 0x80
 800085a:	029b      	lsls	r3, r3, #10
 800085c:	4013      	ands	r3, r2
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000862:	193b      	adds	r3, r7, r4
 8000864:	2201      	movs	r2, #1
 8000866:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000868:	193b      	adds	r3, r7, r4
 800086a:	2203      	movs	r2, #3
 800086c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	193b      	adds	r3, r7, r4
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	193a      	adds	r2, r7, r4
 8000876:	2390      	movs	r3, #144	@ 0x90
 8000878:	05db      	lsls	r3, r3, #23
 800087a:	0011      	movs	r1, r2
 800087c:	0018      	movs	r0, r3
 800087e:	f000 fe8b 	bl	8001598 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b00b      	add	sp, #44	@ 0x2c
 8000888:	bd90      	pop	{r4, r7, pc}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	40012400 	.word	0x40012400
 8000890:	40021000 	.word	0x40021000

08000894 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b08b      	sub	sp, #44	@ 0x2c
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	2414      	movs	r4, #20
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	0018      	movs	r0, r3
 80008a2:	2314      	movs	r3, #20
 80008a4:	001a      	movs	r2, r3
 80008a6:	2100      	movs	r1, #0
 80008a8:	f002 fb7c 	bl	8002fa4 <memset>
  if(hspi->Instance==SPI1)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a1c      	ldr	r2, [pc, #112]	@ (8000924 <HAL_SPI_MspInit+0x90>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d131      	bne.n	800091a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000928 <HAL_SPI_MspInit+0x94>)
 80008b8:	699a      	ldr	r2, [r3, #24]
 80008ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000928 <HAL_SPI_MspInit+0x94>)
 80008bc:	2180      	movs	r1, #128	@ 0x80
 80008be:	0149      	lsls	r1, r1, #5
 80008c0:	430a      	orrs	r2, r1
 80008c2:	619a      	str	r2, [r3, #24]
 80008c4:	4b18      	ldr	r3, [pc, #96]	@ (8000928 <HAL_SPI_MspInit+0x94>)
 80008c6:	699a      	ldr	r2, [r3, #24]
 80008c8:	2380      	movs	r3, #128	@ 0x80
 80008ca:	015b      	lsls	r3, r3, #5
 80008cc:	4013      	ands	r3, r2
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	4b15      	ldr	r3, [pc, #84]	@ (8000928 <HAL_SPI_MspInit+0x94>)
 80008d4:	695a      	ldr	r2, [r3, #20]
 80008d6:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <HAL_SPI_MspInit+0x94>)
 80008d8:	2180      	movs	r1, #128	@ 0x80
 80008da:	02c9      	lsls	r1, r1, #11
 80008dc:	430a      	orrs	r2, r1
 80008de:	615a      	str	r2, [r3, #20]
 80008e0:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <HAL_SPI_MspInit+0x94>)
 80008e2:	695a      	ldr	r2, [r3, #20]
 80008e4:	2380      	movs	r3, #128	@ 0x80
 80008e6:	02db      	lsls	r3, r3, #11
 80008e8:	4013      	ands	r3, r2
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80008ee:	0021      	movs	r1, r4
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2238      	movs	r2, #56	@ 0x38
 80008f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2202      	movs	r2, #2
 80008fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2203      	movs	r2, #3
 8000906:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090e:	187b      	adds	r3, r7, r1
 8000910:	4a06      	ldr	r2, [pc, #24]	@ (800092c <HAL_SPI_MspInit+0x98>)
 8000912:	0019      	movs	r1, r3
 8000914:	0010      	movs	r0, r2
 8000916:	f000 fe3f 	bl	8001598 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b00b      	add	sp, #44	@ 0x2c
 8000920:	bd90      	pop	{r4, r7, pc}
 8000922:	46c0      	nop			@ (mov r8, r8)
 8000924:	40013000 	.word	0x40013000
 8000928:	40021000 	.word	0x40021000
 800092c:	48000400 	.word	0x48000400

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000934:	46c0      	nop			@ (mov r8, r8)
 8000936:	e7fd      	b.n	8000934 <NMI_Handler+0x4>

08000938 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093c:	46c0      	nop			@ (mov r8, r8)
 800093e:	e7fd      	b.n	800093c <HardFault_Handler+0x4>

08000940 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000944:	46c0      	nop			@ (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000958:	f000 f87a 	bl	8000a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800095c:	46c0      	nop			@ (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000966:	46c0      	nop			@ (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800096c:	480d      	ldr	r0, [pc, #52]	@ (80009a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800096e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000970:	f7ff fff7 	bl	8000962 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000974:	480c      	ldr	r0, [pc, #48]	@ (80009a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000976:	490d      	ldr	r1, [pc, #52]	@ (80009ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000978:	4a0d      	ldr	r2, [pc, #52]	@ (80009b0 <LoopForever+0xe>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800097c:	e002      	b.n	8000984 <LoopCopyDataInit>

0800097e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000982:	3304      	adds	r3, #4

08000984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000988:	d3f9      	bcc.n	800097e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098a:	4a0a      	ldr	r2, [pc, #40]	@ (80009b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800098c:	4c0a      	ldr	r4, [pc, #40]	@ (80009b8 <LoopForever+0x16>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000990:	e001      	b.n	8000996 <LoopFillZerobss>

08000992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000994:	3204      	adds	r2, #4

08000996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000998:	d3fb      	bcc.n	8000992 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800099a:	f002 fb0b 	bl	8002fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800099e:	f7ff fc63 	bl	8000268 <main>

080009a2 <LoopForever>:

LoopForever:
    b LoopForever
 80009a2:	e7fe      	b.n	80009a2 <LoopForever>
  ldr   r0, =_estack
 80009a4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80009a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ac:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80009b0:	0800304c 	.word	0x0800304c
  ldr r2, =_sbss
 80009b4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80009b8:	200000dc 	.word	0x200000dc

080009bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009bc:	e7fe      	b.n	80009bc <ADC1_IRQHandler>
	...

080009c0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c4:	4b07      	ldr	r3, [pc, #28]	@ (80009e4 <HAL_Init+0x24>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <HAL_Init+0x24>)
 80009ca:	2110      	movs	r1, #16
 80009cc:	430a      	orrs	r2, r1
 80009ce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009d0:	2003      	movs	r0, #3
 80009d2:	f000 f809 	bl	80009e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d6:	f7ff fef3 	bl	80007c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009da:	2300      	movs	r3, #0
}
 80009dc:	0018      	movs	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			@ (mov r8, r8)
 80009e4:	40022000 	.word	0x40022000

080009e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f0:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <HAL_InitTick+0x5c>)
 80009f2:	681c      	ldr	r4, [r3, #0]
 80009f4:	4b14      	ldr	r3, [pc, #80]	@ (8000a48 <HAL_InitTick+0x60>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	0019      	movs	r1, r3
 80009fa:	23fa      	movs	r3, #250	@ 0xfa
 80009fc:	0098      	lsls	r0, r3, #2
 80009fe:	f7ff fb83 	bl	8000108 <__udivsi3>
 8000a02:	0003      	movs	r3, r0
 8000a04:	0019      	movs	r1, r3
 8000a06:	0020      	movs	r0, r4
 8000a08:	f7ff fb7e 	bl	8000108 <__udivsi3>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f000 fdb5 	bl	800157e <HAL_SYSTICK_Config>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e00f      	b.n	8000a3c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b03      	cmp	r3, #3
 8000a20:	d80b      	bhi.n	8000a3a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	2301      	movs	r3, #1
 8000a26:	425b      	negs	r3, r3
 8000a28:	2200      	movs	r2, #0
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f000 fd92 	bl	8001554 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <HAL_InitTick+0x64>)
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e000      	b.n	8000a3c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
}
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b003      	add	sp, #12
 8000a42:	bd90      	pop	{r4, r7, pc}
 8000a44:	20000008 	.word	0x20000008
 8000a48:	20000010 	.word	0x20000010
 8000a4c:	2000000c 	.word	0x2000000c

08000a50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a54:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <HAL_IncTick+0x1c>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	001a      	movs	r2, r3
 8000a5a:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <HAL_IncTick+0x20>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	18d2      	adds	r2, r2, r3
 8000a60:	4b03      	ldr	r3, [pc, #12]	@ (8000a70 <HAL_IncTick+0x20>)
 8000a62:	601a      	str	r2, [r3, #0]
}
 8000a64:	46c0      	nop			@ (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			@ (mov r8, r8)
 8000a6c:	20000010 	.word	0x20000010
 8000a70:	200000d8 	.word	0x200000d8

08000a74 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  return uwTick;
 8000a78:	4b02      	ldr	r3, [pc, #8]	@ (8000a84 <HAL_GetTick+0x10>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	200000d8 	.word	0x200000d8

08000a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a90:	f7ff fff0 	bl	8000a74 <HAL_GetTick>
 8000a94:	0003      	movs	r3, r0
 8000a96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	d005      	beq.n	8000aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8000acc <HAL_Delay+0x44>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	001a      	movs	r2, r3
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	189b      	adds	r3, r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	f7ff ffe0 	bl	8000a74 <HAL_GetTick>
 8000ab4:	0002      	movs	r2, r0
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d8f7      	bhi.n	8000ab0 <HAL_Delay+0x28>
  {
  }
}
 8000ac0:	46c0      	nop			@ (mov r8, r8)
 8000ac2:	46c0      	nop			@ (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b004      	add	sp, #16
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			@ (mov r8, r8)
 8000acc:	20000010 	.word	0x20000010

08000ad0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ad8:	230f      	movs	r3, #15
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d101      	bne.n	8000aee <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e125      	b.n	8000d3a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d10a      	bne.n	8000b0c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2200      	movs	r2, #0
 8000afa:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2234      	movs	r2, #52	@ 0x34
 8000b00:	2100      	movs	r1, #0
 8000b02:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	0018      	movs	r0, r3
 8000b08:	f7ff fe7e 	bl	8000808 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b10:	2210      	movs	r2, #16
 8000b12:	4013      	ands	r3, r2
 8000b14:	d000      	beq.n	8000b18 <HAL_ADC_Init+0x48>
 8000b16:	e103      	b.n	8000d20 <HAL_ADC_Init+0x250>
 8000b18:	230f      	movs	r3, #15
 8000b1a:	18fb      	adds	r3, r7, r3
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d000      	beq.n	8000b24 <HAL_ADC_Init+0x54>
 8000b22:	e0fd      	b.n	8000d20 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000b2e:	d000      	beq.n	8000b32 <HAL_ADC_Init+0x62>
 8000b30:	e0f6      	b.n	8000d20 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b36:	4a83      	ldr	r2, [pc, #524]	@ (8000d44 <HAL_ADC_Init+0x274>)
 8000b38:	4013      	ands	r3, r2
 8000b3a:	2202      	movs	r2, #2
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	2203      	movs	r2, #3
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d112      	bne.n	8000b76 <HAL_ADC_Init+0xa6>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2201      	movs	r2, #1
 8000b58:	4013      	ands	r3, r2
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d009      	beq.n	8000b72 <HAL_ADC_Init+0xa2>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	68da      	ldr	r2, [r3, #12]
 8000b64:	2380      	movs	r3, #128	@ 0x80
 8000b66:	021b      	lsls	r3, r3, #8
 8000b68:	401a      	ands	r2, r3
 8000b6a:	2380      	movs	r3, #128	@ 0x80
 8000b6c:	021b      	lsls	r3, r3, #8
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d101      	bne.n	8000b76 <HAL_ADC_Init+0xa6>
 8000b72:	2301      	movs	r3, #1
 8000b74:	e000      	b.n	8000b78 <HAL_ADC_Init+0xa8>
 8000b76:	2300      	movs	r3, #0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d116      	bne.n	8000baa <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	2218      	movs	r2, #24
 8000b84:	4393      	bics	r3, r2
 8000b86:	0019      	movs	r1, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	689a      	ldr	r2, [r3, #8]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	430a      	orrs	r2, r1
 8000b92:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	691b      	ldr	r3, [r3, #16]
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	0899      	lsrs	r1, r3, #2
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	68da      	ldr	r2, [r3, #12]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4964      	ldr	r1, [pc, #400]	@ (8000d48 <HAL_ADC_Init+0x278>)
 8000bb6:	400a      	ands	r2, r1
 8000bb8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	7e1b      	ldrb	r3, [r3, #24]
 8000bbe:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	7e5b      	ldrb	r3, [r3, #25]
 8000bc4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000bc6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	7e9b      	ldrb	r3, [r3, #26]
 8000bcc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000bce:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d002      	beq.n	8000bde <HAL_ADC_Init+0x10e>
 8000bd8:	2380      	movs	r3, #128	@ 0x80
 8000bda:	015b      	lsls	r3, r3, #5
 8000bdc:	e000      	b.n	8000be0 <HAL_ADC_Init+0x110>
 8000bde:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000be0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000be6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	691b      	ldr	r3, [r3, #16]
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d101      	bne.n	8000bf4 <HAL_ADC_Init+0x124>
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	e000      	b.n	8000bf6 <HAL_ADC_Init+0x126>
 8000bf4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000bf6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2124      	movs	r1, #36	@ 0x24
 8000bfc:	5c5b      	ldrb	r3, [r3, r1]
 8000bfe:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000c00:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	7edb      	ldrb	r3, [r3, #27]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d115      	bne.n	8000c3c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	7e9b      	ldrb	r3, [r3, #26]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d105      	bne.n	8000c24 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	2280      	movs	r2, #128	@ 0x80
 8000c1c:	0252      	lsls	r2, r2, #9
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	e00b      	b.n	8000c3c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c28:	2220      	movs	r2, #32
 8000c2a:	431a      	orrs	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c34:	2201      	movs	r2, #1
 8000c36:	431a      	orrs	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69da      	ldr	r2, [r3, #28]
 8000c40:	23c2      	movs	r3, #194	@ 0xc2
 8000c42:	33ff      	adds	r3, #255	@ 0xff
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d007      	beq.n	8000c58 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000c50:	4313      	orrs	r3, r2
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	68d9      	ldr	r1, [r3, #12]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	430a      	orrs	r2, r1
 8000c66:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c6c:	2380      	movs	r3, #128	@ 0x80
 8000c6e:	055b      	lsls	r3, r3, #21
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d01b      	beq.n	8000cac <HAL_ADC_Init+0x1dc>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d017      	beq.n	8000cac <HAL_ADC_Init+0x1dc>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d013      	beq.n	8000cac <HAL_ADC_Init+0x1dc>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	d00f      	beq.n	8000cac <HAL_ADC_Init+0x1dc>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c90:	2b04      	cmp	r3, #4
 8000c92:	d00b      	beq.n	8000cac <HAL_ADC_Init+0x1dc>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c98:	2b05      	cmp	r3, #5
 8000c9a:	d007      	beq.n	8000cac <HAL_ADC_Init+0x1dc>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ca0:	2b06      	cmp	r3, #6
 8000ca2:	d003      	beq.n	8000cac <HAL_ADC_Init+0x1dc>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ca8:	2b07      	cmp	r3, #7
 8000caa:	d112      	bne.n	8000cd2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	695a      	ldr	r2, [r3, #20]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2107      	movs	r1, #7
 8000cb8:	438a      	bics	r2, r1
 8000cba:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	6959      	ldr	r1, [r3, #20]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cc6:	2207      	movs	r2, #7
 8000cc8:	401a      	ands	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	4a1c      	ldr	r2, [pc, #112]	@ (8000d4c <HAL_ADC_Init+0x27c>)
 8000cda:	4013      	ands	r3, r2
 8000cdc:	68ba      	ldr	r2, [r7, #8]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d10b      	bne.n	8000cfa <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cec:	2203      	movs	r2, #3
 8000cee:	4393      	bics	r3, r2
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	431a      	orrs	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000cf8:	e01c      	b.n	8000d34 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cfe:	2212      	movs	r2, #18
 8000d00:	4393      	bics	r3, r2
 8000d02:	2210      	movs	r2, #16
 8000d04:	431a      	orrs	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d0e:	2201      	movs	r2, #1
 8000d10:	431a      	orrs	r2, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000d16:	230f      	movs	r3, #15
 8000d18:	18fb      	adds	r3, r7, r3
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d1e:	e009      	b.n	8000d34 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d24:	2210      	movs	r2, #16
 8000d26:	431a      	orrs	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000d2c:	230f      	movs	r3, #15
 8000d2e:	18fb      	adds	r3, r7, r3
 8000d30:	2201      	movs	r2, #1
 8000d32:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d34:	230f      	movs	r3, #15
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	781b      	ldrb	r3, [r3, #0]
}
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b004      	add	sp, #16
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			@ (mov r8, r8)
 8000d44:	fffffefd 	.word	0xfffffefd
 8000d48:	fffe0219 	.word	0xfffe0219
 8000d4c:	833fffe7 	.word	0x833fffe7

08000d50 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d58:	230f      	movs	r3, #15
 8000d5a:	18fb      	adds	r3, r7, r3
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	2204      	movs	r2, #4
 8000d68:	4013      	ands	r3, r2
 8000d6a:	d138      	bne.n	8000dde <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2234      	movs	r2, #52	@ 0x34
 8000d70:	5c9b      	ldrb	r3, [r3, r2]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d101      	bne.n	8000d7a <HAL_ADC_Start+0x2a>
 8000d76:	2302      	movs	r3, #2
 8000d78:	e038      	b.n	8000dec <HAL_ADC_Start+0x9c>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2234      	movs	r2, #52	@ 0x34
 8000d7e:	2101      	movs	r1, #1
 8000d80:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	7e5b      	ldrb	r3, [r3, #25]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d007      	beq.n	8000d9a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000d8a:	230f      	movs	r3, #15
 8000d8c:	18fc      	adds	r4, r7, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	0018      	movs	r0, r3
 8000d92:	f000 fa0b 	bl	80011ac <ADC_Enable>
 8000d96:	0003      	movs	r3, r0
 8000d98:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000d9a:	230f      	movs	r3, #15
 8000d9c:	18fb      	adds	r3, r7, r3
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d120      	bne.n	8000de6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000da8:	4a12      	ldr	r2, [pc, #72]	@ (8000df4 <HAL_ADC_Start+0xa4>)
 8000daa:	4013      	ands	r3, r2
 8000dac:	2280      	movs	r2, #128	@ 0x80
 8000dae:	0052      	lsls	r2, r2, #1
 8000db0:	431a      	orrs	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2234      	movs	r2, #52	@ 0x34
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	221c      	movs	r2, #28
 8000dca:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	689a      	ldr	r2, [r3, #8]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2104      	movs	r1, #4
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	e003      	b.n	8000de6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000dde:	230f      	movs	r3, #15
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	2202      	movs	r2, #2
 8000de4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000de6:	230f      	movs	r3, #15
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	781b      	ldrb	r3, [r3, #0]
}
 8000dec:	0018      	movs	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b005      	add	sp, #20
 8000df2:	bd90      	pop	{r4, r7, pc}
 8000df4:	fffff0fe 	.word	0xfffff0fe

08000df8 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8000df8:	b5b0      	push	{r4, r5, r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e00:	230f      	movs	r3, #15
 8000e02:	18fb      	adds	r3, r7, r3
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2234      	movs	r2, #52	@ 0x34
 8000e0c:	5c9b      	ldrb	r3, [r3, r2]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d101      	bne.n	8000e16 <HAL_ADC_Stop+0x1e>
 8000e12:	2302      	movs	r3, #2
 8000e14:	e029      	b.n	8000e6a <HAL_ADC_Stop+0x72>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2234      	movs	r2, #52	@ 0x34
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000e1e:	250f      	movs	r5, #15
 8000e20:	197c      	adds	r4, r7, r5
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	0018      	movs	r0, r3
 8000e26:	f000 fab6 	bl	8001396 <ADC_ConversionStop>
 8000e2a:	0003      	movs	r3, r0
 8000e2c:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000e2e:	197b      	adds	r3, r7, r5
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d112      	bne.n	8000e5c <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000e36:	197c      	adds	r4, r7, r5
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f000 fa3a 	bl	80012b4 <ADC_Disable>
 8000e40:	0003      	movs	r3, r0
 8000e42:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000e44:	197b      	adds	r3, r7, r5
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d107      	bne.n	8000e5c <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e50:	4a08      	ldr	r2, [pc, #32]	@ (8000e74 <HAL_ADC_Stop+0x7c>)
 8000e52:	4013      	ands	r3, r2
 8000e54:	2201      	movs	r2, #1
 8000e56:	431a      	orrs	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2234      	movs	r2, #52	@ 0x34
 8000e60:	2100      	movs	r1, #0
 8000e62:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000e64:	230f      	movs	r3, #15
 8000e66:	18fb      	adds	r3, r7, r3
 8000e68:	781b      	ldrb	r3, [r3, #0]
}
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b004      	add	sp, #16
 8000e70:	bdb0      	pop	{r4, r5, r7, pc}
 8000e72:	46c0      	nop			@ (mov r8, r8)
 8000e74:	fffffefe 	.word	0xfffffefe

08000e78 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	2b08      	cmp	r3, #8
 8000e88:	d102      	bne.n	8000e90 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000e8a:	2308      	movs	r3, #8
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	e014      	b.n	8000eba <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	2201      	movs	r2, #1
 8000e98:	4013      	ands	r3, r2
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d10b      	bne.n	8000eb6 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ea2:	2220      	movs	r2, #32
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2234      	movs	r2, #52	@ 0x34
 8000eae:	2100      	movs	r1, #0
 8000eb0:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e071      	b.n	8000f9a <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000eb6:	230c      	movs	r3, #12
 8000eb8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000eba:	f7ff fddb 	bl	8000a74 <HAL_GetTick>
 8000ebe:	0003      	movs	r3, r0
 8000ec0:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000ec2:	e01f      	b.n	8000f04 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	d01c      	beq.n	8000f04 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d007      	beq.n	8000ee0 <HAL_ADC_PollForConversion+0x68>
 8000ed0:	f7ff fdd0 	bl	8000a74 <HAL_GetTick>
 8000ed4:	0002      	movs	r2, r0
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	683a      	ldr	r2, [r7, #0]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d211      	bcs.n	8000f04 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d10b      	bne.n	8000f04 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2234      	movs	r2, #52	@ 0x34
 8000efc:	2100      	movs	r1, #0
 8000efe:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e04a      	b.n	8000f9a <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	d0d9      	beq.n	8000ec4 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f14:	2280      	movs	r2, #128	@ 0x80
 8000f16:	0092      	lsls	r2, r2, #2
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68da      	ldr	r2, [r3, #12]
 8000f24:	23c0      	movs	r3, #192	@ 0xc0
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	4013      	ands	r3, r2
 8000f2a:	d12d      	bne.n	8000f88 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d129      	bne.n	8000f88 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2208      	movs	r2, #8
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	2b08      	cmp	r3, #8
 8000f40:	d122      	bne.n	8000f88 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	2204      	movs	r2, #4
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	d110      	bne.n	8000f70 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	210c      	movs	r1, #12
 8000f5a:	438a      	bics	r2, r1
 8000f5c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f62:	4a10      	ldr	r2, [pc, #64]	@ (8000fa4 <HAL_ADC_PollForConversion+0x12c>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	2201      	movs	r2, #1
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f6e:	e00b      	b.n	8000f88 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f74:	2220      	movs	r2, #32
 8000f76:	431a      	orrs	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f80:	2201      	movs	r2, #1
 8000f82:	431a      	orrs	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	7e1b      	ldrb	r3, [r3, #24]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d103      	bne.n	8000f98 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	220c      	movs	r2, #12
 8000f96:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b004      	add	sp, #16
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			@ (mov r8, r8)
 8000fa4:	fffffefe 	.word	0xfffffefe

08000fa8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b002      	add	sp, #8
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fca:	230f      	movs	r3, #15
 8000fcc:	18fb      	adds	r3, r7, r3
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fda:	2380      	movs	r3, #128	@ 0x80
 8000fdc:	055b      	lsls	r3, r3, #21
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d011      	beq.n	8001006 <HAL_ADC_ConfigChannel+0x46>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d00d      	beq.n	8001006 <HAL_ADC_ConfigChannel+0x46>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d009      	beq.n	8001006 <HAL_ADC_ConfigChannel+0x46>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d005      	beq.n	8001006 <HAL_ADC_ConfigChannel+0x46>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	d001      	beq.n	8001006 <HAL_ADC_ConfigChannel+0x46>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2234      	movs	r2, #52	@ 0x34
 800100a:	5c9b      	ldrb	r3, [r3, r2]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d101      	bne.n	8001014 <HAL_ADC_ConfigChannel+0x54>
 8001010:	2302      	movs	r3, #2
 8001012:	e0bb      	b.n	800118c <HAL_ADC_ConfigChannel+0x1cc>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2234      	movs	r2, #52	@ 0x34
 8001018:	2101      	movs	r1, #1
 800101a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	2204      	movs	r2, #4
 8001024:	4013      	ands	r3, r2
 8001026:	d000      	beq.n	800102a <HAL_ADC_ConfigChannel+0x6a>
 8001028:	e09f      	b.n	800116a <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	4a59      	ldr	r2, [pc, #356]	@ (8001194 <HAL_ADC_ConfigChannel+0x1d4>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d100      	bne.n	8001036 <HAL_ADC_ConfigChannel+0x76>
 8001034:	e077      	b.n	8001126 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2201      	movs	r2, #1
 8001042:	409a      	lsls	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	430a      	orrs	r2, r1
 800104a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001050:	2380      	movs	r3, #128	@ 0x80
 8001052:	055b      	lsls	r3, r3, #21
 8001054:	429a      	cmp	r2, r3
 8001056:	d037      	beq.n	80010c8 <HAL_ADC_ConfigChannel+0x108>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800105c:	2b01      	cmp	r3, #1
 800105e:	d033      	beq.n	80010c8 <HAL_ADC_ConfigChannel+0x108>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001064:	2b02      	cmp	r3, #2
 8001066:	d02f      	beq.n	80010c8 <HAL_ADC_ConfigChannel+0x108>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800106c:	2b03      	cmp	r3, #3
 800106e:	d02b      	beq.n	80010c8 <HAL_ADC_ConfigChannel+0x108>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001074:	2b04      	cmp	r3, #4
 8001076:	d027      	beq.n	80010c8 <HAL_ADC_ConfigChannel+0x108>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800107c:	2b05      	cmp	r3, #5
 800107e:	d023      	beq.n	80010c8 <HAL_ADC_ConfigChannel+0x108>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001084:	2b06      	cmp	r3, #6
 8001086:	d01f      	beq.n	80010c8 <HAL_ADC_ConfigChannel+0x108>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800108c:	2b07      	cmp	r3, #7
 800108e:	d01b      	beq.n	80010c8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	2107      	movs	r1, #7
 800109c:	400b      	ands	r3, r1
 800109e:	429a      	cmp	r2, r3
 80010a0:	d012      	beq.n	80010c8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	695a      	ldr	r2, [r3, #20]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2107      	movs	r1, #7
 80010ae:	438a      	bics	r2, r1
 80010b0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6959      	ldr	r1, [r3, #20]
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	2207      	movs	r2, #7
 80010be:	401a      	ands	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	430a      	orrs	r2, r1
 80010c6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b10      	cmp	r3, #16
 80010ce:	d003      	beq.n	80010d8 <HAL_ADC_ConfigChannel+0x118>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b11      	cmp	r3, #17
 80010d6:	d152      	bne.n	800117e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80010d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001198 <HAL_ADC_ConfigChannel+0x1d8>)
 80010da:	6819      	ldr	r1, [r3, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b10      	cmp	r3, #16
 80010e2:	d102      	bne.n	80010ea <HAL_ADC_ConfigChannel+0x12a>
 80010e4:	2380      	movs	r3, #128	@ 0x80
 80010e6:	041b      	lsls	r3, r3, #16
 80010e8:	e001      	b.n	80010ee <HAL_ADC_ConfigChannel+0x12e>
 80010ea:	2380      	movs	r3, #128	@ 0x80
 80010ec:	03db      	lsls	r3, r3, #15
 80010ee:	4a2a      	ldr	r2, [pc, #168]	@ (8001198 <HAL_ADC_ConfigChannel+0x1d8>)
 80010f0:	430b      	orrs	r3, r1
 80010f2:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b10      	cmp	r3, #16
 80010fa:	d140      	bne.n	800117e <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010fc:	4b27      	ldr	r3, [pc, #156]	@ (800119c <HAL_ADC_ConfigChannel+0x1dc>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4927      	ldr	r1, [pc, #156]	@ (80011a0 <HAL_ADC_ConfigChannel+0x1e0>)
 8001102:	0018      	movs	r0, r3
 8001104:	f7ff f800 	bl	8000108 <__udivsi3>
 8001108:	0003      	movs	r3, r0
 800110a:	001a      	movs	r2, r3
 800110c:	0013      	movs	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	189b      	adds	r3, r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001116:	e002      	b.n	800111e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	3b01      	subs	r3, #1
 800111c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f9      	bne.n	8001118 <HAL_ADC_ConfigChannel+0x158>
 8001124:	e02b      	b.n	800117e <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2101      	movs	r1, #1
 8001132:	4099      	lsls	r1, r3
 8001134:	000b      	movs	r3, r1
 8001136:	43d9      	mvns	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	400a      	ands	r2, r1
 800113e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b10      	cmp	r3, #16
 8001146:	d003      	beq.n	8001150 <HAL_ADC_ConfigChannel+0x190>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b11      	cmp	r3, #17
 800114e:	d116      	bne.n	800117e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001150:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <HAL_ADC_ConfigChannel+0x1d8>)
 8001152:	6819      	ldr	r1, [r3, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b10      	cmp	r3, #16
 800115a:	d101      	bne.n	8001160 <HAL_ADC_ConfigChannel+0x1a0>
 800115c:	4a11      	ldr	r2, [pc, #68]	@ (80011a4 <HAL_ADC_ConfigChannel+0x1e4>)
 800115e:	e000      	b.n	8001162 <HAL_ADC_ConfigChannel+0x1a2>
 8001160:	4a11      	ldr	r2, [pc, #68]	@ (80011a8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001162:	4b0d      	ldr	r3, [pc, #52]	@ (8001198 <HAL_ADC_ConfigChannel+0x1d8>)
 8001164:	400a      	ands	r2, r1
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	e009      	b.n	800117e <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800116e:	2220      	movs	r2, #32
 8001170:	431a      	orrs	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001176:	230f      	movs	r3, #15
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2234      	movs	r2, #52	@ 0x34
 8001182:	2100      	movs	r1, #0
 8001184:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001186:	230f      	movs	r3, #15
 8001188:	18fb      	adds	r3, r7, r3
 800118a:	781b      	ldrb	r3, [r3, #0]
}
 800118c:	0018      	movs	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	b004      	add	sp, #16
 8001192:	bd80      	pop	{r7, pc}
 8001194:	00001001 	.word	0x00001001
 8001198:	40012708 	.word	0x40012708
 800119c:	20000008 	.word	0x20000008
 80011a0:	000f4240 	.word	0x000f4240
 80011a4:	ff7fffff 	.word	0xff7fffff
 80011a8:	ffbfffff 	.word	0xffbfffff

080011ac <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	2203      	movs	r2, #3
 80011c4:	4013      	ands	r3, r2
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d112      	bne.n	80011f0 <ADC_Enable+0x44>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2201      	movs	r2, #1
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d009      	beq.n	80011ec <ADC_Enable+0x40>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	2380      	movs	r3, #128	@ 0x80
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	401a      	ands	r2, r3
 80011e4:	2380      	movs	r3, #128	@ 0x80
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d101      	bne.n	80011f0 <ADC_Enable+0x44>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e000      	b.n	80011f2 <ADC_Enable+0x46>
 80011f0:	2300      	movs	r3, #0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d152      	bne.n	800129c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	4a2a      	ldr	r2, [pc, #168]	@ (80012a8 <ADC_Enable+0xfc>)
 80011fe:	4013      	ands	r3, r2
 8001200:	d00d      	beq.n	800121e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001206:	2210      	movs	r2, #16
 8001208:	431a      	orrs	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001212:	2201      	movs	r2, #1
 8001214:	431a      	orrs	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e03f      	b.n	800129e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2101      	movs	r1, #1
 800122a:	430a      	orrs	r2, r1
 800122c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800122e:	4b1f      	ldr	r3, [pc, #124]	@ (80012ac <ADC_Enable+0x100>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	491f      	ldr	r1, [pc, #124]	@ (80012b0 <ADC_Enable+0x104>)
 8001234:	0018      	movs	r0, r3
 8001236:	f7fe ff67 	bl	8000108 <__udivsi3>
 800123a:	0003      	movs	r3, r0
 800123c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800123e:	e002      	b.n	8001246 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	3b01      	subs	r3, #1
 8001244:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1f9      	bne.n	8001240 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800124c:	f7ff fc12 	bl	8000a74 <HAL_GetTick>
 8001250:	0003      	movs	r3, r0
 8001252:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001254:	e01b      	b.n	800128e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001256:	f7ff fc0d 	bl	8000a74 <HAL_GetTick>
 800125a:	0002      	movs	r2, r0
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d914      	bls.n	800128e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2201      	movs	r2, #1
 800126c:	4013      	ands	r3, r2
 800126e:	2b01      	cmp	r3, #1
 8001270:	d00d      	beq.n	800128e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001276:	2210      	movs	r2, #16
 8001278:	431a      	orrs	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001282:	2201      	movs	r2, #1
 8001284:	431a      	orrs	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e007      	b.n	800129e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2201      	movs	r2, #1
 8001296:	4013      	ands	r3, r2
 8001298:	2b01      	cmp	r3, #1
 800129a:	d1dc      	bne.n	8001256 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	0018      	movs	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b004      	add	sp, #16
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	46c0      	nop			@ (mov r8, r8)
 80012a8:	80000017 	.word	0x80000017
 80012ac:	20000008 	.word	0x20000008
 80012b0:	000f4240 	.word	0x000f4240

080012b4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	2203      	movs	r2, #3
 80012c8:	4013      	ands	r3, r2
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d112      	bne.n	80012f4 <ADC_Disable+0x40>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2201      	movs	r2, #1
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d009      	beq.n	80012f0 <ADC_Disable+0x3c>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68da      	ldr	r2, [r3, #12]
 80012e2:	2380      	movs	r3, #128	@ 0x80
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	401a      	ands	r2, r3
 80012e8:	2380      	movs	r3, #128	@ 0x80
 80012ea:	021b      	lsls	r3, r3, #8
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d101      	bne.n	80012f4 <ADC_Disable+0x40>
 80012f0:	2301      	movs	r3, #1
 80012f2:	e000      	b.n	80012f6 <ADC_Disable+0x42>
 80012f4:	2300      	movs	r3, #0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d048      	beq.n	800138c <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2205      	movs	r2, #5
 8001302:	4013      	ands	r3, r2
 8001304:	2b01      	cmp	r3, #1
 8001306:	d110      	bne.n	800132a <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2102      	movs	r1, #2
 8001314:	430a      	orrs	r2, r1
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2203      	movs	r2, #3
 800131e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001320:	f7ff fba8 	bl	8000a74 <HAL_GetTick>
 8001324:	0003      	movs	r3, r0
 8001326:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001328:	e029      	b.n	800137e <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800132e:	2210      	movs	r2, #16
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	639a      	str	r2, [r3, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800133a:	2201      	movs	r2, #1
 800133c:	431a      	orrs	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	63da      	str	r2, [r3, #60]	@ 0x3c
      return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e023      	b.n	800138e <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001346:	f7ff fb95 	bl	8000a74 <HAL_GetTick>
 800134a:	0002      	movs	r2, r0
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d914      	bls.n	800137e <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2201      	movs	r2, #1
 800135c:	4013      	ands	r3, r2
 800135e:	2b01      	cmp	r3, #1
 8001360:	d10d      	bne.n	800137e <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001366:	2210      	movs	r2, #16
 8001368:	431a      	orrs	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001372:	2201      	movs	r2, #1
 8001374:	431a      	orrs	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e007      	b.n	800138e <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2201      	movs	r2, #1
 8001386:	4013      	ands	r3, r2
 8001388:	2b01      	cmp	r3, #1
 800138a:	d0dc      	beq.n	8001346 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	0018      	movs	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	b004      	add	sp, #16
 8001394:	bd80      	pop	{r7, pc}

08001396 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b084      	sub	sp, #16
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	2204      	movs	r2, #4
 80013aa:	4013      	ands	r3, r2
 80013ac:	d03a      	beq.n	8001424 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	2204      	movs	r2, #4
 80013b6:	4013      	ands	r3, r2
 80013b8:	2b04      	cmp	r3, #4
 80013ba:	d10d      	bne.n	80013d8 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	2202      	movs	r2, #2
 80013c4:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80013c6:	d107      	bne.n	80013d8 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2110      	movs	r1, #16
 80013d4:	430a      	orrs	r2, r1
 80013d6:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013d8:	f7ff fb4c 	bl	8000a74 <HAL_GetTick>
 80013dc:	0003      	movs	r3, r0
 80013de:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80013e0:	e01a      	b.n	8001418 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80013e2:	f7ff fb47 	bl	8000a74 <HAL_GetTick>
 80013e6:	0002      	movs	r2, r0
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d913      	bls.n	8001418 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2204      	movs	r2, #4
 80013f8:	4013      	ands	r3, r2
 80013fa:	d00d      	beq.n	8001418 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001400:	2210      	movs	r2, #16
 8001402:	431a      	orrs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800140c:	2201      	movs	r2, #1
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e006      	b.n	8001426 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2204      	movs	r2, #4
 8001420:	4013      	ands	r3, r2
 8001422:	d1de      	bne.n	80013e2 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	0018      	movs	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	b004      	add	sp, #16
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	0002      	movs	r2, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	1dfb      	adds	r3, r7, #7
 800143c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800143e:	1dfb      	adds	r3, r7, #7
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b7f      	cmp	r3, #127	@ 0x7f
 8001444:	d828      	bhi.n	8001498 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001446:	4a2f      	ldr	r2, [pc, #188]	@ (8001504 <__NVIC_SetPriority+0xd4>)
 8001448:	1dfb      	adds	r3, r7, #7
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b25b      	sxtb	r3, r3
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	33c0      	adds	r3, #192	@ 0xc0
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	589b      	ldr	r3, [r3, r2]
 8001456:	1dfa      	adds	r2, r7, #7
 8001458:	7812      	ldrb	r2, [r2, #0]
 800145a:	0011      	movs	r1, r2
 800145c:	2203      	movs	r2, #3
 800145e:	400a      	ands	r2, r1
 8001460:	00d2      	lsls	r2, r2, #3
 8001462:	21ff      	movs	r1, #255	@ 0xff
 8001464:	4091      	lsls	r1, r2
 8001466:	000a      	movs	r2, r1
 8001468:	43d2      	mvns	r2, r2
 800146a:	401a      	ands	r2, r3
 800146c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	019b      	lsls	r3, r3, #6
 8001472:	22ff      	movs	r2, #255	@ 0xff
 8001474:	401a      	ands	r2, r3
 8001476:	1dfb      	adds	r3, r7, #7
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	0018      	movs	r0, r3
 800147c:	2303      	movs	r3, #3
 800147e:	4003      	ands	r3, r0
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001484:	481f      	ldr	r0, [pc, #124]	@ (8001504 <__NVIC_SetPriority+0xd4>)
 8001486:	1dfb      	adds	r3, r7, #7
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b25b      	sxtb	r3, r3
 800148c:	089b      	lsrs	r3, r3, #2
 800148e:	430a      	orrs	r2, r1
 8001490:	33c0      	adds	r3, #192	@ 0xc0
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001496:	e031      	b.n	80014fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001498:	4a1b      	ldr	r2, [pc, #108]	@ (8001508 <__NVIC_SetPriority+0xd8>)
 800149a:	1dfb      	adds	r3, r7, #7
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	0019      	movs	r1, r3
 80014a0:	230f      	movs	r3, #15
 80014a2:	400b      	ands	r3, r1
 80014a4:	3b08      	subs	r3, #8
 80014a6:	089b      	lsrs	r3, r3, #2
 80014a8:	3306      	adds	r3, #6
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	18d3      	adds	r3, r2, r3
 80014ae:	3304      	adds	r3, #4
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	1dfa      	adds	r2, r7, #7
 80014b4:	7812      	ldrb	r2, [r2, #0]
 80014b6:	0011      	movs	r1, r2
 80014b8:	2203      	movs	r2, #3
 80014ba:	400a      	ands	r2, r1
 80014bc:	00d2      	lsls	r2, r2, #3
 80014be:	21ff      	movs	r1, #255	@ 0xff
 80014c0:	4091      	lsls	r1, r2
 80014c2:	000a      	movs	r2, r1
 80014c4:	43d2      	mvns	r2, r2
 80014c6:	401a      	ands	r2, r3
 80014c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	019b      	lsls	r3, r3, #6
 80014ce:	22ff      	movs	r2, #255	@ 0xff
 80014d0:	401a      	ands	r2, r3
 80014d2:	1dfb      	adds	r3, r7, #7
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	0018      	movs	r0, r3
 80014d8:	2303      	movs	r3, #3
 80014da:	4003      	ands	r3, r0
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014e0:	4809      	ldr	r0, [pc, #36]	@ (8001508 <__NVIC_SetPriority+0xd8>)
 80014e2:	1dfb      	adds	r3, r7, #7
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	001c      	movs	r4, r3
 80014e8:	230f      	movs	r3, #15
 80014ea:	4023      	ands	r3, r4
 80014ec:	3b08      	subs	r3, #8
 80014ee:	089b      	lsrs	r3, r3, #2
 80014f0:	430a      	orrs	r2, r1
 80014f2:	3306      	adds	r3, #6
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	18c3      	adds	r3, r0, r3
 80014f8:	3304      	adds	r3, #4
 80014fa:	601a      	str	r2, [r3, #0]
}
 80014fc:	46c0      	nop			@ (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	b003      	add	sp, #12
 8001502:	bd90      	pop	{r4, r7, pc}
 8001504:	e000e100 	.word	0xe000e100
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	1e5a      	subs	r2, r3, #1
 8001518:	2380      	movs	r3, #128	@ 0x80
 800151a:	045b      	lsls	r3, r3, #17
 800151c:	429a      	cmp	r2, r3
 800151e:	d301      	bcc.n	8001524 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001520:	2301      	movs	r3, #1
 8001522:	e010      	b.n	8001546 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001524:	4b0a      	ldr	r3, [pc, #40]	@ (8001550 <SysTick_Config+0x44>)
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	3a01      	subs	r2, #1
 800152a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152c:	2301      	movs	r3, #1
 800152e:	425b      	negs	r3, r3
 8001530:	2103      	movs	r1, #3
 8001532:	0018      	movs	r0, r3
 8001534:	f7ff ff7c 	bl	8001430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001538:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <SysTick_Config+0x44>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153e:	4b04      	ldr	r3, [pc, #16]	@ (8001550 <SysTick_Config+0x44>)
 8001540:	2207      	movs	r2, #7
 8001542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001544:	2300      	movs	r3, #0
}
 8001546:	0018      	movs	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	b002      	add	sp, #8
 800154c:	bd80      	pop	{r7, pc}
 800154e:	46c0      	nop			@ (mov r8, r8)
 8001550:	e000e010 	.word	0xe000e010

08001554 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	210f      	movs	r1, #15
 8001560:	187b      	adds	r3, r7, r1
 8001562:	1c02      	adds	r2, r0, #0
 8001564:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	187b      	adds	r3, r7, r1
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	b25b      	sxtb	r3, r3
 800156e:	0011      	movs	r1, r2
 8001570:	0018      	movs	r0, r3
 8001572:	f7ff ff5d 	bl	8001430 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001576:	46c0      	nop			@ (mov r8, r8)
 8001578:	46bd      	mov	sp, r7
 800157a:	b004      	add	sp, #16
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	0018      	movs	r0, r3
 800158a:	f7ff ffbf 	bl	800150c <SysTick_Config>
 800158e:	0003      	movs	r3, r0
}
 8001590:	0018      	movs	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	b002      	add	sp, #8
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a6:	e14f      	b.n	8001848 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2101      	movs	r1, #1
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	4091      	lsls	r1, r2
 80015b2:	000a      	movs	r2, r1
 80015b4:	4013      	ands	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d100      	bne.n	80015c0 <HAL_GPIO_Init+0x28>
 80015be:	e140      	b.n	8001842 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2203      	movs	r2, #3
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d005      	beq.n	80015d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2203      	movs	r2, #3
 80015d2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d130      	bne.n	800163a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	2203      	movs	r2, #3
 80015e4:	409a      	lsls	r2, r3
 80015e6:	0013      	movs	r3, r2
 80015e8:	43da      	mvns	r2, r3
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	409a      	lsls	r2, r3
 80015fa:	0013      	movs	r3, r2
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800160e:	2201      	movs	r2, #1
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
 8001614:	0013      	movs	r3, r2
 8001616:	43da      	mvns	r2, r3
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	2201      	movs	r2, #1
 8001626:	401a      	ands	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	409a      	lsls	r2, r3
 800162c:	0013      	movs	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2203      	movs	r2, #3
 8001640:	4013      	ands	r3, r2
 8001642:	2b03      	cmp	r3, #3
 8001644:	d017      	beq.n	8001676 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	2203      	movs	r2, #3
 8001652:	409a      	lsls	r2, r3
 8001654:	0013      	movs	r3, r2
 8001656:	43da      	mvns	r2, r3
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	409a      	lsls	r2, r3
 8001668:	0013      	movs	r3, r2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2203      	movs	r2, #3
 800167c:	4013      	ands	r3, r2
 800167e:	2b02      	cmp	r3, #2
 8001680:	d123      	bne.n	80016ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	08da      	lsrs	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3208      	adds	r2, #8
 800168a:	0092      	lsls	r2, r2, #2
 800168c:	58d3      	ldr	r3, [r2, r3]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2207      	movs	r2, #7
 8001694:	4013      	ands	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	220f      	movs	r2, #15
 800169a:	409a      	lsls	r2, r3
 800169c:	0013      	movs	r3, r2
 800169e:	43da      	mvns	r2, r3
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	2107      	movs	r1, #7
 80016ae:	400b      	ands	r3, r1
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	409a      	lsls	r2, r3
 80016b4:	0013      	movs	r3, r2
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	08da      	lsrs	r2, r3, #3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3208      	adds	r2, #8
 80016c4:	0092      	lsls	r2, r2, #2
 80016c6:	6939      	ldr	r1, [r7, #16]
 80016c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	2203      	movs	r2, #3
 80016d6:	409a      	lsls	r2, r3
 80016d8:	0013      	movs	r3, r2
 80016da:	43da      	mvns	r2, r3
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2203      	movs	r2, #3
 80016e8:	401a      	ands	r2, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	409a      	lsls	r2, r3
 80016f0:	0013      	movs	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	23c0      	movs	r3, #192	@ 0xc0
 8001704:	029b      	lsls	r3, r3, #10
 8001706:	4013      	ands	r3, r2
 8001708:	d100      	bne.n	800170c <HAL_GPIO_Init+0x174>
 800170a:	e09a      	b.n	8001842 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170c:	4b54      	ldr	r3, [pc, #336]	@ (8001860 <HAL_GPIO_Init+0x2c8>)
 800170e:	699a      	ldr	r2, [r3, #24]
 8001710:	4b53      	ldr	r3, [pc, #332]	@ (8001860 <HAL_GPIO_Init+0x2c8>)
 8001712:	2101      	movs	r1, #1
 8001714:	430a      	orrs	r2, r1
 8001716:	619a      	str	r2, [r3, #24]
 8001718:	4b51      	ldr	r3, [pc, #324]	@ (8001860 <HAL_GPIO_Init+0x2c8>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	2201      	movs	r2, #1
 800171e:	4013      	ands	r3, r2
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001724:	4a4f      	ldr	r2, [pc, #316]	@ (8001864 <HAL_GPIO_Init+0x2cc>)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	089b      	lsrs	r3, r3, #2
 800172a:	3302      	adds	r3, #2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	589b      	ldr	r3, [r3, r2]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	2203      	movs	r2, #3
 8001736:	4013      	ands	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	220f      	movs	r2, #15
 800173c:	409a      	lsls	r2, r3
 800173e:	0013      	movs	r3, r2
 8001740:	43da      	mvns	r2, r3
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	2390      	movs	r3, #144	@ 0x90
 800174c:	05db      	lsls	r3, r3, #23
 800174e:	429a      	cmp	r2, r3
 8001750:	d013      	beq.n	800177a <HAL_GPIO_Init+0x1e2>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a44      	ldr	r2, [pc, #272]	@ (8001868 <HAL_GPIO_Init+0x2d0>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d00d      	beq.n	8001776 <HAL_GPIO_Init+0x1de>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a43      	ldr	r2, [pc, #268]	@ (800186c <HAL_GPIO_Init+0x2d4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d007      	beq.n	8001772 <HAL_GPIO_Init+0x1da>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a42      	ldr	r2, [pc, #264]	@ (8001870 <HAL_GPIO_Init+0x2d8>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d101      	bne.n	800176e <HAL_GPIO_Init+0x1d6>
 800176a:	2303      	movs	r3, #3
 800176c:	e006      	b.n	800177c <HAL_GPIO_Init+0x1e4>
 800176e:	2305      	movs	r3, #5
 8001770:	e004      	b.n	800177c <HAL_GPIO_Init+0x1e4>
 8001772:	2302      	movs	r3, #2
 8001774:	e002      	b.n	800177c <HAL_GPIO_Init+0x1e4>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <HAL_GPIO_Init+0x1e4>
 800177a:	2300      	movs	r3, #0
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	2103      	movs	r1, #3
 8001780:	400a      	ands	r2, r1
 8001782:	0092      	lsls	r2, r2, #2
 8001784:	4093      	lsls	r3, r2
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800178c:	4935      	ldr	r1, [pc, #212]	@ (8001864 <HAL_GPIO_Init+0x2cc>)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	089b      	lsrs	r3, r3, #2
 8001792:	3302      	adds	r3, #2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800179a:	4b36      	ldr	r3, [pc, #216]	@ (8001874 <HAL_GPIO_Init+0x2dc>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	43da      	mvns	r2, r3
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4013      	ands	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	2380      	movs	r3, #128	@ 0x80
 80017b0:	035b      	lsls	r3, r3, #13
 80017b2:	4013      	ands	r3, r2
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017be:	4b2d      	ldr	r3, [pc, #180]	@ (8001874 <HAL_GPIO_Init+0x2dc>)
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80017c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001874 <HAL_GPIO_Init+0x2dc>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	43da      	mvns	r2, r3
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4013      	ands	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	2380      	movs	r3, #128	@ 0x80
 80017da:	039b      	lsls	r3, r3, #14
 80017dc:	4013      	ands	r3, r2
 80017de:	d003      	beq.n	80017e8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017e8:	4b22      	ldr	r3, [pc, #136]	@ (8001874 <HAL_GPIO_Init+0x2dc>)
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80017ee:	4b21      	ldr	r3, [pc, #132]	@ (8001874 <HAL_GPIO_Init+0x2dc>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	43da      	mvns	r2, r3
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4013      	ands	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	2380      	movs	r3, #128	@ 0x80
 8001804:	029b      	lsls	r3, r3, #10
 8001806:	4013      	ands	r3, r2
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001812:	4b18      	ldr	r3, [pc, #96]	@ (8001874 <HAL_GPIO_Init+0x2dc>)
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001818:	4b16      	ldr	r3, [pc, #88]	@ (8001874 <HAL_GPIO_Init+0x2dc>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	43da      	mvns	r2, r3
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	2380      	movs	r3, #128	@ 0x80
 800182e:	025b      	lsls	r3, r3, #9
 8001830:	4013      	ands	r3, r2
 8001832:	d003      	beq.n	800183c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800183c:	4b0d      	ldr	r3, [pc, #52]	@ (8001874 <HAL_GPIO_Init+0x2dc>)
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	3301      	adds	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	40da      	lsrs	r2, r3
 8001850:	1e13      	subs	r3, r2, #0
 8001852:	d000      	beq.n	8001856 <HAL_GPIO_Init+0x2be>
 8001854:	e6a8      	b.n	80015a8 <HAL_GPIO_Init+0x10>
  } 
}
 8001856:	46c0      	nop			@ (mov r8, r8)
 8001858:	46c0      	nop			@ (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b006      	add	sp, #24
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40021000 	.word	0x40021000
 8001864:	40010000 	.word	0x40010000
 8001868:	48000400 	.word	0x48000400
 800186c:	48000800 	.word	0x48000800
 8001870:	48000c00 	.word	0x48000c00
 8001874:	40010400 	.word	0x40010400

08001878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	0008      	movs	r0, r1
 8001882:	0011      	movs	r1, r2
 8001884:	1cbb      	adds	r3, r7, #2
 8001886:	1c02      	adds	r2, r0, #0
 8001888:	801a      	strh	r2, [r3, #0]
 800188a:	1c7b      	adds	r3, r7, #1
 800188c:	1c0a      	adds	r2, r1, #0
 800188e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001890:	1c7b      	adds	r3, r7, #1
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d004      	beq.n	80018a2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001898:	1cbb      	adds	r3, r7, #2
 800189a:	881a      	ldrh	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018a0:	e003      	b.n	80018aa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018a2:	1cbb      	adds	r3, r7, #2
 80018a4:	881a      	ldrh	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018aa:	46c0      	nop			@ (mov r8, r8)
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b002      	add	sp, #8
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b084      	sub	sp, #16
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	000a      	movs	r2, r1
 80018bc:	1cbb      	adds	r3, r7, #2
 80018be:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018c6:	1cbb      	adds	r3, r7, #2
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	4013      	ands	r3, r2
 80018ce:	041a      	lsls	r2, r3, #16
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	1cb9      	adds	r1, r7, #2
 80018d6:	8809      	ldrh	r1, [r1, #0]
 80018d8:	400b      	ands	r3, r1
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	619a      	str	r2, [r3, #24]
}
 80018e0:	46c0      	nop			@ (mov r8, r8)
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b004      	add	sp, #16
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e301      	b.n	8001efe <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2201      	movs	r2, #1
 8001900:	4013      	ands	r3, r2
 8001902:	d100      	bne.n	8001906 <HAL_RCC_OscConfig+0x1e>
 8001904:	e08d      	b.n	8001a22 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001906:	4bc3      	ldr	r3, [pc, #780]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	220c      	movs	r2, #12
 800190c:	4013      	ands	r3, r2
 800190e:	2b04      	cmp	r3, #4
 8001910:	d00e      	beq.n	8001930 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001912:	4bc0      	ldr	r3, [pc, #768]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	220c      	movs	r2, #12
 8001918:	4013      	ands	r3, r2
 800191a:	2b08      	cmp	r3, #8
 800191c:	d116      	bne.n	800194c <HAL_RCC_OscConfig+0x64>
 800191e:	4bbd      	ldr	r3, [pc, #756]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	2380      	movs	r3, #128	@ 0x80
 8001924:	025b      	lsls	r3, r3, #9
 8001926:	401a      	ands	r2, r3
 8001928:	2380      	movs	r3, #128	@ 0x80
 800192a:	025b      	lsls	r3, r3, #9
 800192c:	429a      	cmp	r2, r3
 800192e:	d10d      	bne.n	800194c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001930:	4bb8      	ldr	r3, [pc, #736]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	2380      	movs	r3, #128	@ 0x80
 8001936:	029b      	lsls	r3, r3, #10
 8001938:	4013      	ands	r3, r2
 800193a:	d100      	bne.n	800193e <HAL_RCC_OscConfig+0x56>
 800193c:	e070      	b.n	8001a20 <HAL_RCC_OscConfig+0x138>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d000      	beq.n	8001948 <HAL_RCC_OscConfig+0x60>
 8001946:	e06b      	b.n	8001a20 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e2d8      	b.n	8001efe <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d107      	bne.n	8001964 <HAL_RCC_OscConfig+0x7c>
 8001954:	4baf      	ldr	r3, [pc, #700]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4bae      	ldr	r3, [pc, #696]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 800195a:	2180      	movs	r1, #128	@ 0x80
 800195c:	0249      	lsls	r1, r1, #9
 800195e:	430a      	orrs	r2, r1
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	e02f      	b.n	80019c4 <HAL_RCC_OscConfig+0xdc>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10c      	bne.n	8001986 <HAL_RCC_OscConfig+0x9e>
 800196c:	4ba9      	ldr	r3, [pc, #676]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4ba8      	ldr	r3, [pc, #672]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001972:	49a9      	ldr	r1, [pc, #676]	@ (8001c18 <HAL_RCC_OscConfig+0x330>)
 8001974:	400a      	ands	r2, r1
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	4ba6      	ldr	r3, [pc, #664]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4ba5      	ldr	r3, [pc, #660]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 800197e:	49a7      	ldr	r1, [pc, #668]	@ (8001c1c <HAL_RCC_OscConfig+0x334>)
 8001980:	400a      	ands	r2, r1
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	e01e      	b.n	80019c4 <HAL_RCC_OscConfig+0xdc>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b05      	cmp	r3, #5
 800198c:	d10e      	bne.n	80019ac <HAL_RCC_OscConfig+0xc4>
 800198e:	4ba1      	ldr	r3, [pc, #644]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	4ba0      	ldr	r3, [pc, #640]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001994:	2180      	movs	r1, #128	@ 0x80
 8001996:	02c9      	lsls	r1, r1, #11
 8001998:	430a      	orrs	r2, r1
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	4b9d      	ldr	r3, [pc, #628]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b9c      	ldr	r3, [pc, #624]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 80019a2:	2180      	movs	r1, #128	@ 0x80
 80019a4:	0249      	lsls	r1, r1, #9
 80019a6:	430a      	orrs	r2, r1
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	e00b      	b.n	80019c4 <HAL_RCC_OscConfig+0xdc>
 80019ac:	4b99      	ldr	r3, [pc, #612]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b98      	ldr	r3, [pc, #608]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 80019b2:	4999      	ldr	r1, [pc, #612]	@ (8001c18 <HAL_RCC_OscConfig+0x330>)
 80019b4:	400a      	ands	r2, r1
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	4b96      	ldr	r3, [pc, #600]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b95      	ldr	r3, [pc, #596]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 80019be:	4997      	ldr	r1, [pc, #604]	@ (8001c1c <HAL_RCC_OscConfig+0x334>)
 80019c0:	400a      	ands	r2, r1
 80019c2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d014      	beq.n	80019f6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff f852 	bl	8000a74 <HAL_GetTick>
 80019d0:	0003      	movs	r3, r0
 80019d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d6:	f7ff f84d 	bl	8000a74 <HAL_GetTick>
 80019da:	0002      	movs	r2, r0
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b64      	cmp	r3, #100	@ 0x64
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e28a      	b.n	8001efe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e8:	4b8a      	ldr	r3, [pc, #552]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	2380      	movs	r3, #128	@ 0x80
 80019ee:	029b      	lsls	r3, r3, #10
 80019f0:	4013      	ands	r3, r2
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0xee>
 80019f4:	e015      	b.n	8001a22 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f6:	f7ff f83d 	bl	8000a74 <HAL_GetTick>
 80019fa:	0003      	movs	r3, r0
 80019fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a00:	f7ff f838 	bl	8000a74 <HAL_GetTick>
 8001a04:	0002      	movs	r2, r0
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b64      	cmp	r3, #100	@ 0x64
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e275      	b.n	8001efe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a12:	4b80      	ldr	r3, [pc, #512]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	2380      	movs	r3, #128	@ 0x80
 8001a18:	029b      	lsls	r3, r3, #10
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x118>
 8001a1e:	e000      	b.n	8001a22 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a20:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2202      	movs	r2, #2
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d100      	bne.n	8001a2e <HAL_RCC_OscConfig+0x146>
 8001a2c:	e069      	b.n	8001b02 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a2e:	4b79      	ldr	r3, [pc, #484]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	220c      	movs	r2, #12
 8001a34:	4013      	ands	r3, r2
 8001a36:	d00b      	beq.n	8001a50 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a38:	4b76      	ldr	r3, [pc, #472]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	220c      	movs	r2, #12
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b08      	cmp	r3, #8
 8001a42:	d11c      	bne.n	8001a7e <HAL_RCC_OscConfig+0x196>
 8001a44:	4b73      	ldr	r3, [pc, #460]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	2380      	movs	r3, #128	@ 0x80
 8001a4a:	025b      	lsls	r3, r3, #9
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d116      	bne.n	8001a7e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a50:	4b70      	ldr	r3, [pc, #448]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2202      	movs	r2, #2
 8001a56:	4013      	ands	r3, r2
 8001a58:	d005      	beq.n	8001a66 <HAL_RCC_OscConfig+0x17e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d001      	beq.n	8001a66 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e24b      	b.n	8001efe <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a66:	4b6b      	ldr	r3, [pc, #428]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	22f8      	movs	r2, #248	@ 0xf8
 8001a6c:	4393      	bics	r3, r2
 8001a6e:	0019      	movs	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	00da      	lsls	r2, r3, #3
 8001a76:	4b67      	ldr	r3, [pc, #412]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a7c:	e041      	b.n	8001b02 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d024      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a86:	4b63      	ldr	r3, [pc, #396]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4b62      	ldr	r3, [pc, #392]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a92:	f7fe ffef 	bl	8000a74 <HAL_GetTick>
 8001a96:	0003      	movs	r3, r0
 8001a98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a9c:	f7fe ffea 	bl	8000a74 <HAL_GetTick>
 8001aa0:	0002      	movs	r2, r0
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e227      	b.n	8001efe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aae:	4b59      	ldr	r3, [pc, #356]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d0f1      	beq.n	8001a9c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab8:	4b56      	ldr	r3, [pc, #344]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	22f8      	movs	r2, #248	@ 0xf8
 8001abe:	4393      	bics	r3, r2
 8001ac0:	0019      	movs	r1, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	00da      	lsls	r2, r3, #3
 8001ac8:	4b52      	ldr	r3, [pc, #328]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001aca:	430a      	orrs	r2, r1
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	e018      	b.n	8001b02 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ad0:	4b50      	ldr	r3, [pc, #320]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b4f      	ldr	r3, [pc, #316]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	438a      	bics	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7fe ffca 	bl	8000a74 <HAL_GetTick>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ae6:	f7fe ffc5 	bl	8000a74 <HAL_GetTick>
 8001aea:	0002      	movs	r2, r0
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e202      	b.n	8001efe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af8:	4b46      	ldr	r3, [pc, #280]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2202      	movs	r2, #2
 8001afe:	4013      	ands	r3, r2
 8001b00:	d1f1      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2208      	movs	r2, #8
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d036      	beq.n	8001b7a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d019      	beq.n	8001b48 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b14:	4b3f      	ldr	r3, [pc, #252]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001b16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b18:	4b3e      	ldr	r3, [pc, #248]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b20:	f7fe ffa8 	bl	8000a74 <HAL_GetTick>
 8001b24:	0003      	movs	r3, r0
 8001b26:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b2a:	f7fe ffa3 	bl	8000a74 <HAL_GetTick>
 8001b2e:	0002      	movs	r2, r0
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e1e0      	b.n	8001efe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b3c:	4b35      	ldr	r3, [pc, #212]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b40:	2202      	movs	r2, #2
 8001b42:	4013      	ands	r3, r2
 8001b44:	d0f1      	beq.n	8001b2a <HAL_RCC_OscConfig+0x242>
 8001b46:	e018      	b.n	8001b7a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b48:	4b32      	ldr	r3, [pc, #200]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001b4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b4c:	4b31      	ldr	r3, [pc, #196]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001b4e:	2101      	movs	r1, #1
 8001b50:	438a      	bics	r2, r1
 8001b52:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b54:	f7fe ff8e 	bl	8000a74 <HAL_GetTick>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b5e:	f7fe ff89 	bl	8000a74 <HAL_GetTick>
 8001b62:	0002      	movs	r2, r0
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e1c6      	b.n	8001efe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b70:	4b28      	ldr	r3, [pc, #160]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b74:	2202      	movs	r2, #2
 8001b76:	4013      	ands	r3, r2
 8001b78:	d1f1      	bne.n	8001b5e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2204      	movs	r2, #4
 8001b80:	4013      	ands	r3, r2
 8001b82:	d100      	bne.n	8001b86 <HAL_RCC_OscConfig+0x29e>
 8001b84:	e0b4      	b.n	8001cf0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b86:	201f      	movs	r0, #31
 8001b88:	183b      	adds	r3, r7, r0
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b8e:	4b21      	ldr	r3, [pc, #132]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001b90:	69da      	ldr	r2, [r3, #28]
 8001b92:	2380      	movs	r3, #128	@ 0x80
 8001b94:	055b      	lsls	r3, r3, #21
 8001b96:	4013      	ands	r3, r2
 8001b98:	d110      	bne.n	8001bbc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001b9c:	69da      	ldr	r2, [r3, #28]
 8001b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001ba0:	2180      	movs	r1, #128	@ 0x80
 8001ba2:	0549      	lsls	r1, r1, #21
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	61da      	str	r2, [r3, #28]
 8001ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001baa:	69da      	ldr	r2, [r3, #28]
 8001bac:	2380      	movs	r3, #128	@ 0x80
 8001bae:	055b      	lsls	r3, r3, #21
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bb6:	183b      	adds	r3, r7, r0
 8001bb8:	2201      	movs	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bbc:	4b18      	ldr	r3, [pc, #96]	@ (8001c20 <HAL_RCC_OscConfig+0x338>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	2380      	movs	r3, #128	@ 0x80
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d11a      	bne.n	8001bfe <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bc8:	4b15      	ldr	r3, [pc, #84]	@ (8001c20 <HAL_RCC_OscConfig+0x338>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b14      	ldr	r3, [pc, #80]	@ (8001c20 <HAL_RCC_OscConfig+0x338>)
 8001bce:	2180      	movs	r1, #128	@ 0x80
 8001bd0:	0049      	lsls	r1, r1, #1
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bd6:	f7fe ff4d 	bl	8000a74 <HAL_GetTick>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be0:	f7fe ff48 	bl	8000a74 <HAL_GetTick>
 8001be4:	0002      	movs	r2, r0
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b64      	cmp	r3, #100	@ 0x64
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e185      	b.n	8001efe <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <HAL_RCC_OscConfig+0x338>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	2380      	movs	r3, #128	@ 0x80
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d10e      	bne.n	8001c24 <HAL_RCC_OscConfig+0x33c>
 8001c06:	4b03      	ldr	r3, [pc, #12]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001c08:	6a1a      	ldr	r2, [r3, #32]
 8001c0a:	4b02      	ldr	r3, [pc, #8]	@ (8001c14 <HAL_RCC_OscConfig+0x32c>)
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	621a      	str	r2, [r3, #32]
 8001c12:	e035      	b.n	8001c80 <HAL_RCC_OscConfig+0x398>
 8001c14:	40021000 	.word	0x40021000
 8001c18:	fffeffff 	.word	0xfffeffff
 8001c1c:	fffbffff 	.word	0xfffbffff
 8001c20:	40007000 	.word	0x40007000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10c      	bne.n	8001c46 <HAL_RCC_OscConfig+0x35e>
 8001c2c:	4bb6      	ldr	r3, [pc, #728]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001c2e:	6a1a      	ldr	r2, [r3, #32]
 8001c30:	4bb5      	ldr	r3, [pc, #724]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001c32:	2101      	movs	r1, #1
 8001c34:	438a      	bics	r2, r1
 8001c36:	621a      	str	r2, [r3, #32]
 8001c38:	4bb3      	ldr	r3, [pc, #716]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001c3a:	6a1a      	ldr	r2, [r3, #32]
 8001c3c:	4bb2      	ldr	r3, [pc, #712]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001c3e:	2104      	movs	r1, #4
 8001c40:	438a      	bics	r2, r1
 8001c42:	621a      	str	r2, [r3, #32]
 8001c44:	e01c      	b.n	8001c80 <HAL_RCC_OscConfig+0x398>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b05      	cmp	r3, #5
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x380>
 8001c4e:	4bae      	ldr	r3, [pc, #696]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001c50:	6a1a      	ldr	r2, [r3, #32]
 8001c52:	4bad      	ldr	r3, [pc, #692]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001c54:	2104      	movs	r1, #4
 8001c56:	430a      	orrs	r2, r1
 8001c58:	621a      	str	r2, [r3, #32]
 8001c5a:	4bab      	ldr	r3, [pc, #684]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001c5c:	6a1a      	ldr	r2, [r3, #32]
 8001c5e:	4baa      	ldr	r3, [pc, #680]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001c60:	2101      	movs	r1, #1
 8001c62:	430a      	orrs	r2, r1
 8001c64:	621a      	str	r2, [r3, #32]
 8001c66:	e00b      	b.n	8001c80 <HAL_RCC_OscConfig+0x398>
 8001c68:	4ba7      	ldr	r3, [pc, #668]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001c6a:	6a1a      	ldr	r2, [r3, #32]
 8001c6c:	4ba6      	ldr	r3, [pc, #664]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001c6e:	2101      	movs	r1, #1
 8001c70:	438a      	bics	r2, r1
 8001c72:	621a      	str	r2, [r3, #32]
 8001c74:	4ba4      	ldr	r3, [pc, #656]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001c76:	6a1a      	ldr	r2, [r3, #32]
 8001c78:	4ba3      	ldr	r3, [pc, #652]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001c7a:	2104      	movs	r1, #4
 8001c7c:	438a      	bics	r2, r1
 8001c7e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d014      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c88:	f7fe fef4 	bl	8000a74 <HAL_GetTick>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c90:	e009      	b.n	8001ca6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c92:	f7fe feef 	bl	8000a74 <HAL_GetTick>
 8001c96:	0002      	movs	r2, r0
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	4a9b      	ldr	r2, [pc, #620]	@ (8001f0c <HAL_RCC_OscConfig+0x624>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e12b      	b.n	8001efe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca6:	4b98      	ldr	r3, [pc, #608]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	2202      	movs	r2, #2
 8001cac:	4013      	ands	r3, r2
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x3aa>
 8001cb0:	e013      	b.n	8001cda <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb2:	f7fe fedf 	bl	8000a74 <HAL_GetTick>
 8001cb6:	0003      	movs	r3, r0
 8001cb8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cba:	e009      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cbc:	f7fe feda 	bl	8000a74 <HAL_GetTick>
 8001cc0:	0002      	movs	r2, r0
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	4a91      	ldr	r2, [pc, #580]	@ (8001f0c <HAL_RCC_OscConfig+0x624>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e116      	b.n	8001efe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd0:	4b8d      	ldr	r3, [pc, #564]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cda:	231f      	movs	r3, #31
 8001cdc:	18fb      	adds	r3, r7, r3
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d105      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce4:	4b88      	ldr	r3, [pc, #544]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001ce6:	69da      	ldr	r2, [r3, #28]
 8001ce8:	4b87      	ldr	r3, [pc, #540]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001cea:	4989      	ldr	r1, [pc, #548]	@ (8001f10 <HAL_RCC_OscConfig+0x628>)
 8001cec:	400a      	ands	r2, r1
 8001cee:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2210      	movs	r2, #16
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d063      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d12a      	bne.n	8001d58 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d02:	4b81      	ldr	r3, [pc, #516]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001d04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d06:	4b80      	ldr	r3, [pc, #512]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001d08:	2104      	movs	r1, #4
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001d0e:	4b7e      	ldr	r3, [pc, #504]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001d10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d12:	4b7d      	ldr	r3, [pc, #500]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001d14:	2101      	movs	r1, #1
 8001d16:	430a      	orrs	r2, r1
 8001d18:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1a:	f7fe feab 	bl	8000a74 <HAL_GetTick>
 8001d1e:	0003      	movs	r3, r0
 8001d20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d24:	f7fe fea6 	bl	8000a74 <HAL_GetTick>
 8001d28:	0002      	movs	r2, r0
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e0e3      	b.n	8001efe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d36:	4b74      	ldr	r3, [pc, #464]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d0f1      	beq.n	8001d24 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d40:	4b71      	ldr	r3, [pc, #452]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d44:	22f8      	movs	r2, #248	@ 0xf8
 8001d46:	4393      	bics	r3, r2
 8001d48:	0019      	movs	r1, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	00da      	lsls	r2, r3, #3
 8001d50:	4b6d      	ldr	r3, [pc, #436]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001d52:	430a      	orrs	r2, r1
 8001d54:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d56:	e034      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	3305      	adds	r3, #5
 8001d5e:	d111      	bne.n	8001d84 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001d60:	4b69      	ldr	r3, [pc, #420]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001d62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d64:	4b68      	ldr	r3, [pc, #416]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001d66:	2104      	movs	r1, #4
 8001d68:	438a      	bics	r2, r1
 8001d6a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d6c:	4b66      	ldr	r3, [pc, #408]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d70:	22f8      	movs	r2, #248	@ 0xf8
 8001d72:	4393      	bics	r3, r2
 8001d74:	0019      	movs	r1, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	00da      	lsls	r2, r3, #3
 8001d7c:	4b62      	ldr	r3, [pc, #392]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d82:	e01e      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d84:	4b60      	ldr	r3, [pc, #384]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001d86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d88:	4b5f      	ldr	r3, [pc, #380]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001d8a:	2104      	movs	r1, #4
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001d90:	4b5d      	ldr	r3, [pc, #372]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001d92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d94:	4b5c      	ldr	r3, [pc, #368]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001d96:	2101      	movs	r1, #1
 8001d98:	438a      	bics	r2, r1
 8001d9a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9c:	f7fe fe6a 	bl	8000a74 <HAL_GetTick>
 8001da0:	0003      	movs	r3, r0
 8001da2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001da6:	f7fe fe65 	bl	8000a74 <HAL_GetTick>
 8001daa:	0002      	movs	r2, r0
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e0a2      	b.n	8001efe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001db8:	4b53      	ldr	r3, [pc, #332]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d1f1      	bne.n	8001da6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d100      	bne.n	8001dcc <HAL_RCC_OscConfig+0x4e4>
 8001dca:	e097      	b.n	8001efc <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dcc:	4b4e      	ldr	r3, [pc, #312]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	220c      	movs	r2, #12
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d100      	bne.n	8001dda <HAL_RCC_OscConfig+0x4f2>
 8001dd8:	e06b      	b.n	8001eb2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d14c      	bne.n	8001e7c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de2:	4b49      	ldr	r3, [pc, #292]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	4b48      	ldr	r3, [pc, #288]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001de8:	494a      	ldr	r1, [pc, #296]	@ (8001f14 <HAL_RCC_OscConfig+0x62c>)
 8001dea:	400a      	ands	r2, r1
 8001dec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dee:	f7fe fe41 	bl	8000a74 <HAL_GetTick>
 8001df2:	0003      	movs	r3, r0
 8001df4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df8:	f7fe fe3c 	bl	8000a74 <HAL_GetTick>
 8001dfc:	0002      	movs	r2, r0
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e079      	b.n	8001efe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	2380      	movs	r3, #128	@ 0x80
 8001e10:	049b      	lsls	r3, r3, #18
 8001e12:	4013      	ands	r3, r2
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e16:	4b3c      	ldr	r3, [pc, #240]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1a:	220f      	movs	r2, #15
 8001e1c:	4393      	bics	r3, r2
 8001e1e:	0019      	movs	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e24:	4b38      	ldr	r3, [pc, #224]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001e26:	430a      	orrs	r2, r1
 8001e28:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e2a:	4b37      	ldr	r3, [pc, #220]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	4a3a      	ldr	r2, [pc, #232]	@ (8001f18 <HAL_RCC_OscConfig+0x630>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	0019      	movs	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	4b32      	ldr	r3, [pc, #200]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001e40:	430a      	orrs	r2, r1
 8001e42:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e44:	4b30      	ldr	r3, [pc, #192]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b2f      	ldr	r3, [pc, #188]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001e4a:	2180      	movs	r1, #128	@ 0x80
 8001e4c:	0449      	lsls	r1, r1, #17
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e52:	f7fe fe0f 	bl	8000a74 <HAL_GetTick>
 8001e56:	0003      	movs	r3, r0
 8001e58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e5c:	f7fe fe0a 	bl	8000a74 <HAL_GetTick>
 8001e60:	0002      	movs	r2, r0
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e047      	b.n	8001efe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e6e:	4b26      	ldr	r3, [pc, #152]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	2380      	movs	r3, #128	@ 0x80
 8001e74:	049b      	lsls	r3, r3, #18
 8001e76:	4013      	ands	r3, r2
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0x574>
 8001e7a:	e03f      	b.n	8001efc <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7c:	4b22      	ldr	r3, [pc, #136]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4b21      	ldr	r3, [pc, #132]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001e82:	4924      	ldr	r1, [pc, #144]	@ (8001f14 <HAL_RCC_OscConfig+0x62c>)
 8001e84:	400a      	ands	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e88:	f7fe fdf4 	bl	8000a74 <HAL_GetTick>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e92:	f7fe fdef 	bl	8000a74 <HAL_GetTick>
 8001e96:	0002      	movs	r2, r0
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e02c      	b.n	8001efe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea4:	4b18      	ldr	r3, [pc, #96]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	2380      	movs	r3, #128	@ 0x80
 8001eaa:	049b      	lsls	r3, r3, #18
 8001eac:	4013      	ands	r3, r2
 8001eae:	d1f0      	bne.n	8001e92 <HAL_RCC_OscConfig+0x5aa>
 8001eb0:	e024      	b.n	8001efc <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e01f      	b.n	8001efe <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ebe:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001ec4:	4b10      	ldr	r3, [pc, #64]	@ (8001f08 <HAL_RCC_OscConfig+0x620>)
 8001ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	2380      	movs	r3, #128	@ 0x80
 8001ece:	025b      	lsls	r3, r3, #9
 8001ed0:	401a      	ands	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d10e      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	220f      	movs	r2, #15
 8001ede:	401a      	ands	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d107      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	23f0      	movs	r3, #240	@ 0xf0
 8001eec:	039b      	lsls	r3, r3, #14
 8001eee:	401a      	ands	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d001      	beq.n	8001efc <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	0018      	movs	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	b008      	add	sp, #32
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	46c0      	nop			@ (mov r8, r8)
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	00001388 	.word	0x00001388
 8001f10:	efffffff 	.word	0xefffffff
 8001f14:	feffffff 	.word	0xfeffffff
 8001f18:	ffc2ffff 	.word	0xffc2ffff

08001f1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0b3      	b.n	8002098 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f30:	4b5b      	ldr	r3, [pc, #364]	@ (80020a0 <HAL_RCC_ClockConfig+0x184>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2201      	movs	r2, #1
 8001f36:	4013      	ands	r3, r2
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d911      	bls.n	8001f62 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3e:	4b58      	ldr	r3, [pc, #352]	@ (80020a0 <HAL_RCC_ClockConfig+0x184>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2201      	movs	r2, #1
 8001f44:	4393      	bics	r3, r2
 8001f46:	0019      	movs	r1, r3
 8001f48:	4b55      	ldr	r3, [pc, #340]	@ (80020a0 <HAL_RCC_ClockConfig+0x184>)
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f50:	4b53      	ldr	r3, [pc, #332]	@ (80020a0 <HAL_RCC_ClockConfig+0x184>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2201      	movs	r2, #1
 8001f56:	4013      	ands	r3, r2
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e09a      	b.n	8002098 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2202      	movs	r2, #2
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d015      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2204      	movs	r2, #4
 8001f72:	4013      	ands	r3, r2
 8001f74:	d006      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f76:	4b4b      	ldr	r3, [pc, #300]	@ (80020a4 <HAL_RCC_ClockConfig+0x188>)
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	4b4a      	ldr	r3, [pc, #296]	@ (80020a4 <HAL_RCC_ClockConfig+0x188>)
 8001f7c:	21e0      	movs	r1, #224	@ 0xe0
 8001f7e:	00c9      	lsls	r1, r1, #3
 8001f80:	430a      	orrs	r2, r1
 8001f82:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f84:	4b47      	ldr	r3, [pc, #284]	@ (80020a4 <HAL_RCC_ClockConfig+0x188>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	22f0      	movs	r2, #240	@ 0xf0
 8001f8a:	4393      	bics	r3, r2
 8001f8c:	0019      	movs	r1, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	4b44      	ldr	r3, [pc, #272]	@ (80020a4 <HAL_RCC_ClockConfig+0x188>)
 8001f94:	430a      	orrs	r2, r1
 8001f96:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d040      	beq.n	8002024 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001faa:	4b3e      	ldr	r3, [pc, #248]	@ (80020a4 <HAL_RCC_ClockConfig+0x188>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	2380      	movs	r3, #128	@ 0x80
 8001fb0:	029b      	lsls	r3, r3, #10
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d114      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e06e      	b.n	8002098 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d107      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc2:	4b38      	ldr	r3, [pc, #224]	@ (80020a4 <HAL_RCC_ClockConfig+0x188>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	2380      	movs	r3, #128	@ 0x80
 8001fc8:	049b      	lsls	r3, r3, #18
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d108      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e062      	b.n	8002098 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd2:	4b34      	ldr	r3, [pc, #208]	@ (80020a4 <HAL_RCC_ClockConfig+0x188>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e05b      	b.n	8002098 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fe0:	4b30      	ldr	r3, [pc, #192]	@ (80020a4 <HAL_RCC_ClockConfig+0x188>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	4393      	bics	r3, r2
 8001fe8:	0019      	movs	r1, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	4b2d      	ldr	r3, [pc, #180]	@ (80020a4 <HAL_RCC_ClockConfig+0x188>)
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ff4:	f7fe fd3e 	bl	8000a74 <HAL_GetTick>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffc:	e009      	b.n	8002012 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffe:	f7fe fd39 	bl	8000a74 <HAL_GetTick>
 8002002:	0002      	movs	r2, r0
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	4a27      	ldr	r2, [pc, #156]	@ (80020a8 <HAL_RCC_ClockConfig+0x18c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e042      	b.n	8002098 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002012:	4b24      	ldr	r3, [pc, #144]	@ (80020a4 <HAL_RCC_ClockConfig+0x188>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	220c      	movs	r2, #12
 8002018:	401a      	ands	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	429a      	cmp	r2, r3
 8002022:	d1ec      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002024:	4b1e      	ldr	r3, [pc, #120]	@ (80020a0 <HAL_RCC_ClockConfig+0x184>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2201      	movs	r2, #1
 800202a:	4013      	ands	r3, r2
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d211      	bcs.n	8002056 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	4b1b      	ldr	r3, [pc, #108]	@ (80020a0 <HAL_RCC_ClockConfig+0x184>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2201      	movs	r2, #1
 8002038:	4393      	bics	r3, r2
 800203a:	0019      	movs	r1, r3
 800203c:	4b18      	ldr	r3, [pc, #96]	@ (80020a0 <HAL_RCC_ClockConfig+0x184>)
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002044:	4b16      	ldr	r3, [pc, #88]	@ (80020a0 <HAL_RCC_ClockConfig+0x184>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2201      	movs	r2, #1
 800204a:	4013      	ands	r3, r2
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d001      	beq.n	8002056 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e020      	b.n	8002098 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2204      	movs	r2, #4
 800205c:	4013      	ands	r3, r2
 800205e:	d009      	beq.n	8002074 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002060:	4b10      	ldr	r3, [pc, #64]	@ (80020a4 <HAL_RCC_ClockConfig+0x188>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4a11      	ldr	r2, [pc, #68]	@ (80020ac <HAL_RCC_ClockConfig+0x190>)
 8002066:	4013      	ands	r3, r2
 8002068:	0019      	movs	r1, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	4b0d      	ldr	r3, [pc, #52]	@ (80020a4 <HAL_RCC_ClockConfig+0x188>)
 8002070:	430a      	orrs	r2, r1
 8002072:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002074:	f000 f820 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 8002078:	0001      	movs	r1, r0
 800207a:	4b0a      	ldr	r3, [pc, #40]	@ (80020a4 <HAL_RCC_ClockConfig+0x188>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	091b      	lsrs	r3, r3, #4
 8002080:	220f      	movs	r2, #15
 8002082:	4013      	ands	r3, r2
 8002084:	4a0a      	ldr	r2, [pc, #40]	@ (80020b0 <HAL_RCC_ClockConfig+0x194>)
 8002086:	5cd3      	ldrb	r3, [r2, r3]
 8002088:	000a      	movs	r2, r1
 800208a:	40da      	lsrs	r2, r3
 800208c:	4b09      	ldr	r3, [pc, #36]	@ (80020b4 <HAL_RCC_ClockConfig+0x198>)
 800208e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002090:	2003      	movs	r0, #3
 8002092:	f7fe fca9 	bl	80009e8 <HAL_InitTick>
  
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	0018      	movs	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	b004      	add	sp, #16
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40022000 	.word	0x40022000
 80020a4:	40021000 	.word	0x40021000
 80020a8:	00001388 	.word	0x00001388
 80020ac:	fffff8ff 	.word	0xfffff8ff
 80020b0:	08003014 	.word	0x08003014
 80020b4:	20000008 	.word	0x20000008

080020b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	2300      	movs	r3, #0
 80020cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80020d2:	4b20      	ldr	r3, [pc, #128]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	220c      	movs	r2, #12
 80020dc:	4013      	ands	r3, r2
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d002      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x30>
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d003      	beq.n	80020ee <HAL_RCC_GetSysClockFreq+0x36>
 80020e6:	e02c      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002158 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020ea:	613b      	str	r3, [r7, #16]
      break;
 80020ec:	e02c      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	0c9b      	lsrs	r3, r3, #18
 80020f2:	220f      	movs	r2, #15
 80020f4:	4013      	ands	r3, r2
 80020f6:	4a19      	ldr	r2, [pc, #100]	@ (800215c <HAL_RCC_GetSysClockFreq+0xa4>)
 80020f8:	5cd3      	ldrb	r3, [r2, r3]
 80020fa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80020fc:	4b15      	ldr	r3, [pc, #84]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002100:	220f      	movs	r2, #15
 8002102:	4013      	ands	r3, r2
 8002104:	4a16      	ldr	r2, [pc, #88]	@ (8002160 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002106:	5cd3      	ldrb	r3, [r2, r3]
 8002108:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	2380      	movs	r3, #128	@ 0x80
 800210e:	025b      	lsls	r3, r3, #9
 8002110:	4013      	ands	r3, r2
 8002112:	d009      	beq.n	8002128 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002114:	68b9      	ldr	r1, [r7, #8]
 8002116:	4810      	ldr	r0, [pc, #64]	@ (8002158 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002118:	f7fd fff6 	bl	8000108 <__udivsi3>
 800211c:	0003      	movs	r3, r0
 800211e:	001a      	movs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4353      	muls	r3, r2
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	e009      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	000a      	movs	r2, r1
 800212c:	0152      	lsls	r2, r2, #5
 800212e:	1a52      	subs	r2, r2, r1
 8002130:	0193      	lsls	r3, r2, #6
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	185b      	adds	r3, r3, r1
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	613b      	str	r3, [r7, #16]
      break;
 8002140:	e002      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002142:	4b05      	ldr	r3, [pc, #20]	@ (8002158 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002144:	613b      	str	r3, [r7, #16]
      break;
 8002146:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002148:	693b      	ldr	r3, [r7, #16]
}
 800214a:	0018      	movs	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	b006      	add	sp, #24
 8002150:	bd80      	pop	{r7, pc}
 8002152:	46c0      	nop			@ (mov r8, r8)
 8002154:	40021000 	.word	0x40021000
 8002158:	007a1200 	.word	0x007a1200
 800215c:	08003024 	.word	0x08003024
 8002160:	08003034 	.word	0x08003034

08002164 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e0a8      	b.n	80022c8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217a:	2b00      	cmp	r3, #0
 800217c:	d109      	bne.n	8002192 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	2382      	movs	r3, #130	@ 0x82
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	429a      	cmp	r2, r3
 8002188:	d009      	beq.n	800219e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	61da      	str	r2, [r3, #28]
 8002190:	e005      	b.n	800219e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	225d      	movs	r2, #93	@ 0x5d
 80021a8:	5c9b      	ldrb	r3, [r3, r2]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d107      	bne.n	80021c0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	225c      	movs	r2, #92	@ 0x5c
 80021b4:	2100      	movs	r1, #0
 80021b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	0018      	movs	r0, r3
 80021bc:	f7fe fb6a 	bl	8000894 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	225d      	movs	r2, #93	@ 0x5d
 80021c4:	2102      	movs	r1, #2
 80021c6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2140      	movs	r1, #64	@ 0x40
 80021d4:	438a      	bics	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	23e0      	movs	r3, #224	@ 0xe0
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d902      	bls.n	80021ea <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	e002      	b.n	80021f0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80021ea:	2380      	movs	r3, #128	@ 0x80
 80021ec:	015b      	lsls	r3, r3, #5
 80021ee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	23f0      	movs	r3, #240	@ 0xf0
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d008      	beq.n	800220e <HAL_SPI_Init+0xaa>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	23e0      	movs	r3, #224	@ 0xe0
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	429a      	cmp	r2, r3
 8002206:	d002      	beq.n	800220e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	2382      	movs	r3, #130	@ 0x82
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	401a      	ands	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6899      	ldr	r1, [r3, #8]
 800221c:	2384      	movs	r3, #132	@ 0x84
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	400b      	ands	r3, r1
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	2102      	movs	r1, #2
 800222a:	400b      	ands	r3, r1
 800222c:	431a      	orrs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	2101      	movs	r1, #1
 8002234:	400b      	ands	r3, r1
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6999      	ldr	r1, [r3, #24]
 800223c:	2380      	movs	r3, #128	@ 0x80
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	400b      	ands	r3, r1
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	2138      	movs	r1, #56	@ 0x38
 800224a:	400b      	ands	r3, r1
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	2180      	movs	r1, #128	@ 0x80
 8002254:	400b      	ands	r3, r1
 8002256:	431a      	orrs	r2, r3
 8002258:	0011      	movs	r1, r2
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800225e:	2380      	movs	r3, #128	@ 0x80
 8002260:	019b      	lsls	r3, r3, #6
 8002262:	401a      	ands	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	0c1b      	lsrs	r3, r3, #16
 8002272:	2204      	movs	r2, #4
 8002274:	401a      	ands	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227a:	2110      	movs	r1, #16
 800227c:	400b      	ands	r3, r1
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002284:	2108      	movs	r1, #8
 8002286:	400b      	ands	r3, r1
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68d9      	ldr	r1, [r3, #12]
 800228e:	23f0      	movs	r3, #240	@ 0xf0
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	400b      	ands	r3, r1
 8002294:	431a      	orrs	r2, r3
 8002296:	0011      	movs	r1, r2
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	2380      	movs	r3, #128	@ 0x80
 800229c:	015b      	lsls	r3, r3, #5
 800229e:	401a      	ands	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	69da      	ldr	r2, [r3, #28]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4907      	ldr	r1, [pc, #28]	@ (80022d0 <HAL_SPI_Init+0x16c>)
 80022b4:	400a      	ands	r2, r1
 80022b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	225d      	movs	r2, #93	@ 0x5d
 80022c2:	2101      	movs	r1, #1
 80022c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	0018      	movs	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b004      	add	sp, #16
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	fffff7ff 	.word	0xfffff7ff

080022d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	1dbb      	adds	r3, r7, #6
 80022e2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022e4:	231f      	movs	r3, #31
 80022e6:	18fb      	adds	r3, r7, r3
 80022e8:	2200      	movs	r2, #0
 80022ea:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	225c      	movs	r2, #92	@ 0x5c
 80022f0:	5c9b      	ldrb	r3, [r3, r2]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_SPI_Transmit+0x26>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e147      	b.n	800258a <HAL_SPI_Transmit+0x2b6>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	225c      	movs	r2, #92	@ 0x5c
 80022fe:	2101      	movs	r1, #1
 8002300:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002302:	f7fe fbb7 	bl	8000a74 <HAL_GetTick>
 8002306:	0003      	movs	r3, r0
 8002308:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800230a:	2316      	movs	r3, #22
 800230c:	18fb      	adds	r3, r7, r3
 800230e:	1dba      	adds	r2, r7, #6
 8002310:	8812      	ldrh	r2, [r2, #0]
 8002312:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	225d      	movs	r2, #93	@ 0x5d
 8002318:	5c9b      	ldrb	r3, [r3, r2]
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b01      	cmp	r3, #1
 800231e:	d004      	beq.n	800232a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002320:	231f      	movs	r3, #31
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	2202      	movs	r2, #2
 8002326:	701a      	strb	r2, [r3, #0]
    goto error;
 8002328:	e128      	b.n	800257c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_SPI_Transmit+0x64>
 8002330:	1dbb      	adds	r3, r7, #6
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d104      	bne.n	8002342 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002338:	231f      	movs	r3, #31
 800233a:	18fb      	adds	r3, r7, r3
 800233c:	2201      	movs	r2, #1
 800233e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002340:	e11c      	b.n	800257c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	225d      	movs	r2, #93	@ 0x5d
 8002346:	2103      	movs	r1, #3
 8002348:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1dba      	adds	r2, r7, #6
 800235a:	8812      	ldrh	r2, [r2, #0]
 800235c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1dba      	adds	r2, r7, #6
 8002362:	8812      	ldrh	r2, [r2, #0]
 8002364:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2244      	movs	r2, #68	@ 0x44
 8002370:	2100      	movs	r1, #0
 8002372:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2246      	movs	r2, #70	@ 0x46
 8002378:	2100      	movs	r1, #0
 800237a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	2380      	movs	r3, #128	@ 0x80
 800238e:	021b      	lsls	r3, r3, #8
 8002390:	429a      	cmp	r2, r3
 8002392:	d110      	bne.n	80023b6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2140      	movs	r1, #64	@ 0x40
 80023a0:	438a      	bics	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2180      	movs	r1, #128	@ 0x80
 80023b0:	01c9      	lsls	r1, r1, #7
 80023b2:	430a      	orrs	r2, r1
 80023b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2240      	movs	r2, #64	@ 0x40
 80023be:	4013      	ands	r3, r2
 80023c0:	2b40      	cmp	r3, #64	@ 0x40
 80023c2:	d007      	beq.n	80023d4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2140      	movs	r1, #64	@ 0x40
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	23e0      	movs	r3, #224	@ 0xe0
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	429a      	cmp	r2, r3
 80023de:	d952      	bls.n	8002486 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d004      	beq.n	80023f2 <HAL_SPI_Transmit+0x11e>
 80023e8:	2316      	movs	r3, #22
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d143      	bne.n	800247a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f6:	881a      	ldrh	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002402:	1c9a      	adds	r2, r3, #2
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002416:	e030      	b.n	800247a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2202      	movs	r2, #2
 8002420:	4013      	ands	r3, r2
 8002422:	2b02      	cmp	r3, #2
 8002424:	d112      	bne.n	800244c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800242a:	881a      	ldrh	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002436:	1c9a      	adds	r2, r3, #2
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002440:	b29b      	uxth	r3, r3
 8002442:	3b01      	subs	r3, #1
 8002444:	b29a      	uxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800244a:	e016      	b.n	800247a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800244c:	f7fe fb12 	bl	8000a74 <HAL_GetTick>
 8002450:	0002      	movs	r2, r0
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d802      	bhi.n	8002462 <HAL_SPI_Transmit+0x18e>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	3301      	adds	r3, #1
 8002460:	d102      	bne.n	8002468 <HAL_SPI_Transmit+0x194>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d108      	bne.n	800247a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002468:	231f      	movs	r3, #31
 800246a:	18fb      	adds	r3, r7, r3
 800246c:	2203      	movs	r2, #3
 800246e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	225d      	movs	r2, #93	@ 0x5d
 8002474:	2101      	movs	r1, #1
 8002476:	5499      	strb	r1, [r3, r2]
          goto error;
 8002478:	e080      	b.n	800257c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800247e:	b29b      	uxth	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1c9      	bne.n	8002418 <HAL_SPI_Transmit+0x144>
 8002484:	e053      	b.n	800252e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d004      	beq.n	8002498 <HAL_SPI_Transmit+0x1c4>
 800248e:	2316      	movs	r3, #22
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d145      	bne.n	8002524 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	330c      	adds	r3, #12
 80024a2:	7812      	ldrb	r2, [r2, #0]
 80024a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80024be:	e031      	b.n	8002524 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2202      	movs	r2, #2
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d113      	bne.n	80024f6 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	330c      	adds	r3, #12
 80024d8:	7812      	ldrb	r2, [r2, #0]
 80024da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80024f4:	e016      	b.n	8002524 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024f6:	f7fe fabd 	bl	8000a74 <HAL_GetTick>
 80024fa:	0002      	movs	r2, r0
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d802      	bhi.n	800250c <HAL_SPI_Transmit+0x238>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	3301      	adds	r3, #1
 800250a:	d102      	bne.n	8002512 <HAL_SPI_Transmit+0x23e>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d108      	bne.n	8002524 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002512:	231f      	movs	r3, #31
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	2203      	movs	r2, #3
 8002518:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	225d      	movs	r2, #93	@ 0x5d
 800251e:	2101      	movs	r1, #1
 8002520:	5499      	strb	r1, [r3, r2]
          goto error;
 8002522:	e02b      	b.n	800257c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002528:	b29b      	uxth	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1c8      	bne.n	80024c0 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	6839      	ldr	r1, [r7, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	0018      	movs	r0, r3
 8002536:	f000 fcef 	bl	8002f18 <SPI_EndRxTxTransaction>
 800253a:	1e03      	subs	r3, r0, #0
 800253c:	d002      	beq.n	8002544 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2220      	movs	r2, #32
 8002542:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10a      	bne.n	8002562 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800254c:	2300      	movs	r3, #0
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	613b      	str	r3, [r7, #16]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002566:	2b00      	cmp	r3, #0
 8002568:	d004      	beq.n	8002574 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800256a:	231f      	movs	r3, #31
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	2201      	movs	r2, #1
 8002570:	701a      	strb	r2, [r3, #0]
 8002572:	e003      	b.n	800257c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	225d      	movs	r2, #93	@ 0x5d
 8002578:	2101      	movs	r1, #1
 800257a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	225c      	movs	r2, #92	@ 0x5c
 8002580:	2100      	movs	r1, #0
 8002582:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002584:	231f      	movs	r3, #31
 8002586:	18fb      	adds	r3, r7, r3
 8002588:	781b      	ldrb	r3, [r3, #0]
}
 800258a:	0018      	movs	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	b008      	add	sp, #32
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	b089      	sub	sp, #36	@ 0x24
 8002598:	af02      	add	r7, sp, #8
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	1dbb      	adds	r3, r7, #6
 80025a2:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025a4:	2117      	movs	r1, #23
 80025a6:	187b      	adds	r3, r7, r1
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	225d      	movs	r2, #93	@ 0x5d
 80025b0:	5c9b      	ldrb	r3, [r3, r2]
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d003      	beq.n	80025c0 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80025b8:	187b      	adds	r3, r7, r1
 80025ba:	2202      	movs	r2, #2
 80025bc:	701a      	strb	r2, [r3, #0]
    goto error;
 80025be:	e12b      	b.n	8002818 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	2382      	movs	r3, #130	@ 0x82
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d113      	bne.n	80025f4 <HAL_SPI_Receive+0x60>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10f      	bne.n	80025f4 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	225d      	movs	r2, #93	@ 0x5d
 80025d8:	2104      	movs	r1, #4
 80025da:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80025dc:	1dbb      	adds	r3, r7, #6
 80025de:	881c      	ldrh	r4, [r3, #0]
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	68b9      	ldr	r1, [r7, #8]
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	0023      	movs	r3, r4
 80025ec:	f000 f924 	bl	8002838 <HAL_SPI_TransmitReceive>
 80025f0:	0003      	movs	r3, r0
 80025f2:	e118      	b.n	8002826 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	225c      	movs	r2, #92	@ 0x5c
 80025f8:	5c9b      	ldrb	r3, [r3, r2]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_SPI_Receive+0x6e>
 80025fe:	2302      	movs	r3, #2
 8002600:	e111      	b.n	8002826 <HAL_SPI_Receive+0x292>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	225c      	movs	r2, #92	@ 0x5c
 8002606:	2101      	movs	r1, #1
 8002608:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800260a:	f7fe fa33 	bl	8000a74 <HAL_GetTick>
 800260e:	0003      	movs	r3, r0
 8002610:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_SPI_Receive+0x8c>
 8002618:	1dbb      	adds	r3, r7, #6
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d104      	bne.n	800262a <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8002620:	2317      	movs	r3, #23
 8002622:	18fb      	adds	r3, r7, r3
 8002624:	2201      	movs	r2, #1
 8002626:	701a      	strb	r2, [r3, #0]
    goto error;
 8002628:	e0f6      	b.n	8002818 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	225d      	movs	r2, #93	@ 0x5d
 800262e:	2104      	movs	r1, #4
 8002630:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1dba      	adds	r2, r7, #6
 8002642:	2144      	movs	r1, #68	@ 0x44
 8002644:	8812      	ldrh	r2, [r2, #0]
 8002646:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	1dba      	adds	r2, r7, #6
 800264c:	2146      	movs	r1, #70	@ 0x46
 800264e:	8812      	ldrh	r2, [r2, #0]
 8002650:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	23e0      	movs	r3, #224	@ 0xe0
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	429a      	cmp	r2, r3
 800267a:	d908      	bls.n	800268e <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	496a      	ldr	r1, [pc, #424]	@ (8002830 <HAL_SPI_Receive+0x29c>)
 8002688:	400a      	ands	r2, r1
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	e008      	b.n	80026a0 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2180      	movs	r1, #128	@ 0x80
 800269a:	0149      	lsls	r1, r1, #5
 800269c:	430a      	orrs	r2, r1
 800269e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	2380      	movs	r3, #128	@ 0x80
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d10f      	bne.n	80026cc <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2140      	movs	r1, #64	@ 0x40
 80026b8:	438a      	bics	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	495b      	ldr	r1, [pc, #364]	@ (8002834 <HAL_SPI_Receive+0x2a0>)
 80026c8:	400a      	ands	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2240      	movs	r2, #64	@ 0x40
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b40      	cmp	r3, #64	@ 0x40
 80026d8:	d007      	beq.n	80026ea <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2140      	movs	r1, #64	@ 0x40
 80026e6:	430a      	orrs	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	23e0      	movs	r3, #224	@ 0xe0
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d900      	bls.n	80026f8 <HAL_SPI_Receive+0x164>
 80026f6:	e071      	b.n	80027dc <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80026f8:	e035      	b.n	8002766 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2201      	movs	r2, #1
 8002702:	4013      	ands	r3, r2
 8002704:	2b01      	cmp	r3, #1
 8002706:	d117      	bne.n	8002738 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	330c      	adds	r3, #12
 800270e:	001a      	movs	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002714:	7812      	ldrb	r2, [r2, #0]
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2246      	movs	r2, #70	@ 0x46
 8002728:	5a9b      	ldrh	r3, [r3, r2]
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b299      	uxth	r1, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2246      	movs	r2, #70	@ 0x46
 8002734:	5299      	strh	r1, [r3, r2]
 8002736:	e016      	b.n	8002766 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002738:	f7fe f99c 	bl	8000a74 <HAL_GetTick>
 800273c:	0002      	movs	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d802      	bhi.n	800274e <HAL_SPI_Receive+0x1ba>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	3301      	adds	r3, #1
 800274c:	d102      	bne.n	8002754 <HAL_SPI_Receive+0x1c0>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d108      	bne.n	8002766 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8002754:	2317      	movs	r3, #23
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	2203      	movs	r2, #3
 800275a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	225d      	movs	r2, #93	@ 0x5d
 8002760:	2101      	movs	r1, #1
 8002762:	5499      	strb	r1, [r3, r2]
          goto error;
 8002764:	e058      	b.n	8002818 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2246      	movs	r2, #70	@ 0x46
 800276a:	5a9b      	ldrh	r3, [r3, r2]
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1c3      	bne.n	80026fa <HAL_SPI_Receive+0x166>
 8002772:	e039      	b.n	80027e8 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2201      	movs	r2, #1
 800277c:	4013      	ands	r3, r2
 800277e:	2b01      	cmp	r3, #1
 8002780:	d115      	bne.n	80027ae <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278c:	b292      	uxth	r2, r2
 800278e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002794:	1c9a      	adds	r2, r3, #2
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2246      	movs	r2, #70	@ 0x46
 800279e:	5a9b      	ldrh	r3, [r3, r2]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b299      	uxth	r1, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2246      	movs	r2, #70	@ 0x46
 80027aa:	5299      	strh	r1, [r3, r2]
 80027ac:	e016      	b.n	80027dc <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027ae:	f7fe f961 	bl	8000a74 <HAL_GetTick>
 80027b2:	0002      	movs	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d802      	bhi.n	80027c4 <HAL_SPI_Receive+0x230>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	3301      	adds	r3, #1
 80027c2:	d102      	bne.n	80027ca <HAL_SPI_Receive+0x236>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d108      	bne.n	80027dc <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80027ca:	2317      	movs	r3, #23
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	2203      	movs	r2, #3
 80027d0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	225d      	movs	r2, #93	@ 0x5d
 80027d6:	2101      	movs	r1, #1
 80027d8:	5499      	strb	r1, [r3, r2]
          goto error;
 80027da:	e01d      	b.n	8002818 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2246      	movs	r2, #70	@ 0x46
 80027e0:	5a9b      	ldrh	r3, [r3, r2]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1c5      	bne.n	8002774 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	6839      	ldr	r1, [r7, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	0018      	movs	r0, r3
 80027f0:	f000 fb34 	bl	8002e5c <SPI_EndRxTransaction>
 80027f4:	1e03      	subs	r3, r0, #0
 80027f6:	d002      	beq.n	80027fe <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2220      	movs	r2, #32
 80027fc:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002802:	2b00      	cmp	r3, #0
 8002804:	d004      	beq.n	8002810 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8002806:	2317      	movs	r3, #23
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	e003      	b.n	8002818 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	225d      	movs	r2, #93	@ 0x5d
 8002814:	2101      	movs	r1, #1
 8002816:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	225c      	movs	r2, #92	@ 0x5c
 800281c:	2100      	movs	r1, #0
 800281e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002820:	2317      	movs	r3, #23
 8002822:	18fb      	adds	r3, r7, r3
 8002824:	781b      	ldrb	r3, [r3, #0]
}
 8002826:	0018      	movs	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	b007      	add	sp, #28
 800282c:	bd90      	pop	{r4, r7, pc}
 800282e:	46c0      	nop			@ (mov r8, r8)
 8002830:	ffffefff 	.word	0xffffefff
 8002834:	ffffbfff 	.word	0xffffbfff

08002838 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	@ 0x28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
 8002844:	001a      	movs	r2, r3
 8002846:	1cbb      	adds	r3, r7, #2
 8002848:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800284a:	2301      	movs	r3, #1
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800284e:	2323      	movs	r3, #35	@ 0x23
 8002850:	18fb      	adds	r3, r7, r3
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	225c      	movs	r2, #92	@ 0x5c
 800285a:	5c9b      	ldrb	r3, [r3, r2]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <HAL_SPI_TransmitReceive+0x2c>
 8002860:	2302      	movs	r3, #2
 8002862:	e1c4      	b.n	8002bee <HAL_SPI_TransmitReceive+0x3b6>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	225c      	movs	r2, #92	@ 0x5c
 8002868:	2101      	movs	r1, #1
 800286a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800286c:	f7fe f902 	bl	8000a74 <HAL_GetTick>
 8002870:	0003      	movs	r3, r0
 8002872:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002874:	201b      	movs	r0, #27
 8002876:	183b      	adds	r3, r7, r0
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	215d      	movs	r1, #93	@ 0x5d
 800287c:	5c52      	ldrb	r2, [r2, r1]
 800287e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002886:	2312      	movs	r3, #18
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	1cba      	adds	r2, r7, #2
 800288c:	8812      	ldrh	r2, [r2, #0]
 800288e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002890:	183b      	adds	r3, r7, r0
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d011      	beq.n	80028bc <HAL_SPI_TransmitReceive+0x84>
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	2382      	movs	r3, #130	@ 0x82
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	429a      	cmp	r2, r3
 80028a0:	d107      	bne.n	80028b2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d103      	bne.n	80028b2 <HAL_SPI_TransmitReceive+0x7a>
 80028aa:	183b      	adds	r3, r7, r0
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d004      	beq.n	80028bc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80028b2:	2323      	movs	r3, #35	@ 0x23
 80028b4:	18fb      	adds	r3, r7, r3
 80028b6:	2202      	movs	r2, #2
 80028b8:	701a      	strb	r2, [r3, #0]
    goto error;
 80028ba:	e191      	b.n	8002be0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d006      	beq.n	80028d0 <HAL_SPI_TransmitReceive+0x98>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <HAL_SPI_TransmitReceive+0x98>
 80028c8:	1cbb      	adds	r3, r7, #2
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d104      	bne.n	80028da <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80028d0:	2323      	movs	r3, #35	@ 0x23
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	2201      	movs	r2, #1
 80028d6:	701a      	strb	r2, [r3, #0]
    goto error;
 80028d8:	e182      	b.n	8002be0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	225d      	movs	r2, #93	@ 0x5d
 80028de:	5c9b      	ldrb	r3, [r3, r2]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d003      	beq.n	80028ee <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	225d      	movs	r2, #93	@ 0x5d
 80028ea:	2105      	movs	r1, #5
 80028ec:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1cba      	adds	r2, r7, #2
 80028fe:	2146      	movs	r1, #70	@ 0x46
 8002900:	8812      	ldrh	r2, [r2, #0]
 8002902:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	1cba      	adds	r2, r7, #2
 8002908:	2144      	movs	r1, #68	@ 0x44
 800290a:	8812      	ldrh	r2, [r2, #0]
 800290c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	1cba      	adds	r2, r7, #2
 8002918:	8812      	ldrh	r2, [r2, #0]
 800291a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	1cba      	adds	r2, r7, #2
 8002920:	8812      	ldrh	r2, [r2, #0]
 8002922:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	23e0      	movs	r3, #224	@ 0xe0
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	429a      	cmp	r2, r3
 800293a:	d908      	bls.n	800294e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	49ac      	ldr	r1, [pc, #688]	@ (8002bf8 <HAL_SPI_TransmitReceive+0x3c0>)
 8002948:	400a      	ands	r2, r1
 800294a:	605a      	str	r2, [r3, #4]
 800294c:	e008      	b.n	8002960 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2180      	movs	r1, #128	@ 0x80
 800295a:	0149      	lsls	r1, r1, #5
 800295c:	430a      	orrs	r2, r1
 800295e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2240      	movs	r2, #64	@ 0x40
 8002968:	4013      	ands	r3, r2
 800296a:	2b40      	cmp	r3, #64	@ 0x40
 800296c:	d007      	beq.n	800297e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2140      	movs	r1, #64	@ 0x40
 800297a:	430a      	orrs	r2, r1
 800297c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	23e0      	movs	r3, #224	@ 0xe0
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	429a      	cmp	r2, r3
 8002988:	d800      	bhi.n	800298c <HAL_SPI_TransmitReceive+0x154>
 800298a:	e083      	b.n	8002a94 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_SPI_TransmitReceive+0x168>
 8002994:	2312      	movs	r3, #18
 8002996:	18fb      	adds	r3, r7, r3
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d000      	beq.n	80029a0 <HAL_SPI_TransmitReceive+0x168>
 800299e:	e06d      	b.n	8002a7c <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a4:	881a      	ldrh	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b0:	1c9a      	adds	r2, r3, #2
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029c4:	e05a      	b.n	8002a7c <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2202      	movs	r2, #2
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d11b      	bne.n	8002a0c <HAL_SPI_TransmitReceive+0x1d4>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d016      	beq.n	8002a0c <HAL_SPI_TransmitReceive+0x1d4>
 80029de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d113      	bne.n	8002a0c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e8:	881a      	ldrh	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f4:	1c9a      	adds	r2, r3, #2
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2201      	movs	r2, #1
 8002a14:	4013      	ands	r3, r2
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d11c      	bne.n	8002a54 <HAL_SPI_TransmitReceive+0x21c>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2246      	movs	r2, #70	@ 0x46
 8002a1e:	5a9b      	ldrh	r3, [r3, r2]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d016      	beq.n	8002a54 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a30:	b292      	uxth	r2, r2
 8002a32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a38:	1c9a      	adds	r2, r3, #2
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2246      	movs	r2, #70	@ 0x46
 8002a42:	5a9b      	ldrh	r3, [r3, r2]
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b299      	uxth	r1, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2246      	movs	r2, #70	@ 0x46
 8002a4e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a50:	2301      	movs	r3, #1
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a54:	f7fe f80e 	bl	8000a74 <HAL_GetTick>
 8002a58:	0002      	movs	r2, r0
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d80b      	bhi.n	8002a7c <HAL_SPI_TransmitReceive+0x244>
 8002a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a66:	3301      	adds	r3, #1
 8002a68:	d008      	beq.n	8002a7c <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002a6a:	2323      	movs	r3, #35	@ 0x23
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	2203      	movs	r2, #3
 8002a70:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	225d      	movs	r2, #93	@ 0x5d
 8002a76:	2101      	movs	r1, #1
 8002a78:	5499      	strb	r1, [r3, r2]
        goto error;
 8002a7a:	e0b1      	b.n	8002be0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d19f      	bne.n	80029c6 <HAL_SPI_TransmitReceive+0x18e>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2246      	movs	r2, #70	@ 0x46
 8002a8a:	5a9b      	ldrh	r3, [r3, r2]
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d199      	bne.n	80029c6 <HAL_SPI_TransmitReceive+0x18e>
 8002a92:	e089      	b.n	8002ba8 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_SPI_TransmitReceive+0x270>
 8002a9c:	2312      	movs	r3, #18
 8002a9e:	18fb      	adds	r3, r7, r3
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d000      	beq.n	8002aa8 <HAL_SPI_TransmitReceive+0x270>
 8002aa6:	e074      	b.n	8002b92 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	330c      	adds	r3, #12
 8002ab2:	7812      	ldrb	r2, [r2, #0]
 8002ab4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ace:	e060      	b.n	8002b92 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d11c      	bne.n	8002b18 <HAL_SPI_TransmitReceive+0x2e0>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d017      	beq.n	8002b18 <HAL_SPI_TransmitReceive+0x2e0>
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d114      	bne.n	8002b18 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	330c      	adds	r3, #12
 8002af8:	7812      	ldrb	r2, [r2, #0]
 8002afa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d11e      	bne.n	8002b64 <HAL_SPI_TransmitReceive+0x32c>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2246      	movs	r2, #70	@ 0x46
 8002b2a:	5a9b      	ldrh	r3, [r3, r2]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d018      	beq.n	8002b64 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	330c      	adds	r3, #12
 8002b38:	001a      	movs	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3e:	7812      	ldrb	r2, [r2, #0]
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2246      	movs	r2, #70	@ 0x46
 8002b52:	5a9b      	ldrh	r3, [r3, r2]
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b299      	uxth	r1, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2246      	movs	r2, #70	@ 0x46
 8002b5e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b60:	2301      	movs	r3, #1
 8002b62:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b64:	f7fd ff86 	bl	8000a74 <HAL_GetTick>
 8002b68:	0002      	movs	r2, r0
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d802      	bhi.n	8002b7a <HAL_SPI_TransmitReceive+0x342>
 8002b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b76:	3301      	adds	r3, #1
 8002b78:	d102      	bne.n	8002b80 <HAL_SPI_TransmitReceive+0x348>
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d108      	bne.n	8002b92 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002b80:	2323      	movs	r3, #35	@ 0x23
 8002b82:	18fb      	adds	r3, r7, r3
 8002b84:	2203      	movs	r2, #3
 8002b86:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	225d      	movs	r2, #93	@ 0x5d
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	5499      	strb	r1, [r3, r2]
        goto error;
 8002b90:	e026      	b.n	8002be0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d199      	bne.n	8002ad0 <HAL_SPI_TransmitReceive+0x298>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2246      	movs	r2, #70	@ 0x46
 8002ba0:	5a9b      	ldrh	r3, [r3, r2]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d193      	bne.n	8002ad0 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ba8:	69fa      	ldr	r2, [r7, #28]
 8002baa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f000 f9b2 	bl	8002f18 <SPI_EndRxTxTransaction>
 8002bb4:	1e03      	subs	r3, r0, #0
 8002bb6:	d006      	beq.n	8002bc6 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8002bb8:	2323      	movs	r3, #35	@ 0x23
 8002bba:	18fb      	adds	r3, r7, r3
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d004      	beq.n	8002bd8 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8002bce:	2323      	movs	r3, #35	@ 0x23
 8002bd0:	18fb      	adds	r3, r7, r3
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	e003      	b.n	8002be0 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	225d      	movs	r2, #93	@ 0x5d
 8002bdc:	2101      	movs	r1, #1
 8002bde:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	225c      	movs	r2, #92	@ 0x5c
 8002be4:	2100      	movs	r1, #0
 8002be6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002be8:	2323      	movs	r3, #35	@ 0x23
 8002bea:	18fb      	adds	r3, r7, r3
 8002bec:	781b      	ldrb	r3, [r3, #0]
}
 8002bee:	0018      	movs	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	b00a      	add	sp, #40	@ 0x28
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	46c0      	nop			@ (mov r8, r8)
 8002bf8:	ffffefff 	.word	0xffffefff

08002bfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	1dfb      	adds	r3, r7, #7
 8002c0a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c0c:	f7fd ff32 	bl	8000a74 <HAL_GetTick>
 8002c10:	0002      	movs	r2, r0
 8002c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	18d3      	adds	r3, r2, r3
 8002c1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c1c:	f7fd ff2a 	bl	8000a74 <HAL_GetTick>
 8002c20:	0003      	movs	r3, r0
 8002c22:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c24:	4b3a      	ldr	r3, [pc, #232]	@ (8002d10 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	015b      	lsls	r3, r3, #5
 8002c2a:	0d1b      	lsrs	r3, r3, #20
 8002c2c:	69fa      	ldr	r2, [r7, #28]
 8002c2e:	4353      	muls	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c32:	e058      	b.n	8002ce6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	3301      	adds	r3, #1
 8002c38:	d055      	beq.n	8002ce6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c3a:	f7fd ff1b 	bl	8000a74 <HAL_GetTick>
 8002c3e:	0002      	movs	r2, r0
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	69fa      	ldr	r2, [r7, #28]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d902      	bls.n	8002c50 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d142      	bne.n	8002cd6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	21e0      	movs	r1, #224	@ 0xe0
 8002c5c:	438a      	bics	r2, r1
 8002c5e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	2382      	movs	r3, #130	@ 0x82
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d113      	bne.n	8002c94 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	2380      	movs	r3, #128	@ 0x80
 8002c72:	021b      	lsls	r3, r3, #8
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d005      	beq.n	8002c84 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	2380      	movs	r3, #128	@ 0x80
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d107      	bne.n	8002c94 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2140      	movs	r1, #64	@ 0x40
 8002c90:	438a      	bics	r2, r1
 8002c92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c98:	2380      	movs	r3, #128	@ 0x80
 8002c9a:	019b      	lsls	r3, r3, #6
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d110      	bne.n	8002cc2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	491a      	ldr	r1, [pc, #104]	@ (8002d14 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002cac:	400a      	ands	r2, r1
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2180      	movs	r1, #128	@ 0x80
 8002cbc:	0189      	lsls	r1, r1, #6
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	225d      	movs	r2, #93	@ 0x5d
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	225c      	movs	r2, #92	@ 0x5c
 8002cce:	2100      	movs	r1, #0
 8002cd0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e017      	b.n	8002d06 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	425a      	negs	r2, r3
 8002cf6:	4153      	adcs	r3, r2
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	001a      	movs	r2, r3
 8002cfc:	1dfb      	adds	r3, r7, #7
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d197      	bne.n	8002c34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	0018      	movs	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	b008      	add	sp, #32
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	46c0      	nop			@ (mov r8, r8)
 8002d10:	20000008 	.word	0x20000008
 8002d14:	ffffdfff 	.word	0xffffdfff

08002d18 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08a      	sub	sp, #40	@ 0x28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002d26:	2317      	movs	r3, #23
 8002d28:	18fb      	adds	r3, r7, r3
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002d2e:	f7fd fea1 	bl	8000a74 <HAL_GetTick>
 8002d32:	0002      	movs	r2, r0
 8002d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	18d3      	adds	r3, r2, r3
 8002d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002d3e:	f7fd fe99 	bl	8000a74 <HAL_GetTick>
 8002d42:	0003      	movs	r3, r0
 8002d44:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	330c      	adds	r3, #12
 8002d4c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002d4e:	4b41      	ldr	r3, [pc, #260]	@ (8002e54 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	0013      	movs	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	189b      	adds	r3, r3, r2
 8002d58:	00da      	lsls	r2, r3, #3
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	0d1b      	lsrs	r3, r3, #20
 8002d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d60:	4353      	muls	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002d64:	e068      	b.n	8002e38 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	23c0      	movs	r3, #192	@ 0xc0
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d10a      	bne.n	8002d86 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d107      	bne.n	8002d86 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	2117      	movs	r1, #23
 8002d7e:	187b      	adds	r3, r7, r1
 8002d80:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002d82:	187b      	adds	r3, r7, r1
 8002d84:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	d055      	beq.n	8002e38 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d8c:	f7fd fe72 	bl	8000a74 <HAL_GetTick>
 8002d90:	0002      	movs	r2, r0
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d902      	bls.n	8002da2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d142      	bne.n	8002e28 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	21e0      	movs	r1, #224	@ 0xe0
 8002dae:	438a      	bics	r2, r1
 8002db0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	2382      	movs	r3, #130	@ 0x82
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d113      	bne.n	8002de6 <SPI_WaitFifoStateUntilTimeout+0xce>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	2380      	movs	r3, #128	@ 0x80
 8002dc4:	021b      	lsls	r3, r3, #8
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d005      	beq.n	8002dd6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	2380      	movs	r3, #128	@ 0x80
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d107      	bne.n	8002de6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2140      	movs	r1, #64	@ 0x40
 8002de2:	438a      	bics	r2, r1
 8002de4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dea:	2380      	movs	r3, #128	@ 0x80
 8002dec:	019b      	lsls	r3, r3, #6
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d110      	bne.n	8002e14 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4916      	ldr	r1, [pc, #88]	@ (8002e58 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002dfe:	400a      	ands	r2, r1
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2180      	movs	r1, #128	@ 0x80
 8002e0e:	0189      	lsls	r1, r1, #6
 8002e10:	430a      	orrs	r2, r1
 8002e12:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	225d      	movs	r2, #93	@ 0x5d
 8002e18:	2101      	movs	r1, #1
 8002e1a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	225c      	movs	r2, #92	@ 0x5c
 8002e20:	2100      	movs	r1, #0
 8002e22:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e010      	b.n	8002e4a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	3b01      	subs	r3, #1
 8002e36:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	4013      	ands	r3, r2
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d18e      	bne.n	8002d66 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	b00a      	add	sp, #40	@ 0x28
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	46c0      	nop			@ (mov r8, r8)
 8002e54:	20000008 	.word	0x20000008
 8002e58:	ffffdfff 	.word	0xffffdfff

08002e5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af02      	add	r7, sp, #8
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	2382      	movs	r3, #130	@ 0x82
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d113      	bne.n	8002e9c <SPI_EndRxTransaction+0x40>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	2380      	movs	r3, #128	@ 0x80
 8002e7a:	021b      	lsls	r3, r3, #8
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d005      	beq.n	8002e8c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	2380      	movs	r3, #128	@ 0x80
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d107      	bne.n	8002e9c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2140      	movs	r1, #64	@ 0x40
 8002e98:	438a      	bics	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	0013      	movs	r3, r2
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2180      	movs	r1, #128	@ 0x80
 8002eaa:	f7ff fea7 	bl	8002bfc <SPI_WaitFlagStateUntilTimeout>
 8002eae:	1e03      	subs	r3, r0, #0
 8002eb0:	d007      	beq.n	8002ec2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e026      	b.n	8002f10 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	2382      	movs	r3, #130	@ 0x82
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d11f      	bne.n	8002f0e <SPI_EndRxTransaction+0xb2>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	2380      	movs	r3, #128	@ 0x80
 8002ed4:	021b      	lsls	r3, r3, #8
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d005      	beq.n	8002ee6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	2380      	movs	r3, #128	@ 0x80
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d113      	bne.n	8002f0e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	23c0      	movs	r3, #192	@ 0xc0
 8002eea:	00d9      	lsls	r1, r3, #3
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	0013      	movs	r3, r2
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f7ff ff0f 	bl	8002d18 <SPI_WaitFifoStateUntilTimeout>
 8002efa:	1e03      	subs	r3, r0, #0
 8002efc:	d007      	beq.n	8002f0e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f02:	2220      	movs	r2, #32
 8002f04:	431a      	orrs	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e000      	b.n	8002f10 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	0018      	movs	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b004      	add	sp, #16
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	23c0      	movs	r3, #192	@ 0xc0
 8002f28:	0159      	lsls	r1, r3, #5
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	0013      	movs	r3, r2
 8002f32:	2200      	movs	r2, #0
 8002f34:	f7ff fef0 	bl	8002d18 <SPI_WaitFifoStateUntilTimeout>
 8002f38:	1e03      	subs	r3, r0, #0
 8002f3a:	d007      	beq.n	8002f4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f40:	2220      	movs	r2, #32
 8002f42:	431a      	orrs	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e027      	b.n	8002f9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	0013      	movs	r3, r2
 8002f56:	2200      	movs	r2, #0
 8002f58:	2180      	movs	r1, #128	@ 0x80
 8002f5a:	f7ff fe4f 	bl	8002bfc <SPI_WaitFlagStateUntilTimeout>
 8002f5e:	1e03      	subs	r3, r0, #0
 8002f60:	d007      	beq.n	8002f72 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f66:	2220      	movs	r2, #32
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e014      	b.n	8002f9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	23c0      	movs	r3, #192	@ 0xc0
 8002f76:	00d9      	lsls	r1, r3, #3
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	0013      	movs	r3, r2
 8002f80:	2200      	movs	r2, #0
 8002f82:	f7ff fec9 	bl	8002d18 <SPI_WaitFifoStateUntilTimeout>
 8002f86:	1e03      	subs	r3, r0, #0
 8002f88:	d007      	beq.n	8002f9a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f8e:	2220      	movs	r2, #32
 8002f90:	431a      	orrs	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e000      	b.n	8002f9c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b004      	add	sp, #16
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <memset>:
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	1882      	adds	r2, r0, r2
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d100      	bne.n	8002fae <memset+0xa>
 8002fac:	4770      	bx	lr
 8002fae:	7019      	strb	r1, [r3, #0]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	e7f9      	b.n	8002fa8 <memset+0x4>

08002fb4 <__libc_init_array>:
 8002fb4:	b570      	push	{r4, r5, r6, lr}
 8002fb6:	2600      	movs	r6, #0
 8002fb8:	4c0c      	ldr	r4, [pc, #48]	@ (8002fec <__libc_init_array+0x38>)
 8002fba:	4d0d      	ldr	r5, [pc, #52]	@ (8002ff0 <__libc_init_array+0x3c>)
 8002fbc:	1b64      	subs	r4, r4, r5
 8002fbe:	10a4      	asrs	r4, r4, #2
 8002fc0:	42a6      	cmp	r6, r4
 8002fc2:	d109      	bne.n	8002fd8 <__libc_init_array+0x24>
 8002fc4:	2600      	movs	r6, #0
 8002fc6:	f000 f819 	bl	8002ffc <_init>
 8002fca:	4c0a      	ldr	r4, [pc, #40]	@ (8002ff4 <__libc_init_array+0x40>)
 8002fcc:	4d0a      	ldr	r5, [pc, #40]	@ (8002ff8 <__libc_init_array+0x44>)
 8002fce:	1b64      	subs	r4, r4, r5
 8002fd0:	10a4      	asrs	r4, r4, #2
 8002fd2:	42a6      	cmp	r6, r4
 8002fd4:	d105      	bne.n	8002fe2 <__libc_init_array+0x2e>
 8002fd6:	bd70      	pop	{r4, r5, r6, pc}
 8002fd8:	00b3      	lsls	r3, r6, #2
 8002fda:	58eb      	ldr	r3, [r5, r3]
 8002fdc:	4798      	blx	r3
 8002fde:	3601      	adds	r6, #1
 8002fe0:	e7ee      	b.n	8002fc0 <__libc_init_array+0xc>
 8002fe2:	00b3      	lsls	r3, r6, #2
 8002fe4:	58eb      	ldr	r3, [r5, r3]
 8002fe6:	4798      	blx	r3
 8002fe8:	3601      	adds	r6, #1
 8002fea:	e7f2      	b.n	8002fd2 <__libc_init_array+0x1e>
 8002fec:	08003044 	.word	0x08003044
 8002ff0:	08003044 	.word	0x08003044
 8002ff4:	08003048 	.word	0x08003048
 8002ff8:	08003044 	.word	0x08003044

08002ffc <_init>:
 8002ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffe:	46c0      	nop			@ (mov r8, r8)
 8003000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003002:	bc08      	pop	{r3}
 8003004:	469e      	mov	lr, r3
 8003006:	4770      	bx	lr

08003008 <_fini>:
 8003008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300a:	46c0      	nop			@ (mov r8, r8)
 800300c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300e:	bc08      	pop	{r3}
 8003010:	469e      	mov	lr, r3
 8003012:	4770      	bx	lr
