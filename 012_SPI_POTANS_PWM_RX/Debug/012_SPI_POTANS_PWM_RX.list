
012_SPI_POTANS_PWM_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003458  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003518  08003518  00004518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003548  08003548  00005014  2**0
                  CONTENTS
  4 .ARM          00000000  08003548  08003548  00005014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003548  08003548  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003548  08003548  00004548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800354c  0800354c  0000454c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003550  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000014  08003564  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08003564  000050e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098b2  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001934  00000000  00000000  0000e8ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00010228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b0  00000000  00000000  00010d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fe93  00000000  00000000  00011608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c97d  00000000  00000000  0002149b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00062778  00000000  00000000  0002de18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00090590  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002838  00000000  00000000  000905d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00092e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003500 	.word	0x08003500

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08003500 	.word	0x08003500

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fc16 	bl	8000a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f834 	bl	8000294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f964 	bl	80004f8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000230:	f000 f870 	bl	8000314 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000234:	f000 f8ac 	bl	8000390 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  	  nrf24_config(40, 1);
 8000238:	2101      	movs	r1, #1
 800023a:	2028      	movs	r0, #40	@ 0x28
 800023c:	f000 f9c6 	bl	80005cc <nrf24_config>
      nrf24_rx_address(rx_address);
 8000240:	4b11      	ldr	r3, [pc, #68]	@ (8000288 <main+0x68>)
 8000242:	0018      	movs	r0, r3
 8000244:	f000 f9ef 	bl	8000626 <nrf24_rx_address>
      nrf24_rx_mode();
 8000248:	f000 f9fb 	bl	8000642 <nrf24_rx_mode>
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800024c:	4b0f      	ldr	r3, [pc, #60]	@ (800028c <main+0x6c>)
 800024e:	2100      	movs	r1, #0
 8000250:	0018      	movs	r0, r3
 8000252:	f002 fae9 	bl	8002828 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	   if (nrf24_dataReady()) // Veri var mı?
 8000256:	f000 fa02 	bl	800065e <nrf24_dataReady>
 800025a:	1e03      	subs	r3, r0, #0
 800025c:	d0fb      	beq.n	8000256 <main+0x36>
	        {
	            nrf24_getData((uint8_t*)rx_data, 1); // Gelen veriyi al
 800025e:	4b0c      	ldr	r3, [pc, #48]	@ (8000290 <main+0x70>)
 8000260:	2101      	movs	r1, #1
 8000262:	0018      	movs	r0, r3
 8000264:	f000 fa0e 	bl	8000684 <nrf24_getData>
	            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, rx_data[0]);
 8000268:	4b09      	ldr	r3, [pc, #36]	@ (8000290 <main+0x70>)
 800026a:	781a      	ldrb	r2, [r3, #0]
 800026c:	4b07      	ldr	r3, [pc, #28]	@ (800028c <main+0x6c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	635a      	str	r2, [r3, #52]	@ 0x34
	            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000272:	2390      	movs	r3, #144	@ 0x90
 8000274:	05db      	lsls	r3, r3, #23
 8000276:	2120      	movs	r1, #32
 8000278:	0018      	movs	r0, r3
 800027a:	f000 feb4 	bl	8000fe6 <HAL_GPIO_TogglePin>
	             HAL_Delay(50);
 800027e:	2032      	movs	r0, #50	@ 0x32
 8000280:	f000 fc4c 	bl	8000b1c <HAL_Delay>
	   if (nrf24_dataReady()) // Veri var mı?
 8000284:	e7e7      	b.n	8000256 <main+0x36>
 8000286:	46c0      	nop			@ (mov r8, r8)
 8000288:	20000000 	.word	0x20000000
 800028c:	20000094 	.word	0x20000094
 8000290:	200000dc 	.word	0x200000dc

08000294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000294:	b590      	push	{r4, r7, lr}
 8000296:	b091      	sub	sp, #68	@ 0x44
 8000298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	2410      	movs	r4, #16
 800029c:	193b      	adds	r3, r7, r4
 800029e:	0018      	movs	r0, r3
 80002a0:	2330      	movs	r3, #48	@ 0x30
 80002a2:	001a      	movs	r2, r3
 80002a4:	2100      	movs	r1, #0
 80002a6:	f003 f8ff 	bl	80034a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002aa:	003b      	movs	r3, r7
 80002ac:	0018      	movs	r0, r3
 80002ae:	2310      	movs	r3, #16
 80002b0:	001a      	movs	r2, r3
 80002b2:	2100      	movs	r1, #0
 80002b4:	f003 f8f8 	bl	80034a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b8:	0021      	movs	r1, r4
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2202      	movs	r2, #2
 80002be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2201      	movs	r2, #1
 80002c4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2210      	movs	r2, #16
 80002ca:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2200      	movs	r2, #0
 80002d0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	0018      	movs	r0, r3
 80002d6:	f000 fea1 	bl	800101c <HAL_RCC_OscConfig>
 80002da:	1e03      	subs	r3, r0, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002de:	f000 f96f 	bl	80005c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e2:	003b      	movs	r3, r7
 80002e4:	2207      	movs	r2, #7
 80002e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002e8:	003b      	movs	r3, r7
 80002ea:	2200      	movs	r2, #0
 80002ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ee:	003b      	movs	r3, r7
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f4:	003b      	movs	r3, r7
 80002f6:	2200      	movs	r2, #0
 80002f8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fa:	003b      	movs	r3, r7
 80002fc:	2100      	movs	r1, #0
 80002fe:	0018      	movs	r0, r3
 8000300:	f001 f9a6 	bl	8001650 <HAL_RCC_ClockConfig>
 8000304:	1e03      	subs	r3, r0, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000308:	f000 f95a 	bl	80005c0 <Error_Handler>
  }
}
 800030c:	46c0      	nop			@ (mov r8, r8)
 800030e:	46bd      	mov	sp, r7
 8000310:	b011      	add	sp, #68	@ 0x44
 8000312:	bd90      	pop	{r4, r7, pc}

08000314 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000318:	4b1b      	ldr	r3, [pc, #108]	@ (8000388 <MX_SPI1_Init+0x74>)
 800031a:	4a1c      	ldr	r2, [pc, #112]	@ (800038c <MX_SPI1_Init+0x78>)
 800031c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800031e:	4b1a      	ldr	r3, [pc, #104]	@ (8000388 <MX_SPI1_Init+0x74>)
 8000320:	2282      	movs	r2, #130	@ 0x82
 8000322:	0052      	lsls	r2, r2, #1
 8000324:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000326:	4b18      	ldr	r3, [pc, #96]	@ (8000388 <MX_SPI1_Init+0x74>)
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800032c:	4b16      	ldr	r3, [pc, #88]	@ (8000388 <MX_SPI1_Init+0x74>)
 800032e:	22e0      	movs	r2, #224	@ 0xe0
 8000330:	00d2      	lsls	r2, r2, #3
 8000332:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000334:	4b14      	ldr	r3, [pc, #80]	@ (8000388 <MX_SPI1_Init+0x74>)
 8000336:	2200      	movs	r2, #0
 8000338:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800033a:	4b13      	ldr	r3, [pc, #76]	@ (8000388 <MX_SPI1_Init+0x74>)
 800033c:	2200      	movs	r2, #0
 800033e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000340:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <MX_SPI1_Init+0x74>)
 8000342:	2280      	movs	r2, #128	@ 0x80
 8000344:	0092      	lsls	r2, r2, #2
 8000346:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000348:	4b0f      	ldr	r3, [pc, #60]	@ (8000388 <MX_SPI1_Init+0x74>)
 800034a:	2208      	movs	r2, #8
 800034c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800034e:	4b0e      	ldr	r3, [pc, #56]	@ (8000388 <MX_SPI1_Init+0x74>)
 8000350:	2200      	movs	r2, #0
 8000352:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000354:	4b0c      	ldr	r3, [pc, #48]	@ (8000388 <MX_SPI1_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800035a:	4b0b      	ldr	r3, [pc, #44]	@ (8000388 <MX_SPI1_Init+0x74>)
 800035c:	2200      	movs	r2, #0
 800035e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000360:	4b09      	ldr	r3, [pc, #36]	@ (8000388 <MX_SPI1_Init+0x74>)
 8000362:	2207      	movs	r2, #7
 8000364:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000366:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <MX_SPI1_Init+0x74>)
 8000368:	2200      	movs	r2, #0
 800036a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <MX_SPI1_Init+0x74>)
 800036e:	2208      	movs	r2, #8
 8000370:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000372:	4b05      	ldr	r3, [pc, #20]	@ (8000388 <MX_SPI1_Init+0x74>)
 8000374:	0018      	movs	r0, r3
 8000376:	f001 fa8f 	bl	8001898 <HAL_SPI_Init>
 800037a:	1e03      	subs	r3, r0, #0
 800037c:	d001      	beq.n	8000382 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800037e:	f000 f91f 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000382:	46c0      	nop			@ (mov r8, r8)
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000030 	.word	0x20000030
 800038c:	40013000 	.word	0x40013000

08000390 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b096      	sub	sp, #88	@ 0x58
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000396:	2348      	movs	r3, #72	@ 0x48
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	0018      	movs	r0, r3
 800039c:	2310      	movs	r3, #16
 800039e:	001a      	movs	r2, r3
 80003a0:	2100      	movs	r1, #0
 80003a2:	f003 f881 	bl	80034a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a6:	2340      	movs	r3, #64	@ 0x40
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	0018      	movs	r0, r3
 80003ac:	2308      	movs	r3, #8
 80003ae:	001a      	movs	r2, r3
 80003b0:	2100      	movs	r1, #0
 80003b2:	f003 f879 	bl	80034a8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003b6:	2324      	movs	r3, #36	@ 0x24
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	0018      	movs	r0, r3
 80003bc:	231c      	movs	r3, #28
 80003be:	001a      	movs	r2, r3
 80003c0:	2100      	movs	r1, #0
 80003c2:	f003 f871 	bl	80034a8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	0018      	movs	r0, r3
 80003ca:	2320      	movs	r3, #32
 80003cc:	001a      	movs	r2, r3
 80003ce:	2100      	movs	r1, #0
 80003d0:	f003 f86a 	bl	80034a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003d4:	4b46      	ldr	r3, [pc, #280]	@ (80004f0 <MX_TIM1_Init+0x160>)
 80003d6:	4a47      	ldr	r2, [pc, #284]	@ (80004f4 <MX_TIM1_Init+0x164>)
 80003d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 80003da:	4b45      	ldr	r3, [pc, #276]	@ (80004f0 <MX_TIM1_Init+0x160>)
 80003dc:	2207      	movs	r2, #7
 80003de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e0:	4b43      	ldr	r3, [pc, #268]	@ (80004f0 <MX_TIM1_Init+0x160>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 80003e6:	4b42      	ldr	r3, [pc, #264]	@ (80004f0 <MX_TIM1_Init+0x160>)
 80003e8:	22ff      	movs	r2, #255	@ 0xff
 80003ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ec:	4b40      	ldr	r3, [pc, #256]	@ (80004f0 <MX_TIM1_Init+0x160>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003f2:	4b3f      	ldr	r3, [pc, #252]	@ (80004f0 <MX_TIM1_Init+0x160>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003f8:	4b3d      	ldr	r3, [pc, #244]	@ (80004f0 <MX_TIM1_Init+0x160>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003fe:	4b3c      	ldr	r3, [pc, #240]	@ (80004f0 <MX_TIM1_Init+0x160>)
 8000400:	0018      	movs	r0, r3
 8000402:	f002 f969 	bl	80026d8 <HAL_TIM_Base_Init>
 8000406:	1e03      	subs	r3, r0, #0
 8000408:	d001      	beq.n	800040e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800040a:	f000 f8d9 	bl	80005c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800040e:	2148      	movs	r1, #72	@ 0x48
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2280      	movs	r2, #128	@ 0x80
 8000414:	0152      	lsls	r2, r2, #5
 8000416:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000418:	187a      	adds	r2, r7, r1
 800041a:	4b35      	ldr	r3, [pc, #212]	@ (80004f0 <MX_TIM1_Init+0x160>)
 800041c:	0011      	movs	r1, r2
 800041e:	0018      	movs	r0, r3
 8000420:	f002 fb7a 	bl	8002b18 <HAL_TIM_ConfigClockSource>
 8000424:	1e03      	subs	r3, r0, #0
 8000426:	d001      	beq.n	800042c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000428:	f000 f8ca 	bl	80005c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800042c:	4b30      	ldr	r3, [pc, #192]	@ (80004f0 <MX_TIM1_Init+0x160>)
 800042e:	0018      	movs	r0, r3
 8000430:	f002 f9a2 	bl	8002778 <HAL_TIM_PWM_Init>
 8000434:	1e03      	subs	r3, r0, #0
 8000436:	d001      	beq.n	800043c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000438:	f000 f8c2 	bl	80005c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800043c:	2140      	movs	r1, #64	@ 0x40
 800043e:	187b      	adds	r3, r7, r1
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000444:	187b      	adds	r3, r7, r1
 8000446:	2200      	movs	r2, #0
 8000448:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800044a:	187a      	adds	r2, r7, r1
 800044c:	4b28      	ldr	r3, [pc, #160]	@ (80004f0 <MX_TIM1_Init+0x160>)
 800044e:	0011      	movs	r1, r2
 8000450:	0018      	movs	r0, r3
 8000452:	f002 ff73 	bl	800333c <HAL_TIMEx_MasterConfigSynchronization>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d001      	beq.n	800045e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800045a:	f000 f8b1 	bl	80005c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800045e:	2124      	movs	r1, #36	@ 0x24
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2260      	movs	r2, #96	@ 0x60
 8000464:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000466:	187b      	adds	r3, r7, r1
 8000468:	2200      	movs	r2, #0
 800046a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800046c:	187b      	adds	r3, r7, r1
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000472:	187b      	adds	r3, r7, r1
 8000474:	2200      	movs	r2, #0
 8000476:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000478:	187b      	adds	r3, r7, r1
 800047a:	2200      	movs	r2, #0
 800047c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800047e:	187b      	adds	r3, r7, r1
 8000480:	2200      	movs	r2, #0
 8000482:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000484:	187b      	adds	r3, r7, r1
 8000486:	2200      	movs	r2, #0
 8000488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800048a:	1879      	adds	r1, r7, r1
 800048c:	4b18      	ldr	r3, [pc, #96]	@ (80004f0 <MX_TIM1_Init+0x160>)
 800048e:	2200      	movs	r2, #0
 8000490:	0018      	movs	r0, r3
 8000492:	f002 fa7b 	bl	800298c <HAL_TIM_PWM_ConfigChannel>
 8000496:	1e03      	subs	r3, r0, #0
 8000498:	d001      	beq.n	800049e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800049a:	f000 f891 	bl	80005c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	2200      	movs	r2, #0
 80004a8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	2200      	movs	r2, #0
 80004b4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	2200      	movs	r2, #0
 80004ba:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	2280      	movs	r2, #128	@ 0x80
 80004c0:	0192      	lsls	r2, r2, #6
 80004c2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	2200      	movs	r2, #0
 80004c8:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004ca:	1d3a      	adds	r2, r7, #4
 80004cc:	4b08      	ldr	r3, [pc, #32]	@ (80004f0 <MX_TIM1_Init+0x160>)
 80004ce:	0011      	movs	r1, r2
 80004d0:	0018      	movs	r0, r3
 80004d2:	f002 ff8b 	bl	80033ec <HAL_TIMEx_ConfigBreakDeadTime>
 80004d6:	1e03      	subs	r3, r0, #0
 80004d8:	d001      	beq.n	80004de <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 80004da:	f000 f871 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004de:	4b04      	ldr	r3, [pc, #16]	@ (80004f0 <MX_TIM1_Init+0x160>)
 80004e0:	0018      	movs	r0, r3
 80004e2:	f000 fa2f 	bl	8000944 <HAL_TIM_MspPostInit>

}
 80004e6:	46c0      	nop			@ (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	b016      	add	sp, #88	@ 0x58
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)
 80004f0:	20000094 	.word	0x20000094
 80004f4:	40012c00 	.word	0x40012c00

080004f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b089      	sub	sp, #36	@ 0x24
 80004fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fe:	240c      	movs	r4, #12
 8000500:	193b      	adds	r3, r7, r4
 8000502:	0018      	movs	r0, r3
 8000504:	2314      	movs	r3, #20
 8000506:	001a      	movs	r2, r3
 8000508:	2100      	movs	r1, #0
 800050a:	f002 ffcd 	bl	80034a8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	4b2a      	ldr	r3, [pc, #168]	@ (80005b8 <MX_GPIO_Init+0xc0>)
 8000510:	695a      	ldr	r2, [r3, #20]
 8000512:	4b29      	ldr	r3, [pc, #164]	@ (80005b8 <MX_GPIO_Init+0xc0>)
 8000514:	2180      	movs	r1, #128	@ 0x80
 8000516:	0289      	lsls	r1, r1, #10
 8000518:	430a      	orrs	r2, r1
 800051a:	615a      	str	r2, [r3, #20]
 800051c:	4b26      	ldr	r3, [pc, #152]	@ (80005b8 <MX_GPIO_Init+0xc0>)
 800051e:	695a      	ldr	r2, [r3, #20]
 8000520:	2380      	movs	r3, #128	@ 0x80
 8000522:	029b      	lsls	r3, r3, #10
 8000524:	4013      	ands	r3, r2
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	4b23      	ldr	r3, [pc, #140]	@ (80005b8 <MX_GPIO_Init+0xc0>)
 800052c:	695a      	ldr	r2, [r3, #20]
 800052e:	4b22      	ldr	r3, [pc, #136]	@ (80005b8 <MX_GPIO_Init+0xc0>)
 8000530:	2180      	movs	r1, #128	@ 0x80
 8000532:	02c9      	lsls	r1, r1, #11
 8000534:	430a      	orrs	r2, r1
 8000536:	615a      	str	r2, [r3, #20]
 8000538:	4b1f      	ldr	r3, [pc, #124]	@ (80005b8 <MX_GPIO_Init+0xc0>)
 800053a:	695a      	ldr	r2, [r3, #20]
 800053c:	2380      	movs	r3, #128	@ 0x80
 800053e:	02db      	lsls	r3, r3, #11
 8000540:	4013      	ands	r3, r2
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000546:	2390      	movs	r3, #144	@ 0x90
 8000548:	05db      	lsls	r3, r3, #23
 800054a:	2200      	movs	r2, #0
 800054c:	2120      	movs	r1, #32
 800054e:	0018      	movs	r0, r3
 8000550:	f000 fd2c 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_9, GPIO_PIN_RESET);
 8000554:	23c0      	movs	r3, #192	@ 0xc0
 8000556:	00db      	lsls	r3, r3, #3
 8000558:	4818      	ldr	r0, [pc, #96]	@ (80005bc <MX_GPIO_Init+0xc4>)
 800055a:	2200      	movs	r2, #0
 800055c:	0019      	movs	r1, r3
 800055e:	f000 fd25 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000562:	193b      	adds	r3, r7, r4
 8000564:	2220      	movs	r2, #32
 8000566:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000568:	193b      	adds	r3, r7, r4
 800056a:	2201      	movs	r2, #1
 800056c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	193b      	adds	r3, r7, r4
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	193b      	adds	r3, r7, r4
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057a:	193a      	adds	r2, r7, r4
 800057c:	2390      	movs	r3, #144	@ 0x90
 800057e:	05db      	lsls	r3, r3, #23
 8000580:	0011      	movs	r1, r2
 8000582:	0018      	movs	r0, r3
 8000584:	f000 fba2 	bl	8000ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000588:	0021      	movs	r1, r4
 800058a:	187b      	adds	r3, r7, r1
 800058c:	22c0      	movs	r2, #192	@ 0xc0
 800058e:	00d2      	lsls	r2, r2, #3
 8000590:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2201      	movs	r2, #1
 8000596:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2203      	movs	r2, #3
 80005a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	4a05      	ldr	r2, [pc, #20]	@ (80005bc <MX_GPIO_Init+0xc4>)
 80005a8:	0019      	movs	r1, r3
 80005aa:	0010      	movs	r0, r2
 80005ac:	f000 fb8e 	bl	8000ccc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005b0:	46c0      	nop			@ (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b009      	add	sp, #36	@ 0x24
 80005b6:	bd90      	pop	{r4, r7, pc}
 80005b8:	40021000 	.word	0x40021000
 80005bc:	48000400 	.word	0x48000400

080005c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c4:	b672      	cpsid	i
}
 80005c6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c8:	46c0      	nop			@ (mov r8, r8)
 80005ca:	e7fd      	b.n	80005c8 <Error_Handler+0x8>

080005cc <nrf24_config>:
    HAL_Delay(5);
}

// **RF Modülü Konfigürasyonu**
void nrf24_config(uint8_t channel, uint8_t payloadSize)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	0002      	movs	r2, r0
 80005d4:	1dfb      	adds	r3, r7, #7
 80005d6:	701a      	strb	r2, [r3, #0]
 80005d8:	1dbb      	adds	r3, r7, #6
 80005da:	1c0a      	adds	r2, r1, #0
 80005dc:	701a      	strb	r2, [r3, #0]
    nrf24_writeRegister(0x05, channel);  // RF Kanalı
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	0019      	movs	r1, r3
 80005e4:	2005      	movs	r0, #5
 80005e6:	f000 f875 	bl	80006d4 <nrf24_writeRegister>
    nrf24_writeRegister(0x11, payloadSize);  // RX Payload boyutu
 80005ea:	1dbb      	adds	r3, r7, #6
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	0019      	movs	r1, r3
 80005f0:	2011      	movs	r0, #17
 80005f2:	f000 f86f 	bl	80006d4 <nrf24_writeRegister>
    nrf24_writeRegister(0x01, 0x01);  // Auto ACK Açık
 80005f6:	2101      	movs	r1, #1
 80005f8:	2001      	movs	r0, #1
 80005fa:	f000 f86b 	bl	80006d4 <nrf24_writeRegister>
    nrf24_writeRegister(0x02, 0x01);  // Data Pipe 0 Aktif
 80005fe:	2101      	movs	r1, #1
 8000600:	2002      	movs	r0, #2
 8000602:	f000 f867 	bl	80006d4 <nrf24_writeRegister>
    nrf24_writeRegister(0x03, 0x03);  // Adres genişliği 5 bayt
 8000606:	2103      	movs	r1, #3
 8000608:	2003      	movs	r0, #3
 800060a:	f000 f863 	bl	80006d4 <nrf24_writeRegister>
    nrf24_writeRegister(0x06, 0x07);  // Data rate: 1Mbps, Güç: 0dBm
 800060e:	2107      	movs	r1, #7
 8000610:	2006      	movs	r0, #6
 8000612:	f000 f85f 	bl	80006d4 <nrf24_writeRegister>
    nrf24_writeRegister(0x00, 0x0E);  // CRC ve güç açık
 8000616:	210e      	movs	r1, #14
 8000618:	2000      	movs	r0, #0
 800061a:	f000 f85b 	bl	80006d4 <nrf24_writeRegister>
}
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b002      	add	sp, #8
 8000624:	bd80      	pop	{r7, pc}

08000626 <nrf24_rx_address>:
    nrf24_writeRegisterMulti(0x0A, address, 5);
}

// **Alıcı Adresi Ayarla**
void nrf24_rx_address(uint8_t *address)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	b082      	sub	sp, #8
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
    nrf24_writeRegisterMulti(0x0A, address, 5);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2205      	movs	r2, #5
 8000632:	0019      	movs	r1, r3
 8000634:	200a      	movs	r0, #10
 8000636:	f000 f875 	bl	8000724 <nrf24_writeRegisterMulti>
}
 800063a:	46c0      	nop			@ (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	b002      	add	sp, #8
 8000640:	bd80      	pop	{r7, pc}

08000642 <nrf24_rx_mode>:
    HAL_Delay(1);
}

// **Alıcı Moduna Geç**
void nrf24_rx_mode(void)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	af00      	add	r7, sp, #0
    nrf24_writeRegister(0x00, 0x0F);
 8000646:	210f      	movs	r1, #15
 8000648:	2000      	movs	r0, #0
 800064a:	f000 f843 	bl	80006d4 <nrf24_writeRegister>
    nrf24_ceHigh();
 800064e:	f000 f8bd 	bl	80007cc <nrf24_ceHigh>
    HAL_Delay(1);
 8000652:	2001      	movs	r0, #1
 8000654:	f000 fa62 	bl	8000b1c <HAL_Delay>
}
 8000658:	46c0      	nop			@ (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <nrf24_dataReady>:
}


// **Gelen Veri Var mı?**
uint8_t nrf24_dataReady(void)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b082      	sub	sp, #8
 8000662:	af00      	add	r7, sp, #0
    uint8_t status;
    nrf24_readRegisterMulti(0x07, &status, 1);
 8000664:	1dfb      	adds	r3, r7, #7
 8000666:	2201      	movs	r2, #1
 8000668:	0019      	movs	r1, r3
 800066a:	2007      	movs	r0, #7
 800066c:	f000 f886 	bl	800077c <nrf24_readRegisterMulti>
    return (status & 0x40); // RX flag kontrolü
 8000670:	1dfb      	adds	r3, r7, #7
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2240      	movs	r2, #64	@ 0x40
 8000676:	4013      	ands	r3, r2
 8000678:	b2db      	uxtb	r3, r3
}
 800067a:	0018      	movs	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	b002      	add	sp, #8
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <nrf24_getData>:

// **Veriyi Oku**
void nrf24_getData(uint8_t *data, uint8_t length)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	000a      	movs	r2, r1
 800068e:	1cfb      	adds	r3, r7, #3
 8000690:	701a      	strb	r2, [r3, #0]
    nrf24_csnLow();
 8000692:	f000 f8b7 	bl	8000804 <nrf24_csnLow>

    // RX FIFO'dan veri okumak için komut gönder
    uint8_t command = NRF24_CMD_R_RX_PAYLOAD;
 8000696:	210f      	movs	r1, #15
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2261      	movs	r2, #97	@ 0x61
 800069c:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&NRF_SPI, &command, 1, 100);
 800069e:	1879      	adds	r1, r7, r1
 80006a0:	480b      	ldr	r0, [pc, #44]	@ (80006d0 <nrf24_getData+0x4c>)
 80006a2:	2364      	movs	r3, #100	@ 0x64
 80006a4:	2201      	movs	r2, #1
 80006a6:	f001 f9af 	bl	8001a08 <HAL_SPI_Transmit>

    // Veriyi oku (length kadar bayt)
    HAL_SPI_Receive(&NRF_SPI, data, length, 100);
 80006aa:	1cfb      	adds	r3, r7, #3
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	6879      	ldr	r1, [r7, #4]
 80006b2:	4807      	ldr	r0, [pc, #28]	@ (80006d0 <nrf24_getData+0x4c>)
 80006b4:	2364      	movs	r3, #100	@ 0x64
 80006b6:	f001 fb07 	bl	8001cc8 <HAL_SPI_Receive>

    nrf24_csnHigh();
 80006ba:	f000 f895 	bl	80007e8 <nrf24_csnHigh>

    // RX flag temizle
    nrf24_writeRegister(0x07, 0x40);
 80006be:	2140      	movs	r1, #64	@ 0x40
 80006c0:	2007      	movs	r0, #7
 80006c2:	f000 f807 	bl	80006d4 <nrf24_writeRegister>
}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b004      	add	sp, #16
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	20000030 	.word	0x20000030

080006d4 <nrf24_writeRegister>:

// **SPI Register Yaz**
static void nrf24_writeRegister(uint8_t reg, uint8_t value)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	0002      	movs	r2, r0
 80006dc:	1dfb      	adds	r3, r7, #7
 80006de:	701a      	strb	r2, [r3, #0]
 80006e0:	1dbb      	adds	r3, r7, #6
 80006e2:	1c0a      	adds	r2, r1, #0
 80006e4:	701a      	strb	r2, [r3, #0]
    nrf24_csnLow();
 80006e6:	f000 f88d 	bl	8000804 <nrf24_csnLow>
    uint8_t command = NRF24_CMD_W_REGISTER | reg;
 80006ea:	1dfb      	adds	r3, r7, #7
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2220      	movs	r2, #32
 80006f0:	4313      	orrs	r3, r2
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	210f      	movs	r1, #15
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&NRF_SPI, &command, 1, 100);
 80006fa:	1879      	adds	r1, r7, r1
 80006fc:	4808      	ldr	r0, [pc, #32]	@ (8000720 <nrf24_writeRegister+0x4c>)
 80006fe:	2364      	movs	r3, #100	@ 0x64
 8000700:	2201      	movs	r2, #1
 8000702:	f001 f981 	bl	8001a08 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&NRF_SPI, &value, 1, 100);
 8000706:	1db9      	adds	r1, r7, #6
 8000708:	4805      	ldr	r0, [pc, #20]	@ (8000720 <nrf24_writeRegister+0x4c>)
 800070a:	2364      	movs	r3, #100	@ 0x64
 800070c:	2201      	movs	r2, #1
 800070e:	f001 f97b 	bl	8001a08 <HAL_SPI_Transmit>
    nrf24_csnHigh();
 8000712:	f000 f869 	bl	80007e8 <nrf24_csnHigh>
}
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b004      	add	sp, #16
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	20000030 	.word	0x20000030

08000724 <nrf24_writeRegisterMulti>:

// **SPI Register Çoklu Yaz**
static void nrf24_writeRegisterMulti(uint8_t reg, uint8_t *data, uint8_t length)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6039      	str	r1, [r7, #0]
 800072c:	0011      	movs	r1, r2
 800072e:	1dfb      	adds	r3, r7, #7
 8000730:	1c02      	adds	r2, r0, #0
 8000732:	701a      	strb	r2, [r3, #0]
 8000734:	1dbb      	adds	r3, r7, #6
 8000736:	1c0a      	adds	r2, r1, #0
 8000738:	701a      	strb	r2, [r3, #0]
    nrf24_csnLow();
 800073a:	f000 f863 	bl	8000804 <nrf24_csnLow>
    uint8_t command = NRF24_CMD_W_REGISTER | reg;
 800073e:	1dfb      	adds	r3, r7, #7
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2220      	movs	r2, #32
 8000744:	4313      	orrs	r3, r2
 8000746:	b2da      	uxtb	r2, r3
 8000748:	210f      	movs	r1, #15
 800074a:	187b      	adds	r3, r7, r1
 800074c:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&NRF_SPI, &command, 1, 100);
 800074e:	1879      	adds	r1, r7, r1
 8000750:	4809      	ldr	r0, [pc, #36]	@ (8000778 <nrf24_writeRegisterMulti+0x54>)
 8000752:	2364      	movs	r3, #100	@ 0x64
 8000754:	2201      	movs	r2, #1
 8000756:	f001 f957 	bl	8001a08 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&NRF_SPI, data, length, 100);
 800075a:	1dbb      	adds	r3, r7, #6
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	b29a      	uxth	r2, r3
 8000760:	6839      	ldr	r1, [r7, #0]
 8000762:	4805      	ldr	r0, [pc, #20]	@ (8000778 <nrf24_writeRegisterMulti+0x54>)
 8000764:	2364      	movs	r3, #100	@ 0x64
 8000766:	f001 f94f 	bl	8001a08 <HAL_SPI_Transmit>
    nrf24_csnHigh();
 800076a:	f000 f83d 	bl	80007e8 <nrf24_csnHigh>
}
 800076e:	46c0      	nop			@ (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	b004      	add	sp, #16
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			@ (mov r8, r8)
 8000778:	20000030 	.word	0x20000030

0800077c <nrf24_readRegisterMulti>:

// **SPI Register Çoklu Oku**
static void nrf24_readRegisterMulti(uint8_t reg, uint8_t *data, uint8_t length)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6039      	str	r1, [r7, #0]
 8000784:	0011      	movs	r1, r2
 8000786:	1dfb      	adds	r3, r7, #7
 8000788:	1c02      	adds	r2, r0, #0
 800078a:	701a      	strb	r2, [r3, #0]
 800078c:	1dbb      	adds	r3, r7, #6
 800078e:	1c0a      	adds	r2, r1, #0
 8000790:	701a      	strb	r2, [r3, #0]
    nrf24_csnLow();
 8000792:	f000 f837 	bl	8000804 <nrf24_csnLow>
    uint8_t command = NRF24_CMD_R_REGISTER | reg;
 8000796:	210f      	movs	r1, #15
 8000798:	187b      	adds	r3, r7, r1
 800079a:	1dfa      	adds	r2, r7, #7
 800079c:	7812      	ldrb	r2, [r2, #0]
 800079e:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&NRF_SPI, &command, 1, 100);
 80007a0:	1879      	adds	r1, r7, r1
 80007a2:	4809      	ldr	r0, [pc, #36]	@ (80007c8 <nrf24_readRegisterMulti+0x4c>)
 80007a4:	2364      	movs	r3, #100	@ 0x64
 80007a6:	2201      	movs	r2, #1
 80007a8:	f001 f92e 	bl	8001a08 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&NRF_SPI, data, length, 100);
 80007ac:	1dbb      	adds	r3, r7, #6
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	6839      	ldr	r1, [r7, #0]
 80007b4:	4804      	ldr	r0, [pc, #16]	@ (80007c8 <nrf24_readRegisterMulti+0x4c>)
 80007b6:	2364      	movs	r3, #100	@ 0x64
 80007b8:	f001 fa86 	bl	8001cc8 <HAL_SPI_Receive>
    nrf24_csnHigh();
 80007bc:	f000 f814 	bl	80007e8 <nrf24_csnHigh>
}
 80007c0:	46c0      	nop			@ (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b004      	add	sp, #16
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000030 	.word	0x20000030

080007cc <nrf24_ceHigh>:

// **CE Yüksek (Aktif)**
static void nrf24_ceHigh(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_PORT, NRF_CE_PIN, GPIO_PIN_SET);
 80007d0:	2380      	movs	r3, #128	@ 0x80
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	4803      	ldr	r0, [pc, #12]	@ (80007e4 <nrf24_ceHigh+0x18>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	0019      	movs	r1, r3
 80007da:	f000 fbe7 	bl	8000fac <HAL_GPIO_WritePin>
}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	48000400 	.word	0x48000400

080007e8 <nrf24_csnHigh>:
    HAL_GPIO_WritePin(NRF_CE_PORT, NRF_CE_PIN, GPIO_PIN_RESET);
}

// **CSN Yüksek (İşlem Yok)**
static void nrf24_csnHigh(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_PORT, NRF_CSN_PIN, GPIO_PIN_SET);
 80007ec:	2380      	movs	r3, #128	@ 0x80
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	4803      	ldr	r0, [pc, #12]	@ (8000800 <nrf24_csnHigh+0x18>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	0019      	movs	r1, r3
 80007f6:	f000 fbd9 	bl	8000fac <HAL_GPIO_WritePin>
}
 80007fa:	46c0      	nop			@ (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	48000400 	.word	0x48000400

08000804 <nrf24_csnLow>:

// **CSN Düşük (İşlem Başlat)**
static void nrf24_csnLow(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_PORT, NRF_CSN_PIN, GPIO_PIN_RESET);
 8000808:	2380      	movs	r3, #128	@ 0x80
 800080a:	00db      	lsls	r3, r3, #3
 800080c:	4803      	ldr	r0, [pc, #12]	@ (800081c <nrf24_csnLow+0x18>)
 800080e:	2200      	movs	r2, #0
 8000810:	0019      	movs	r1, r3
 8000812:	f000 fbcb 	bl	8000fac <HAL_GPIO_WritePin>
}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	48000400 	.word	0x48000400

08000820 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <HAL_MspInit+0x44>)
 8000828:	699a      	ldr	r2, [r3, #24]
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <HAL_MspInit+0x44>)
 800082c:	2101      	movs	r1, #1
 800082e:	430a      	orrs	r2, r1
 8000830:	619a      	str	r2, [r3, #24]
 8000832:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <HAL_MspInit+0x44>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	2201      	movs	r2, #1
 8000838:	4013      	ands	r3, r2
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <HAL_MspInit+0x44>)
 8000840:	69da      	ldr	r2, [r3, #28]
 8000842:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <HAL_MspInit+0x44>)
 8000844:	2180      	movs	r1, #128	@ 0x80
 8000846:	0549      	lsls	r1, r1, #21
 8000848:	430a      	orrs	r2, r1
 800084a:	61da      	str	r2, [r3, #28]
 800084c:	4b05      	ldr	r3, [pc, #20]	@ (8000864 <HAL_MspInit+0x44>)
 800084e:	69da      	ldr	r2, [r3, #28]
 8000850:	2380      	movs	r3, #128	@ 0x80
 8000852:	055b      	lsls	r3, r3, #21
 8000854:	4013      	ands	r3, r2
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	46c0      	nop			@ (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	b002      	add	sp, #8
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	40021000 	.word	0x40021000

08000868 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b08b      	sub	sp, #44	@ 0x2c
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	2414      	movs	r4, #20
 8000872:	193b      	adds	r3, r7, r4
 8000874:	0018      	movs	r0, r3
 8000876:	2314      	movs	r3, #20
 8000878:	001a      	movs	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	f002 fe14 	bl	80034a8 <memset>
  if(hspi->Instance==SPI1)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a1c      	ldr	r2, [pc, #112]	@ (80008f8 <HAL_SPI_MspInit+0x90>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d131      	bne.n	80008ee <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800088a:	4b1c      	ldr	r3, [pc, #112]	@ (80008fc <HAL_SPI_MspInit+0x94>)
 800088c:	699a      	ldr	r2, [r3, #24]
 800088e:	4b1b      	ldr	r3, [pc, #108]	@ (80008fc <HAL_SPI_MspInit+0x94>)
 8000890:	2180      	movs	r1, #128	@ 0x80
 8000892:	0149      	lsls	r1, r1, #5
 8000894:	430a      	orrs	r2, r1
 8000896:	619a      	str	r2, [r3, #24]
 8000898:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <HAL_SPI_MspInit+0x94>)
 800089a:	699a      	ldr	r2, [r3, #24]
 800089c:	2380      	movs	r3, #128	@ 0x80
 800089e:	015b      	lsls	r3, r3, #5
 80008a0:	4013      	ands	r3, r2
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <HAL_SPI_MspInit+0x94>)
 80008a8:	695a      	ldr	r2, [r3, #20]
 80008aa:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <HAL_SPI_MspInit+0x94>)
 80008ac:	2180      	movs	r1, #128	@ 0x80
 80008ae:	02c9      	lsls	r1, r1, #11
 80008b0:	430a      	orrs	r2, r1
 80008b2:	615a      	str	r2, [r3, #20]
 80008b4:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <HAL_SPI_MspInit+0x94>)
 80008b6:	695a      	ldr	r2, [r3, #20]
 80008b8:	2380      	movs	r3, #128	@ 0x80
 80008ba:	02db      	lsls	r3, r3, #11
 80008bc:	4013      	ands	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80008c2:	0021      	movs	r1, r4
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2238      	movs	r2, #56	@ 0x38
 80008c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2202      	movs	r2, #2
 80008ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2203      	movs	r2, #3
 80008da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	4a06      	ldr	r2, [pc, #24]	@ (8000900 <HAL_SPI_MspInit+0x98>)
 80008e6:	0019      	movs	r1, r3
 80008e8:	0010      	movs	r0, r2
 80008ea:	f000 f9ef 	bl	8000ccc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80008ee:	46c0      	nop			@ (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b00b      	add	sp, #44	@ 0x2c
 80008f4:	bd90      	pop	{r4, r7, pc}
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	40013000 	.word	0x40013000
 80008fc:	40021000 	.word	0x40021000
 8000900:	48000400 	.word	0x48000400

08000904 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <HAL_TIM_Base_MspInit+0x38>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d10d      	bne.n	8000932 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000916:	4b0a      	ldr	r3, [pc, #40]	@ (8000940 <HAL_TIM_Base_MspInit+0x3c>)
 8000918:	699a      	ldr	r2, [r3, #24]
 800091a:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <HAL_TIM_Base_MspInit+0x3c>)
 800091c:	2180      	movs	r1, #128	@ 0x80
 800091e:	0109      	lsls	r1, r1, #4
 8000920:	430a      	orrs	r2, r1
 8000922:	619a      	str	r2, [r3, #24]
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <HAL_TIM_Base_MspInit+0x3c>)
 8000926:	699a      	ldr	r2, [r3, #24]
 8000928:	2380      	movs	r3, #128	@ 0x80
 800092a:	011b      	lsls	r3, r3, #4
 800092c:	4013      	ands	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	46bd      	mov	sp, r7
 8000936:	b004      	add	sp, #16
 8000938:	bd80      	pop	{r7, pc}
 800093a:	46c0      	nop			@ (mov r8, r8)
 800093c:	40012c00 	.word	0x40012c00
 8000940:	40021000 	.word	0x40021000

08000944 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b089      	sub	sp, #36	@ 0x24
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	240c      	movs	r4, #12
 800094e:	193b      	adds	r3, r7, r4
 8000950:	0018      	movs	r0, r3
 8000952:	2314      	movs	r3, #20
 8000954:	001a      	movs	r2, r3
 8000956:	2100      	movs	r1, #0
 8000958:	f002 fda6 	bl	80034a8 <memset>
  if(htim->Instance==TIM1)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a16      	ldr	r2, [pc, #88]	@ (80009bc <HAL_TIM_MspPostInit+0x78>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d125      	bne.n	80009b2 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b16      	ldr	r3, [pc, #88]	@ (80009c0 <HAL_TIM_MspPostInit+0x7c>)
 8000968:	695a      	ldr	r2, [r3, #20]
 800096a:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <HAL_TIM_MspPostInit+0x7c>)
 800096c:	2180      	movs	r1, #128	@ 0x80
 800096e:	0289      	lsls	r1, r1, #10
 8000970:	430a      	orrs	r2, r1
 8000972:	615a      	str	r2, [r3, #20]
 8000974:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <HAL_TIM_MspPostInit+0x7c>)
 8000976:	695a      	ldr	r2, [r3, #20]
 8000978:	2380      	movs	r3, #128	@ 0x80
 800097a:	029b      	lsls	r3, r3, #10
 800097c:	4013      	ands	r3, r2
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000982:	193b      	adds	r3, r7, r4
 8000984:	2280      	movs	r2, #128	@ 0x80
 8000986:	0052      	lsls	r2, r2, #1
 8000988:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	0021      	movs	r1, r4
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2202      	movs	r2, #2
 8000990:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2202      	movs	r2, #2
 80009a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a4:	187a      	adds	r2, r7, r1
 80009a6:	2390      	movs	r3, #144	@ 0x90
 80009a8:	05db      	lsls	r3, r3, #23
 80009aa:	0011      	movs	r1, r2
 80009ac:	0018      	movs	r0, r3
 80009ae:	f000 f98d 	bl	8000ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b009      	add	sp, #36	@ 0x24
 80009b8:	bd90      	pop	{r4, r7, pc}
 80009ba:	46c0      	nop			@ (mov r8, r8)
 80009bc:	40012c00 	.word	0x40012c00
 80009c0:	40021000 	.word	0x40021000

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c8:	46c0      	nop			@ (mov r8, r8)
 80009ca:	e7fd      	b.n	80009c8 <NMI_Handler+0x4>

080009cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d0:	46c0      	nop			@ (mov r8, r8)
 80009d2:	e7fd      	b.n	80009d0 <HardFault_Handler+0x4>

080009d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009d8:	46c0      	nop			@ (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e2:	46c0      	nop			@ (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ec:	f000 f87a 	bl	8000ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f0:	46c0      	nop			@ (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009fa:	46c0      	nop			@ (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a00:	480d      	ldr	r0, [pc, #52]	@ (8000a38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a02:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a04:	f7ff fff7 	bl	80009f6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a08:	480c      	ldr	r0, [pc, #48]	@ (8000a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a0a:	490d      	ldr	r1, [pc, #52]	@ (8000a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a44 <LoopForever+0xe>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a10:	e002      	b.n	8000a18 <LoopCopyDataInit>

08000a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a16:	3304      	adds	r3, #4

08000a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a1c:	d3f9      	bcc.n	8000a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a20:	4c0a      	ldr	r4, [pc, #40]	@ (8000a4c <LoopForever+0x16>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a24:	e001      	b.n	8000a2a <LoopFillZerobss>

08000a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a28:	3204      	adds	r2, #4

08000a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a2c:	d3fb      	bcc.n	8000a26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a2e:	f002 fd43 	bl	80034b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a32:	f7ff fbf5 	bl	8000220 <main>

08000a36 <LoopForever>:

LoopForever:
    b LoopForever
 8000a36:	e7fe      	b.n	8000a36 <LoopForever>
  ldr   r0, =_estack
 8000a38:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a40:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a44:	08003550 	.word	0x08003550
  ldr r2, =_sbss
 8000a48:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a4c:	200000e4 	.word	0x200000e4

08000a50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a50:	e7fe      	b.n	8000a50 <ADC1_IRQHandler>
	...

08000a54 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a58:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <HAL_Init+0x24>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <HAL_Init+0x24>)
 8000a5e:	2110      	movs	r1, #16
 8000a60:	430a      	orrs	r2, r1
 8000a62:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a64:	2003      	movs	r0, #3
 8000a66:	f000 f809 	bl	8000a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a6a:	f7ff fed9 	bl	8000820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	0018      	movs	r0, r3
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			@ (mov r8, r8)
 8000a78:	40022000 	.word	0x40022000

08000a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a84:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <HAL_InitTick+0x5c>)
 8000a86:	681c      	ldr	r4, [r3, #0]
 8000a88:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <HAL_InitTick+0x60>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	0019      	movs	r1, r3
 8000a8e:	23fa      	movs	r3, #250	@ 0xfa
 8000a90:	0098      	lsls	r0, r3, #2
 8000a92:	f7ff fb39 	bl	8000108 <__udivsi3>
 8000a96:	0003      	movs	r3, r0
 8000a98:	0019      	movs	r1, r3
 8000a9a:	0020      	movs	r0, r4
 8000a9c:	f7ff fb34 	bl	8000108 <__udivsi3>
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f000 f905 	bl	8000cb2 <HAL_SYSTICK_Config>
 8000aa8:	1e03      	subs	r3, r0, #0
 8000aaa:	d001      	beq.n	8000ab0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000aac:	2301      	movs	r3, #1
 8000aae:	e00f      	b.n	8000ad0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	d80b      	bhi.n	8000ace <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	2301      	movs	r3, #1
 8000aba:	425b      	negs	r3, r3
 8000abc:	2200      	movs	r2, #0
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f000 f8e2 	bl	8000c88 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_InitTick+0x64>)
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000aca:	2300      	movs	r3, #0
 8000acc:	e000      	b.n	8000ad0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
}
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b003      	add	sp, #12
 8000ad6:	bd90      	pop	{r4, r7, pc}
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	20000010 	.word	0x20000010
 8000ae0:	2000000c 	.word	0x2000000c

08000ae4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae8:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <HAL_IncTick+0x1c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	001a      	movs	r2, r3
 8000aee:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <HAL_IncTick+0x20>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	18d2      	adds	r2, r2, r3
 8000af4:	4b03      	ldr	r3, [pc, #12]	@ (8000b04 <HAL_IncTick+0x20>)
 8000af6:	601a      	str	r2, [r3, #0]
}
 8000af8:	46c0      	nop			@ (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			@ (mov r8, r8)
 8000b00:	20000010 	.word	0x20000010
 8000b04:	200000e0 	.word	0x200000e0

08000b08 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b02      	ldr	r3, [pc, #8]	@ (8000b18 <HAL_GetTick+0x10>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	0018      	movs	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	200000e0 	.word	0x200000e0

08000b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b24:	f7ff fff0 	bl	8000b08 <HAL_GetTick>
 8000b28:	0003      	movs	r3, r0
 8000b2a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	3301      	adds	r3, #1
 8000b34:	d005      	beq.n	8000b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b36:	4b0a      	ldr	r3, [pc, #40]	@ (8000b60 <HAL_Delay+0x44>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	001a      	movs	r2, r3
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	189b      	adds	r3, r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	f7ff ffe0 	bl	8000b08 <HAL_GetTick>
 8000b48:	0002      	movs	r2, r0
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d8f7      	bhi.n	8000b44 <HAL_Delay+0x28>
  {
  }
}
 8000b54:	46c0      	nop			@ (mov r8, r8)
 8000b56:	46c0      	nop			@ (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b004      	add	sp, #16
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	20000010 	.word	0x20000010

08000b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	0002      	movs	r2, r0
 8000b6c:	6039      	str	r1, [r7, #0]
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b78:	d828      	bhi.n	8000bcc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b7a:	4a2f      	ldr	r2, [pc, #188]	@ (8000c38 <__NVIC_SetPriority+0xd4>)
 8000b7c:	1dfb      	adds	r3, r7, #7
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b25b      	sxtb	r3, r3
 8000b82:	089b      	lsrs	r3, r3, #2
 8000b84:	33c0      	adds	r3, #192	@ 0xc0
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	589b      	ldr	r3, [r3, r2]
 8000b8a:	1dfa      	adds	r2, r7, #7
 8000b8c:	7812      	ldrb	r2, [r2, #0]
 8000b8e:	0011      	movs	r1, r2
 8000b90:	2203      	movs	r2, #3
 8000b92:	400a      	ands	r2, r1
 8000b94:	00d2      	lsls	r2, r2, #3
 8000b96:	21ff      	movs	r1, #255	@ 0xff
 8000b98:	4091      	lsls	r1, r2
 8000b9a:	000a      	movs	r2, r1
 8000b9c:	43d2      	mvns	r2, r2
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	019b      	lsls	r3, r3, #6
 8000ba6:	22ff      	movs	r2, #255	@ 0xff
 8000ba8:	401a      	ands	r2, r3
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	0018      	movs	r0, r3
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	4003      	ands	r3, r0
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb8:	481f      	ldr	r0, [pc, #124]	@ (8000c38 <__NVIC_SetPriority+0xd4>)
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b25b      	sxtb	r3, r3
 8000bc0:	089b      	lsrs	r3, r3, #2
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	33c0      	adds	r3, #192	@ 0xc0
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bca:	e031      	b.n	8000c30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	@ (8000c3c <__NVIC_SetPriority+0xd8>)
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	0019      	movs	r1, r3
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	400b      	ands	r3, r1
 8000bd8:	3b08      	subs	r3, #8
 8000bda:	089b      	lsrs	r3, r3, #2
 8000bdc:	3306      	adds	r3, #6
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	18d3      	adds	r3, r2, r3
 8000be2:	3304      	adds	r3, #4
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	1dfa      	adds	r2, r7, #7
 8000be8:	7812      	ldrb	r2, [r2, #0]
 8000bea:	0011      	movs	r1, r2
 8000bec:	2203      	movs	r2, #3
 8000bee:	400a      	ands	r2, r1
 8000bf0:	00d2      	lsls	r2, r2, #3
 8000bf2:	21ff      	movs	r1, #255	@ 0xff
 8000bf4:	4091      	lsls	r1, r2
 8000bf6:	000a      	movs	r2, r1
 8000bf8:	43d2      	mvns	r2, r2
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	019b      	lsls	r3, r3, #6
 8000c02:	22ff      	movs	r2, #255	@ 0xff
 8000c04:	401a      	ands	r2, r3
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	4003      	ands	r3, r0
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c14:	4809      	ldr	r0, [pc, #36]	@ (8000c3c <__NVIC_SetPriority+0xd8>)
 8000c16:	1dfb      	adds	r3, r7, #7
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	001c      	movs	r4, r3
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	4023      	ands	r3, r4
 8000c20:	3b08      	subs	r3, #8
 8000c22:	089b      	lsrs	r3, r3, #2
 8000c24:	430a      	orrs	r2, r1
 8000c26:	3306      	adds	r3, #6
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	18c3      	adds	r3, r0, r3
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	601a      	str	r2, [r3, #0]
}
 8000c30:	46c0      	nop			@ (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b003      	add	sp, #12
 8000c36:	bd90      	pop	{r4, r7, pc}
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	1e5a      	subs	r2, r3, #1
 8000c4c:	2380      	movs	r3, #128	@ 0x80
 8000c4e:	045b      	lsls	r3, r3, #17
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d301      	bcc.n	8000c58 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c54:	2301      	movs	r3, #1
 8000c56:	e010      	b.n	8000c7a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c58:	4b0a      	ldr	r3, [pc, #40]	@ (8000c84 <SysTick_Config+0x44>)
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	3a01      	subs	r2, #1
 8000c5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c60:	2301      	movs	r3, #1
 8000c62:	425b      	negs	r3, r3
 8000c64:	2103      	movs	r1, #3
 8000c66:	0018      	movs	r0, r3
 8000c68:	f7ff ff7c 	bl	8000b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c6c:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <SysTick_Config+0x44>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c72:	4b04      	ldr	r3, [pc, #16]	@ (8000c84 <SysTick_Config+0x44>)
 8000c74:	2207      	movs	r2, #7
 8000c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b002      	add	sp, #8
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			@ (mov r8, r8)
 8000c84:	e000e010 	.word	0xe000e010

08000c88 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	210f      	movs	r1, #15
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	1c02      	adds	r2, r0, #0
 8000c98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b25b      	sxtb	r3, r3
 8000ca2:	0011      	movs	r1, r2
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f7ff ff5d 	bl	8000b64 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000caa:	46c0      	nop			@ (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b004      	add	sp, #16
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f7ff ffbf 	bl	8000c40 <SysTick_Config>
 8000cc2:	0003      	movs	r3, r0
}
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b002      	add	sp, #8
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cda:	e14f      	b.n	8000f7c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	4091      	lsls	r1, r2
 8000ce6:	000a      	movs	r2, r1
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d100      	bne.n	8000cf4 <HAL_GPIO_Init+0x28>
 8000cf2:	e140      	b.n	8000f76 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d005      	beq.n	8000d0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2203      	movs	r2, #3
 8000d06:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d130      	bne.n	8000d6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	2203      	movs	r2, #3
 8000d18:	409a      	lsls	r2, r3
 8000d1a:	0013      	movs	r3, r2
 8000d1c:	43da      	mvns	r2, r3
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	68da      	ldr	r2, [r3, #12]
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	409a      	lsls	r2, r3
 8000d2e:	0013      	movs	r3, r2
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d42:	2201      	movs	r2, #1
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
 8000d48:	0013      	movs	r3, r2
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	091b      	lsrs	r3, r3, #4
 8000d58:	2201      	movs	r2, #1
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
 8000d60:	0013      	movs	r3, r2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2203      	movs	r2, #3
 8000d74:	4013      	ands	r3, r2
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	d017      	beq.n	8000daa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	2203      	movs	r2, #3
 8000d86:	409a      	lsls	r2, r3
 8000d88:	0013      	movs	r3, r2
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	689a      	ldr	r2, [r3, #8]
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	409a      	lsls	r2, r3
 8000d9c:	0013      	movs	r3, r2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2203      	movs	r2, #3
 8000db0:	4013      	ands	r3, r2
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d123      	bne.n	8000dfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	08da      	lsrs	r2, r3, #3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3208      	adds	r2, #8
 8000dbe:	0092      	lsls	r2, r2, #2
 8000dc0:	58d3      	ldr	r3, [r2, r3]
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	2207      	movs	r2, #7
 8000dc8:	4013      	ands	r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	220f      	movs	r2, #15
 8000dce:	409a      	lsls	r2, r3
 8000dd0:	0013      	movs	r3, r2
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	691a      	ldr	r2, [r3, #16]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	2107      	movs	r1, #7
 8000de2:	400b      	ands	r3, r1
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	409a      	lsls	r2, r3
 8000de8:	0013      	movs	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	08da      	lsrs	r2, r3, #3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3208      	adds	r2, #8
 8000df8:	0092      	lsls	r2, r2, #2
 8000dfa:	6939      	ldr	r1, [r7, #16]
 8000dfc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	2203      	movs	r2, #3
 8000e0a:	409a      	lsls	r2, r3
 8000e0c:	0013      	movs	r3, r2
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	401a      	ands	r2, r3
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	409a      	lsls	r2, r3
 8000e24:	0013      	movs	r3, r2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	23c0      	movs	r3, #192	@ 0xc0
 8000e38:	029b      	lsls	r3, r3, #10
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	d100      	bne.n	8000e40 <HAL_GPIO_Init+0x174>
 8000e3e:	e09a      	b.n	8000f76 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e40:	4b54      	ldr	r3, [pc, #336]	@ (8000f94 <HAL_GPIO_Init+0x2c8>)
 8000e42:	699a      	ldr	r2, [r3, #24]
 8000e44:	4b53      	ldr	r3, [pc, #332]	@ (8000f94 <HAL_GPIO_Init+0x2c8>)
 8000e46:	2101      	movs	r1, #1
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	619a      	str	r2, [r3, #24]
 8000e4c:	4b51      	ldr	r3, [pc, #324]	@ (8000f94 <HAL_GPIO_Init+0x2c8>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	2201      	movs	r2, #1
 8000e52:	4013      	ands	r3, r2
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e58:	4a4f      	ldr	r2, [pc, #316]	@ (8000f98 <HAL_GPIO_Init+0x2cc>)
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	089b      	lsrs	r3, r3, #2
 8000e5e:	3302      	adds	r3, #2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	589b      	ldr	r3, [r3, r2]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	2203      	movs	r2, #3
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	220f      	movs	r2, #15
 8000e70:	409a      	lsls	r2, r3
 8000e72:	0013      	movs	r3, r2
 8000e74:	43da      	mvns	r2, r3
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	2390      	movs	r3, #144	@ 0x90
 8000e80:	05db      	lsls	r3, r3, #23
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d013      	beq.n	8000eae <HAL_GPIO_Init+0x1e2>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a44      	ldr	r2, [pc, #272]	@ (8000f9c <HAL_GPIO_Init+0x2d0>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d00d      	beq.n	8000eaa <HAL_GPIO_Init+0x1de>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a43      	ldr	r2, [pc, #268]	@ (8000fa0 <HAL_GPIO_Init+0x2d4>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d007      	beq.n	8000ea6 <HAL_GPIO_Init+0x1da>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a42      	ldr	r2, [pc, #264]	@ (8000fa4 <HAL_GPIO_Init+0x2d8>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d101      	bne.n	8000ea2 <HAL_GPIO_Init+0x1d6>
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e006      	b.n	8000eb0 <HAL_GPIO_Init+0x1e4>
 8000ea2:	2305      	movs	r3, #5
 8000ea4:	e004      	b.n	8000eb0 <HAL_GPIO_Init+0x1e4>
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	e002      	b.n	8000eb0 <HAL_GPIO_Init+0x1e4>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e000      	b.n	8000eb0 <HAL_GPIO_Init+0x1e4>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	697a      	ldr	r2, [r7, #20]
 8000eb2:	2103      	movs	r1, #3
 8000eb4:	400a      	ands	r2, r1
 8000eb6:	0092      	lsls	r2, r2, #2
 8000eb8:	4093      	lsls	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ec0:	4935      	ldr	r1, [pc, #212]	@ (8000f98 <HAL_GPIO_Init+0x2cc>)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	089b      	lsrs	r3, r3, #2
 8000ec6:	3302      	adds	r3, #2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ece:	4b36      	ldr	r3, [pc, #216]	@ (8000fa8 <HAL_GPIO_Init+0x2dc>)
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	2380      	movs	r3, #128	@ 0x80
 8000ee4:	035b      	lsls	r3, r3, #13
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	d003      	beq.n	8000ef2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ef2:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa8 <HAL_GPIO_Init+0x2dc>)
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8000fa8 <HAL_GPIO_Init+0x2dc>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	43da      	mvns	r2, r3
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	2380      	movs	r3, #128	@ 0x80
 8000f0e:	039b      	lsls	r3, r3, #14
 8000f10:	4013      	ands	r3, r2
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f1c:	4b22      	ldr	r3, [pc, #136]	@ (8000fa8 <HAL_GPIO_Init+0x2dc>)
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000f22:	4b21      	ldr	r3, [pc, #132]	@ (8000fa8 <HAL_GPIO_Init+0x2dc>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	2380      	movs	r3, #128	@ 0x80
 8000f38:	029b      	lsls	r3, r3, #10
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f46:	4b18      	ldr	r3, [pc, #96]	@ (8000fa8 <HAL_GPIO_Init+0x2dc>)
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <HAL_GPIO_Init+0x2dc>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	43da      	mvns	r2, r3
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	2380      	movs	r3, #128	@ 0x80
 8000f62:	025b      	lsls	r3, r3, #9
 8000f64:	4013      	ands	r3, r2
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f70:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa8 <HAL_GPIO_Init+0x2dc>)
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	40da      	lsrs	r2, r3
 8000f84:	1e13      	subs	r3, r2, #0
 8000f86:	d000      	beq.n	8000f8a <HAL_GPIO_Init+0x2be>
 8000f88:	e6a8      	b.n	8000cdc <HAL_GPIO_Init+0x10>
  } 
}
 8000f8a:	46c0      	nop			@ (mov r8, r8)
 8000f8c:	46c0      	nop			@ (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b006      	add	sp, #24
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40010000 	.word	0x40010000
 8000f9c:	48000400 	.word	0x48000400
 8000fa0:	48000800 	.word	0x48000800
 8000fa4:	48000c00 	.word	0x48000c00
 8000fa8:	40010400 	.word	0x40010400

08000fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	0008      	movs	r0, r1
 8000fb6:	0011      	movs	r1, r2
 8000fb8:	1cbb      	adds	r3, r7, #2
 8000fba:	1c02      	adds	r2, r0, #0
 8000fbc:	801a      	strh	r2, [r3, #0]
 8000fbe:	1c7b      	adds	r3, r7, #1
 8000fc0:	1c0a      	adds	r2, r1, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fc4:	1c7b      	adds	r3, r7, #1
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d004      	beq.n	8000fd6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fcc:	1cbb      	adds	r3, r7, #2
 8000fce:	881a      	ldrh	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fd4:	e003      	b.n	8000fde <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fd6:	1cbb      	adds	r3, r7, #2
 8000fd8:	881a      	ldrh	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fde:	46c0      	nop			@ (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b002      	add	sp, #8
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b084      	sub	sp, #16
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	000a      	movs	r2, r1
 8000ff0:	1cbb      	adds	r3, r7, #2
 8000ff2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ffa:	1cbb      	adds	r3, r7, #2
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	4013      	ands	r3, r2
 8001002:	041a      	lsls	r2, r3, #16
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	43db      	mvns	r3, r3
 8001008:	1cb9      	adds	r1, r7, #2
 800100a:	8809      	ldrh	r1, [r1, #0]
 800100c:	400b      	ands	r3, r1
 800100e:	431a      	orrs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	619a      	str	r2, [r3, #24]
}
 8001014:	46c0      	nop			@ (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	b004      	add	sp, #16
 800101a:	bd80      	pop	{r7, pc}

0800101c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e301      	b.n	8001632 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2201      	movs	r2, #1
 8001034:	4013      	ands	r3, r2
 8001036:	d100      	bne.n	800103a <HAL_RCC_OscConfig+0x1e>
 8001038:	e08d      	b.n	8001156 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800103a:	4bc3      	ldr	r3, [pc, #780]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	220c      	movs	r2, #12
 8001040:	4013      	ands	r3, r2
 8001042:	2b04      	cmp	r3, #4
 8001044:	d00e      	beq.n	8001064 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001046:	4bc0      	ldr	r3, [pc, #768]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	220c      	movs	r2, #12
 800104c:	4013      	ands	r3, r2
 800104e:	2b08      	cmp	r3, #8
 8001050:	d116      	bne.n	8001080 <HAL_RCC_OscConfig+0x64>
 8001052:	4bbd      	ldr	r3, [pc, #756]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	2380      	movs	r3, #128	@ 0x80
 8001058:	025b      	lsls	r3, r3, #9
 800105a:	401a      	ands	r2, r3
 800105c:	2380      	movs	r3, #128	@ 0x80
 800105e:	025b      	lsls	r3, r3, #9
 8001060:	429a      	cmp	r2, r3
 8001062:	d10d      	bne.n	8001080 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001064:	4bb8      	ldr	r3, [pc, #736]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	2380      	movs	r3, #128	@ 0x80
 800106a:	029b      	lsls	r3, r3, #10
 800106c:	4013      	ands	r3, r2
 800106e:	d100      	bne.n	8001072 <HAL_RCC_OscConfig+0x56>
 8001070:	e070      	b.n	8001154 <HAL_RCC_OscConfig+0x138>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d000      	beq.n	800107c <HAL_RCC_OscConfig+0x60>
 800107a:	e06b      	b.n	8001154 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e2d8      	b.n	8001632 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d107      	bne.n	8001098 <HAL_RCC_OscConfig+0x7c>
 8001088:	4baf      	ldr	r3, [pc, #700]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4bae      	ldr	r3, [pc, #696]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 800108e:	2180      	movs	r1, #128	@ 0x80
 8001090:	0249      	lsls	r1, r1, #9
 8001092:	430a      	orrs	r2, r1
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	e02f      	b.n	80010f8 <HAL_RCC_OscConfig+0xdc>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10c      	bne.n	80010ba <HAL_RCC_OscConfig+0x9e>
 80010a0:	4ba9      	ldr	r3, [pc, #676]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4ba8      	ldr	r3, [pc, #672]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 80010a6:	49a9      	ldr	r1, [pc, #676]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 80010a8:	400a      	ands	r2, r1
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	4ba6      	ldr	r3, [pc, #664]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4ba5      	ldr	r3, [pc, #660]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 80010b2:	49a7      	ldr	r1, [pc, #668]	@ (8001350 <HAL_RCC_OscConfig+0x334>)
 80010b4:	400a      	ands	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	e01e      	b.n	80010f8 <HAL_RCC_OscConfig+0xdc>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b05      	cmp	r3, #5
 80010c0:	d10e      	bne.n	80010e0 <HAL_RCC_OscConfig+0xc4>
 80010c2:	4ba1      	ldr	r3, [pc, #644]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	4ba0      	ldr	r3, [pc, #640]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 80010c8:	2180      	movs	r1, #128	@ 0x80
 80010ca:	02c9      	lsls	r1, r1, #11
 80010cc:	430a      	orrs	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	4b9d      	ldr	r3, [pc, #628]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b9c      	ldr	r3, [pc, #624]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 80010d6:	2180      	movs	r1, #128	@ 0x80
 80010d8:	0249      	lsls	r1, r1, #9
 80010da:	430a      	orrs	r2, r1
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	e00b      	b.n	80010f8 <HAL_RCC_OscConfig+0xdc>
 80010e0:	4b99      	ldr	r3, [pc, #612]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b98      	ldr	r3, [pc, #608]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 80010e6:	4999      	ldr	r1, [pc, #612]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 80010e8:	400a      	ands	r2, r1
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	4b96      	ldr	r3, [pc, #600]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b95      	ldr	r3, [pc, #596]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 80010f2:	4997      	ldr	r1, [pc, #604]	@ (8001350 <HAL_RCC_OscConfig+0x334>)
 80010f4:	400a      	ands	r2, r1
 80010f6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d014      	beq.n	800112a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001100:	f7ff fd02 	bl	8000b08 <HAL_GetTick>
 8001104:	0003      	movs	r3, r0
 8001106:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001108:	e008      	b.n	800111c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800110a:	f7ff fcfd 	bl	8000b08 <HAL_GetTick>
 800110e:	0002      	movs	r2, r0
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b64      	cmp	r3, #100	@ 0x64
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e28a      	b.n	8001632 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111c:	4b8a      	ldr	r3, [pc, #552]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	2380      	movs	r3, #128	@ 0x80
 8001122:	029b      	lsls	r3, r3, #10
 8001124:	4013      	ands	r3, r2
 8001126:	d0f0      	beq.n	800110a <HAL_RCC_OscConfig+0xee>
 8001128:	e015      	b.n	8001156 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112a:	f7ff fced 	bl	8000b08 <HAL_GetTick>
 800112e:	0003      	movs	r3, r0
 8001130:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001134:	f7ff fce8 	bl	8000b08 <HAL_GetTick>
 8001138:	0002      	movs	r2, r0
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b64      	cmp	r3, #100	@ 0x64
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e275      	b.n	8001632 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001146:	4b80      	ldr	r3, [pc, #512]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	2380      	movs	r3, #128	@ 0x80
 800114c:	029b      	lsls	r3, r3, #10
 800114e:	4013      	ands	r3, r2
 8001150:	d1f0      	bne.n	8001134 <HAL_RCC_OscConfig+0x118>
 8001152:	e000      	b.n	8001156 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001154:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2202      	movs	r2, #2
 800115c:	4013      	ands	r3, r2
 800115e:	d100      	bne.n	8001162 <HAL_RCC_OscConfig+0x146>
 8001160:	e069      	b.n	8001236 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001162:	4b79      	ldr	r3, [pc, #484]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	220c      	movs	r2, #12
 8001168:	4013      	ands	r3, r2
 800116a:	d00b      	beq.n	8001184 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800116c:	4b76      	ldr	r3, [pc, #472]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	220c      	movs	r2, #12
 8001172:	4013      	ands	r3, r2
 8001174:	2b08      	cmp	r3, #8
 8001176:	d11c      	bne.n	80011b2 <HAL_RCC_OscConfig+0x196>
 8001178:	4b73      	ldr	r3, [pc, #460]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	2380      	movs	r3, #128	@ 0x80
 800117e:	025b      	lsls	r3, r3, #9
 8001180:	4013      	ands	r3, r2
 8001182:	d116      	bne.n	80011b2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001184:	4b70      	ldr	r3, [pc, #448]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2202      	movs	r2, #2
 800118a:	4013      	ands	r3, r2
 800118c:	d005      	beq.n	800119a <HAL_RCC_OscConfig+0x17e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d001      	beq.n	800119a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e24b      	b.n	8001632 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800119a:	4b6b      	ldr	r3, [pc, #428]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	22f8      	movs	r2, #248	@ 0xf8
 80011a0:	4393      	bics	r3, r2
 80011a2:	0019      	movs	r1, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	691b      	ldr	r3, [r3, #16]
 80011a8:	00da      	lsls	r2, r3, #3
 80011aa:	4b67      	ldr	r3, [pc, #412]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 80011ac:	430a      	orrs	r2, r1
 80011ae:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b0:	e041      	b.n	8001236 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d024      	beq.n	8001204 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ba:	4b63      	ldr	r3, [pc, #396]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4b62      	ldr	r3, [pc, #392]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 80011c0:	2101      	movs	r1, #1
 80011c2:	430a      	orrs	r2, r1
 80011c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c6:	f7ff fc9f 	bl	8000b08 <HAL_GetTick>
 80011ca:	0003      	movs	r3, r0
 80011cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d0:	f7ff fc9a 	bl	8000b08 <HAL_GetTick>
 80011d4:	0002      	movs	r2, r0
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e227      	b.n	8001632 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e2:	4b59      	ldr	r3, [pc, #356]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2202      	movs	r2, #2
 80011e8:	4013      	ands	r3, r2
 80011ea:	d0f1      	beq.n	80011d0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ec:	4b56      	ldr	r3, [pc, #344]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	22f8      	movs	r2, #248	@ 0xf8
 80011f2:	4393      	bics	r3, r2
 80011f4:	0019      	movs	r1, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	00da      	lsls	r2, r3, #3
 80011fc:	4b52      	ldr	r3, [pc, #328]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 80011fe:	430a      	orrs	r2, r1
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	e018      	b.n	8001236 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001204:	4b50      	ldr	r3, [pc, #320]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b4f      	ldr	r3, [pc, #316]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 800120a:	2101      	movs	r1, #1
 800120c:	438a      	bics	r2, r1
 800120e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001210:	f7ff fc7a 	bl	8000b08 <HAL_GetTick>
 8001214:	0003      	movs	r3, r0
 8001216:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800121a:	f7ff fc75 	bl	8000b08 <HAL_GetTick>
 800121e:	0002      	movs	r2, r0
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e202      	b.n	8001632 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122c:	4b46      	ldr	r3, [pc, #280]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2202      	movs	r2, #2
 8001232:	4013      	ands	r3, r2
 8001234:	d1f1      	bne.n	800121a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2208      	movs	r2, #8
 800123c:	4013      	ands	r3, r2
 800123e:	d036      	beq.n	80012ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69db      	ldr	r3, [r3, #28]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d019      	beq.n	800127c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001248:	4b3f      	ldr	r3, [pc, #252]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 800124a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800124c:	4b3e      	ldr	r3, [pc, #248]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 800124e:	2101      	movs	r1, #1
 8001250:	430a      	orrs	r2, r1
 8001252:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001254:	f7ff fc58 	bl	8000b08 <HAL_GetTick>
 8001258:	0003      	movs	r3, r0
 800125a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800125e:	f7ff fc53 	bl	8000b08 <HAL_GetTick>
 8001262:	0002      	movs	r2, r0
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e1e0      	b.n	8001632 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001270:	4b35      	ldr	r3, [pc, #212]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 8001272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001274:	2202      	movs	r2, #2
 8001276:	4013      	ands	r3, r2
 8001278:	d0f1      	beq.n	800125e <HAL_RCC_OscConfig+0x242>
 800127a:	e018      	b.n	80012ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800127c:	4b32      	ldr	r3, [pc, #200]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 800127e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001280:	4b31      	ldr	r3, [pc, #196]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 8001282:	2101      	movs	r1, #1
 8001284:	438a      	bics	r2, r1
 8001286:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001288:	f7ff fc3e 	bl	8000b08 <HAL_GetTick>
 800128c:	0003      	movs	r3, r0
 800128e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001292:	f7ff fc39 	bl	8000b08 <HAL_GetTick>
 8001296:	0002      	movs	r2, r0
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e1c6      	b.n	8001632 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a4:	4b28      	ldr	r3, [pc, #160]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 80012a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a8:	2202      	movs	r2, #2
 80012aa:	4013      	ands	r3, r2
 80012ac:	d1f1      	bne.n	8001292 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2204      	movs	r2, #4
 80012b4:	4013      	ands	r3, r2
 80012b6:	d100      	bne.n	80012ba <HAL_RCC_OscConfig+0x29e>
 80012b8:	e0b4      	b.n	8001424 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ba:	201f      	movs	r0, #31
 80012bc:	183b      	adds	r3, r7, r0
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012c2:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 80012c4:	69da      	ldr	r2, [r3, #28]
 80012c6:	2380      	movs	r3, #128	@ 0x80
 80012c8:	055b      	lsls	r3, r3, #21
 80012ca:	4013      	ands	r3, r2
 80012cc:	d110      	bne.n	80012f0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 80012d0:	69da      	ldr	r2, [r3, #28]
 80012d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 80012d4:	2180      	movs	r1, #128	@ 0x80
 80012d6:	0549      	lsls	r1, r1, #21
 80012d8:	430a      	orrs	r2, r1
 80012da:	61da      	str	r2, [r3, #28]
 80012dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 80012de:	69da      	ldr	r2, [r3, #28]
 80012e0:	2380      	movs	r3, #128	@ 0x80
 80012e2:	055b      	lsls	r3, r3, #21
 80012e4:	4013      	ands	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012ea:	183b      	adds	r3, r7, r0
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f0:	4b18      	ldr	r3, [pc, #96]	@ (8001354 <HAL_RCC_OscConfig+0x338>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	2380      	movs	r3, #128	@ 0x80
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	4013      	ands	r3, r2
 80012fa:	d11a      	bne.n	8001332 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012fc:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <HAL_RCC_OscConfig+0x338>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <HAL_RCC_OscConfig+0x338>)
 8001302:	2180      	movs	r1, #128	@ 0x80
 8001304:	0049      	lsls	r1, r1, #1
 8001306:	430a      	orrs	r2, r1
 8001308:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800130a:	f7ff fbfd 	bl	8000b08 <HAL_GetTick>
 800130e:	0003      	movs	r3, r0
 8001310:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001314:	f7ff fbf8 	bl	8000b08 <HAL_GetTick>
 8001318:	0002      	movs	r2, r0
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b64      	cmp	r3, #100	@ 0x64
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e185      	b.n	8001632 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001326:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <HAL_RCC_OscConfig+0x338>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	2380      	movs	r3, #128	@ 0x80
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4013      	ands	r3, r2
 8001330:	d0f0      	beq.n	8001314 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d10e      	bne.n	8001358 <HAL_RCC_OscConfig+0x33c>
 800133a:	4b03      	ldr	r3, [pc, #12]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 800133c:	6a1a      	ldr	r2, [r3, #32]
 800133e:	4b02      	ldr	r3, [pc, #8]	@ (8001348 <HAL_RCC_OscConfig+0x32c>)
 8001340:	2101      	movs	r1, #1
 8001342:	430a      	orrs	r2, r1
 8001344:	621a      	str	r2, [r3, #32]
 8001346:	e035      	b.n	80013b4 <HAL_RCC_OscConfig+0x398>
 8001348:	40021000 	.word	0x40021000
 800134c:	fffeffff 	.word	0xfffeffff
 8001350:	fffbffff 	.word	0xfffbffff
 8001354:	40007000 	.word	0x40007000
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d10c      	bne.n	800137a <HAL_RCC_OscConfig+0x35e>
 8001360:	4bb6      	ldr	r3, [pc, #728]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 8001362:	6a1a      	ldr	r2, [r3, #32]
 8001364:	4bb5      	ldr	r3, [pc, #724]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 8001366:	2101      	movs	r1, #1
 8001368:	438a      	bics	r2, r1
 800136a:	621a      	str	r2, [r3, #32]
 800136c:	4bb3      	ldr	r3, [pc, #716]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 800136e:	6a1a      	ldr	r2, [r3, #32]
 8001370:	4bb2      	ldr	r3, [pc, #712]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 8001372:	2104      	movs	r1, #4
 8001374:	438a      	bics	r2, r1
 8001376:	621a      	str	r2, [r3, #32]
 8001378:	e01c      	b.n	80013b4 <HAL_RCC_OscConfig+0x398>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	2b05      	cmp	r3, #5
 8001380:	d10c      	bne.n	800139c <HAL_RCC_OscConfig+0x380>
 8001382:	4bae      	ldr	r3, [pc, #696]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 8001384:	6a1a      	ldr	r2, [r3, #32]
 8001386:	4bad      	ldr	r3, [pc, #692]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 8001388:	2104      	movs	r1, #4
 800138a:	430a      	orrs	r2, r1
 800138c:	621a      	str	r2, [r3, #32]
 800138e:	4bab      	ldr	r3, [pc, #684]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 8001390:	6a1a      	ldr	r2, [r3, #32]
 8001392:	4baa      	ldr	r3, [pc, #680]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 8001394:	2101      	movs	r1, #1
 8001396:	430a      	orrs	r2, r1
 8001398:	621a      	str	r2, [r3, #32]
 800139a:	e00b      	b.n	80013b4 <HAL_RCC_OscConfig+0x398>
 800139c:	4ba7      	ldr	r3, [pc, #668]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 800139e:	6a1a      	ldr	r2, [r3, #32]
 80013a0:	4ba6      	ldr	r3, [pc, #664]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 80013a2:	2101      	movs	r1, #1
 80013a4:	438a      	bics	r2, r1
 80013a6:	621a      	str	r2, [r3, #32]
 80013a8:	4ba4      	ldr	r3, [pc, #656]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 80013aa:	6a1a      	ldr	r2, [r3, #32]
 80013ac:	4ba3      	ldr	r3, [pc, #652]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 80013ae:	2104      	movs	r1, #4
 80013b0:	438a      	bics	r2, r1
 80013b2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d014      	beq.n	80013e6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013bc:	f7ff fba4 	bl	8000b08 <HAL_GetTick>
 80013c0:	0003      	movs	r3, r0
 80013c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c4:	e009      	b.n	80013da <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c6:	f7ff fb9f 	bl	8000b08 <HAL_GetTick>
 80013ca:	0002      	movs	r2, r0
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	4a9b      	ldr	r2, [pc, #620]	@ (8001640 <HAL_RCC_OscConfig+0x624>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e12b      	b.n	8001632 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013da:	4b98      	ldr	r3, [pc, #608]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	2202      	movs	r2, #2
 80013e0:	4013      	ands	r3, r2
 80013e2:	d0f0      	beq.n	80013c6 <HAL_RCC_OscConfig+0x3aa>
 80013e4:	e013      	b.n	800140e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e6:	f7ff fb8f 	bl	8000b08 <HAL_GetTick>
 80013ea:	0003      	movs	r3, r0
 80013ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ee:	e009      	b.n	8001404 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013f0:	f7ff fb8a 	bl	8000b08 <HAL_GetTick>
 80013f4:	0002      	movs	r2, r0
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	4a91      	ldr	r2, [pc, #580]	@ (8001640 <HAL_RCC_OscConfig+0x624>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e116      	b.n	8001632 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001404:	4b8d      	ldr	r3, [pc, #564]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	2202      	movs	r2, #2
 800140a:	4013      	ands	r3, r2
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800140e:	231f      	movs	r3, #31
 8001410:	18fb      	adds	r3, r7, r3
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d105      	bne.n	8001424 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001418:	4b88      	ldr	r3, [pc, #544]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 800141a:	69da      	ldr	r2, [r3, #28]
 800141c:	4b87      	ldr	r3, [pc, #540]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 800141e:	4989      	ldr	r1, [pc, #548]	@ (8001644 <HAL_RCC_OscConfig+0x628>)
 8001420:	400a      	ands	r2, r1
 8001422:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2210      	movs	r2, #16
 800142a:	4013      	ands	r3, r2
 800142c:	d063      	beq.n	80014f6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d12a      	bne.n	800148c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001436:	4b81      	ldr	r3, [pc, #516]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 8001438:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800143a:	4b80      	ldr	r3, [pc, #512]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 800143c:	2104      	movs	r1, #4
 800143e:	430a      	orrs	r2, r1
 8001440:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001442:	4b7e      	ldr	r3, [pc, #504]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 8001444:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001446:	4b7d      	ldr	r3, [pc, #500]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 8001448:	2101      	movs	r1, #1
 800144a:	430a      	orrs	r2, r1
 800144c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144e:	f7ff fb5b 	bl	8000b08 <HAL_GetTick>
 8001452:	0003      	movs	r3, r0
 8001454:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001458:	f7ff fb56 	bl	8000b08 <HAL_GetTick>
 800145c:	0002      	movs	r2, r0
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e0e3      	b.n	8001632 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800146a:	4b74      	ldr	r3, [pc, #464]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 800146c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800146e:	2202      	movs	r2, #2
 8001470:	4013      	ands	r3, r2
 8001472:	d0f1      	beq.n	8001458 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001474:	4b71      	ldr	r3, [pc, #452]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 8001476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001478:	22f8      	movs	r2, #248	@ 0xf8
 800147a:	4393      	bics	r3, r2
 800147c:	0019      	movs	r1, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	00da      	lsls	r2, r3, #3
 8001484:	4b6d      	ldr	r3, [pc, #436]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 8001486:	430a      	orrs	r2, r1
 8001488:	635a      	str	r2, [r3, #52]	@ 0x34
 800148a:	e034      	b.n	80014f6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	695b      	ldr	r3, [r3, #20]
 8001490:	3305      	adds	r3, #5
 8001492:	d111      	bne.n	80014b8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001494:	4b69      	ldr	r3, [pc, #420]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 8001496:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001498:	4b68      	ldr	r3, [pc, #416]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 800149a:	2104      	movs	r1, #4
 800149c:	438a      	bics	r2, r1
 800149e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014a0:	4b66      	ldr	r3, [pc, #408]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 80014a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014a4:	22f8      	movs	r2, #248	@ 0xf8
 80014a6:	4393      	bics	r3, r2
 80014a8:	0019      	movs	r1, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	00da      	lsls	r2, r3, #3
 80014b0:	4b62      	ldr	r3, [pc, #392]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 80014b2:	430a      	orrs	r2, r1
 80014b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80014b6:	e01e      	b.n	80014f6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014b8:	4b60      	ldr	r3, [pc, #384]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 80014ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014bc:	4b5f      	ldr	r3, [pc, #380]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 80014be:	2104      	movs	r1, #4
 80014c0:	430a      	orrs	r2, r1
 80014c2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80014c4:	4b5d      	ldr	r3, [pc, #372]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 80014c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014c8:	4b5c      	ldr	r3, [pc, #368]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 80014ca:	2101      	movs	r1, #1
 80014cc:	438a      	bics	r2, r1
 80014ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d0:	f7ff fb1a 	bl	8000b08 <HAL_GetTick>
 80014d4:	0003      	movs	r3, r0
 80014d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014da:	f7ff fb15 	bl	8000b08 <HAL_GetTick>
 80014de:	0002      	movs	r2, r0
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e0a2      	b.n	8001632 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014ec:	4b53      	ldr	r3, [pc, #332]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 80014ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014f0:	2202      	movs	r2, #2
 80014f2:	4013      	ands	r3, r2
 80014f4:	d1f1      	bne.n	80014da <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d100      	bne.n	8001500 <HAL_RCC_OscConfig+0x4e4>
 80014fe:	e097      	b.n	8001630 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001500:	4b4e      	ldr	r3, [pc, #312]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	220c      	movs	r2, #12
 8001506:	4013      	ands	r3, r2
 8001508:	2b08      	cmp	r3, #8
 800150a:	d100      	bne.n	800150e <HAL_RCC_OscConfig+0x4f2>
 800150c:	e06b      	b.n	80015e6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d14c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001516:	4b49      	ldr	r3, [pc, #292]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4b48      	ldr	r3, [pc, #288]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 800151c:	494a      	ldr	r1, [pc, #296]	@ (8001648 <HAL_RCC_OscConfig+0x62c>)
 800151e:	400a      	ands	r2, r1
 8001520:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001522:	f7ff faf1 	bl	8000b08 <HAL_GetTick>
 8001526:	0003      	movs	r3, r0
 8001528:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152c:	f7ff faec 	bl	8000b08 <HAL_GetTick>
 8001530:	0002      	movs	r2, r0
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e079      	b.n	8001632 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800153e:	4b3f      	ldr	r3, [pc, #252]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	2380      	movs	r3, #128	@ 0x80
 8001544:	049b      	lsls	r3, r3, #18
 8001546:	4013      	ands	r3, r2
 8001548:	d1f0      	bne.n	800152c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800154a:	4b3c      	ldr	r3, [pc, #240]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 800154c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800154e:	220f      	movs	r2, #15
 8001550:	4393      	bics	r3, r2
 8001552:	0019      	movs	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001558:	4b38      	ldr	r3, [pc, #224]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 800155a:	430a      	orrs	r2, r1
 800155c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800155e:	4b37      	ldr	r3, [pc, #220]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a3a      	ldr	r2, [pc, #232]	@ (800164c <HAL_RCC_OscConfig+0x630>)
 8001564:	4013      	ands	r3, r2
 8001566:	0019      	movs	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001570:	431a      	orrs	r2, r3
 8001572:	4b32      	ldr	r3, [pc, #200]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 8001574:	430a      	orrs	r2, r1
 8001576:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001578:	4b30      	ldr	r3, [pc, #192]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b2f      	ldr	r3, [pc, #188]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 800157e:	2180      	movs	r1, #128	@ 0x80
 8001580:	0449      	lsls	r1, r1, #17
 8001582:	430a      	orrs	r2, r1
 8001584:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001586:	f7ff fabf 	bl	8000b08 <HAL_GetTick>
 800158a:	0003      	movs	r3, r0
 800158c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001590:	f7ff faba 	bl	8000b08 <HAL_GetTick>
 8001594:	0002      	movs	r2, r0
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e047      	b.n	8001632 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015a2:	4b26      	ldr	r3, [pc, #152]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	2380      	movs	r3, #128	@ 0x80
 80015a8:	049b      	lsls	r3, r3, #18
 80015aa:	4013      	ands	r3, r2
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0x574>
 80015ae:	e03f      	b.n	8001630 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b0:	4b22      	ldr	r3, [pc, #136]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b21      	ldr	r3, [pc, #132]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 80015b6:	4924      	ldr	r1, [pc, #144]	@ (8001648 <HAL_RCC_OscConfig+0x62c>)
 80015b8:	400a      	ands	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff faa4 	bl	8000b08 <HAL_GetTick>
 80015c0:	0003      	movs	r3, r0
 80015c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c6:	f7ff fa9f 	bl	8000b08 <HAL_GetTick>
 80015ca:	0002      	movs	r2, r0
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e02c      	b.n	8001632 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d8:	4b18      	ldr	r3, [pc, #96]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2380      	movs	r3, #128	@ 0x80
 80015de:	049b      	lsls	r3, r3, #18
 80015e0:	4013      	ands	r3, r2
 80015e2:	d1f0      	bne.n	80015c6 <HAL_RCC_OscConfig+0x5aa>
 80015e4:	e024      	b.n	8001630 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e01f      	b.n	8001632 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80015f2:	4b12      	ldr	r3, [pc, #72]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80015f8:	4b10      	ldr	r3, [pc, #64]	@ (800163c <HAL_RCC_OscConfig+0x620>)
 80015fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	2380      	movs	r3, #128	@ 0x80
 8001602:	025b      	lsls	r3, r3, #9
 8001604:	401a      	ands	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160a:	429a      	cmp	r2, r3
 800160c:	d10e      	bne.n	800162c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	220f      	movs	r2, #15
 8001612:	401a      	ands	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001618:	429a      	cmp	r2, r3
 800161a:	d107      	bne.n	800162c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	23f0      	movs	r3, #240	@ 0xf0
 8001620:	039b      	lsls	r3, r3, #14
 8001622:	401a      	ands	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001628:	429a      	cmp	r2, r3
 800162a:	d001      	beq.n	8001630 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	0018      	movs	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	b008      	add	sp, #32
 8001638:	bd80      	pop	{r7, pc}
 800163a:	46c0      	nop			@ (mov r8, r8)
 800163c:	40021000 	.word	0x40021000
 8001640:	00001388 	.word	0x00001388
 8001644:	efffffff 	.word	0xefffffff
 8001648:	feffffff 	.word	0xfeffffff
 800164c:	ffc2ffff 	.word	0xffc2ffff

08001650 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0b3      	b.n	80017cc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001664:	4b5b      	ldr	r3, [pc, #364]	@ (80017d4 <HAL_RCC_ClockConfig+0x184>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2201      	movs	r2, #1
 800166a:	4013      	ands	r3, r2
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d911      	bls.n	8001696 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001672:	4b58      	ldr	r3, [pc, #352]	@ (80017d4 <HAL_RCC_ClockConfig+0x184>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2201      	movs	r2, #1
 8001678:	4393      	bics	r3, r2
 800167a:	0019      	movs	r1, r3
 800167c:	4b55      	ldr	r3, [pc, #340]	@ (80017d4 <HAL_RCC_ClockConfig+0x184>)
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001684:	4b53      	ldr	r3, [pc, #332]	@ (80017d4 <HAL_RCC_ClockConfig+0x184>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2201      	movs	r2, #1
 800168a:	4013      	ands	r3, r2
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d001      	beq.n	8001696 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e09a      	b.n	80017cc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2202      	movs	r2, #2
 800169c:	4013      	ands	r3, r2
 800169e:	d015      	beq.n	80016cc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2204      	movs	r2, #4
 80016a6:	4013      	ands	r3, r2
 80016a8:	d006      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80016aa:	4b4b      	ldr	r3, [pc, #300]	@ (80017d8 <HAL_RCC_ClockConfig+0x188>)
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	4b4a      	ldr	r3, [pc, #296]	@ (80017d8 <HAL_RCC_ClockConfig+0x188>)
 80016b0:	21e0      	movs	r1, #224	@ 0xe0
 80016b2:	00c9      	lsls	r1, r1, #3
 80016b4:	430a      	orrs	r2, r1
 80016b6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b8:	4b47      	ldr	r3, [pc, #284]	@ (80017d8 <HAL_RCC_ClockConfig+0x188>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	22f0      	movs	r2, #240	@ 0xf0
 80016be:	4393      	bics	r3, r2
 80016c0:	0019      	movs	r1, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	4b44      	ldr	r3, [pc, #272]	@ (80017d8 <HAL_RCC_ClockConfig+0x188>)
 80016c8:	430a      	orrs	r2, r1
 80016ca:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2201      	movs	r2, #1
 80016d2:	4013      	ands	r3, r2
 80016d4:	d040      	beq.n	8001758 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	4b3e      	ldr	r3, [pc, #248]	@ (80017d8 <HAL_RCC_ClockConfig+0x188>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	2380      	movs	r3, #128	@ 0x80
 80016e4:	029b      	lsls	r3, r3, #10
 80016e6:	4013      	ands	r3, r2
 80016e8:	d114      	bne.n	8001714 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e06e      	b.n	80017cc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d107      	bne.n	8001706 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f6:	4b38      	ldr	r3, [pc, #224]	@ (80017d8 <HAL_RCC_ClockConfig+0x188>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	2380      	movs	r3, #128	@ 0x80
 80016fc:	049b      	lsls	r3, r3, #18
 80016fe:	4013      	ands	r3, r2
 8001700:	d108      	bne.n	8001714 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e062      	b.n	80017cc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001706:	4b34      	ldr	r3, [pc, #208]	@ (80017d8 <HAL_RCC_ClockConfig+0x188>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2202      	movs	r2, #2
 800170c:	4013      	ands	r3, r2
 800170e:	d101      	bne.n	8001714 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e05b      	b.n	80017cc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001714:	4b30      	ldr	r3, [pc, #192]	@ (80017d8 <HAL_RCC_ClockConfig+0x188>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2203      	movs	r2, #3
 800171a:	4393      	bics	r3, r2
 800171c:	0019      	movs	r1, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	4b2d      	ldr	r3, [pc, #180]	@ (80017d8 <HAL_RCC_ClockConfig+0x188>)
 8001724:	430a      	orrs	r2, r1
 8001726:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001728:	f7ff f9ee 	bl	8000b08 <HAL_GetTick>
 800172c:	0003      	movs	r3, r0
 800172e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001730:	e009      	b.n	8001746 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001732:	f7ff f9e9 	bl	8000b08 <HAL_GetTick>
 8001736:	0002      	movs	r2, r0
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	4a27      	ldr	r2, [pc, #156]	@ (80017dc <HAL_RCC_ClockConfig+0x18c>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e042      	b.n	80017cc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001746:	4b24      	ldr	r3, [pc, #144]	@ (80017d8 <HAL_RCC_ClockConfig+0x188>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	220c      	movs	r2, #12
 800174c:	401a      	ands	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	429a      	cmp	r2, r3
 8001756:	d1ec      	bne.n	8001732 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001758:	4b1e      	ldr	r3, [pc, #120]	@ (80017d4 <HAL_RCC_ClockConfig+0x184>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2201      	movs	r2, #1
 800175e:	4013      	ands	r3, r2
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d211      	bcs.n	800178a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b1b      	ldr	r3, [pc, #108]	@ (80017d4 <HAL_RCC_ClockConfig+0x184>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2201      	movs	r2, #1
 800176c:	4393      	bics	r3, r2
 800176e:	0019      	movs	r1, r3
 8001770:	4b18      	ldr	r3, [pc, #96]	@ (80017d4 <HAL_RCC_ClockConfig+0x184>)
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001778:	4b16      	ldr	r3, [pc, #88]	@ (80017d4 <HAL_RCC_ClockConfig+0x184>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2201      	movs	r2, #1
 800177e:	4013      	ands	r3, r2
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d001      	beq.n	800178a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e020      	b.n	80017cc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2204      	movs	r2, #4
 8001790:	4013      	ands	r3, r2
 8001792:	d009      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001794:	4b10      	ldr	r3, [pc, #64]	@ (80017d8 <HAL_RCC_ClockConfig+0x188>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	4a11      	ldr	r2, [pc, #68]	@ (80017e0 <HAL_RCC_ClockConfig+0x190>)
 800179a:	4013      	ands	r3, r2
 800179c:	0019      	movs	r1, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	4b0d      	ldr	r3, [pc, #52]	@ (80017d8 <HAL_RCC_ClockConfig+0x188>)
 80017a4:	430a      	orrs	r2, r1
 80017a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80017a8:	f000 f820 	bl	80017ec <HAL_RCC_GetSysClockFreq>
 80017ac:	0001      	movs	r1, r0
 80017ae:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <HAL_RCC_ClockConfig+0x188>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	091b      	lsrs	r3, r3, #4
 80017b4:	220f      	movs	r2, #15
 80017b6:	4013      	ands	r3, r2
 80017b8:	4a0a      	ldr	r2, [pc, #40]	@ (80017e4 <HAL_RCC_ClockConfig+0x194>)
 80017ba:	5cd3      	ldrb	r3, [r2, r3]
 80017bc:	000a      	movs	r2, r1
 80017be:	40da      	lsrs	r2, r3
 80017c0:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <HAL_RCC_ClockConfig+0x198>)
 80017c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80017c4:	2003      	movs	r0, #3
 80017c6:	f7ff f959 	bl	8000a7c <HAL_InitTick>
  
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	0018      	movs	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	b004      	add	sp, #16
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40022000 	.word	0x40022000
 80017d8:	40021000 	.word	0x40021000
 80017dc:	00001388 	.word	0x00001388
 80017e0:	fffff8ff 	.word	0xfffff8ff
 80017e4:	08003518 	.word	0x08003518
 80017e8:	20000008 	.word	0x20000008

080017ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001806:	4b20      	ldr	r3, [pc, #128]	@ (8001888 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	220c      	movs	r2, #12
 8001810:	4013      	ands	r3, r2
 8001812:	2b04      	cmp	r3, #4
 8001814:	d002      	beq.n	800181c <HAL_RCC_GetSysClockFreq+0x30>
 8001816:	2b08      	cmp	r3, #8
 8001818:	d003      	beq.n	8001822 <HAL_RCC_GetSysClockFreq+0x36>
 800181a:	e02c      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800181c:	4b1b      	ldr	r3, [pc, #108]	@ (800188c <HAL_RCC_GetSysClockFreq+0xa0>)
 800181e:	613b      	str	r3, [r7, #16]
      break;
 8001820:	e02c      	b.n	800187c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	0c9b      	lsrs	r3, r3, #18
 8001826:	220f      	movs	r2, #15
 8001828:	4013      	ands	r3, r2
 800182a:	4a19      	ldr	r2, [pc, #100]	@ (8001890 <HAL_RCC_GetSysClockFreq+0xa4>)
 800182c:	5cd3      	ldrb	r3, [r2, r3]
 800182e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001830:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001834:	220f      	movs	r2, #15
 8001836:	4013      	ands	r3, r2
 8001838:	4a16      	ldr	r2, [pc, #88]	@ (8001894 <HAL_RCC_GetSysClockFreq+0xa8>)
 800183a:	5cd3      	ldrb	r3, [r2, r3]
 800183c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	2380      	movs	r3, #128	@ 0x80
 8001842:	025b      	lsls	r3, r3, #9
 8001844:	4013      	ands	r3, r2
 8001846:	d009      	beq.n	800185c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	4810      	ldr	r0, [pc, #64]	@ (800188c <HAL_RCC_GetSysClockFreq+0xa0>)
 800184c:	f7fe fc5c 	bl	8000108 <__udivsi3>
 8001850:	0003      	movs	r3, r0
 8001852:	001a      	movs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4353      	muls	r3, r2
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	e009      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	000a      	movs	r2, r1
 8001860:	0152      	lsls	r2, r2, #5
 8001862:	1a52      	subs	r2, r2, r1
 8001864:	0193      	lsls	r3, r2, #6
 8001866:	1a9b      	subs	r3, r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	185b      	adds	r3, r3, r1
 800186c:	021b      	lsls	r3, r3, #8
 800186e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	613b      	str	r3, [r7, #16]
      break;
 8001874:	e002      	b.n	800187c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001876:	4b05      	ldr	r3, [pc, #20]	@ (800188c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001878:	613b      	str	r3, [r7, #16]
      break;
 800187a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800187c:	693b      	ldr	r3, [r7, #16]
}
 800187e:	0018      	movs	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	b006      	add	sp, #24
 8001884:	bd80      	pop	{r7, pc}
 8001886:	46c0      	nop			@ (mov r8, r8)
 8001888:	40021000 	.word	0x40021000
 800188c:	007a1200 	.word	0x007a1200
 8001890:	08003528 	.word	0x08003528
 8001894:	08003538 	.word	0x08003538

08001898 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e0a8      	b.n	80019fc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	2382      	movs	r3, #130	@ 0x82
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d009      	beq.n	80018d2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	61da      	str	r2, [r3, #28]
 80018c4:	e005      	b.n	80018d2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	225d      	movs	r2, #93	@ 0x5d
 80018dc:	5c9b      	ldrb	r3, [r3, r2]
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d107      	bne.n	80018f4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	225c      	movs	r2, #92	@ 0x5c
 80018e8:	2100      	movs	r1, #0
 80018ea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	0018      	movs	r0, r3
 80018f0:	f7fe ffba 	bl	8000868 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	225d      	movs	r2, #93	@ 0x5d
 80018f8:	2102      	movs	r1, #2
 80018fa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2140      	movs	r1, #64	@ 0x40
 8001908:	438a      	bics	r2, r1
 800190a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	23e0      	movs	r3, #224	@ 0xe0
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	429a      	cmp	r2, r3
 8001916:	d902      	bls.n	800191e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	e002      	b.n	8001924 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800191e:	2380      	movs	r3, #128	@ 0x80
 8001920:	015b      	lsls	r3, r3, #5
 8001922:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	23f0      	movs	r3, #240	@ 0xf0
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	429a      	cmp	r2, r3
 800192e:	d008      	beq.n	8001942 <HAL_SPI_Init+0xaa>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68da      	ldr	r2, [r3, #12]
 8001934:	23e0      	movs	r3, #224	@ 0xe0
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	429a      	cmp	r2, r3
 800193a:	d002      	beq.n	8001942 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	2382      	movs	r3, #130	@ 0x82
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	401a      	ands	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6899      	ldr	r1, [r3, #8]
 8001950:	2384      	movs	r3, #132	@ 0x84
 8001952:	021b      	lsls	r3, r3, #8
 8001954:	400b      	ands	r3, r1
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	2102      	movs	r1, #2
 800195e:	400b      	ands	r3, r1
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	2101      	movs	r1, #1
 8001968:	400b      	ands	r3, r1
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6999      	ldr	r1, [r3, #24]
 8001970:	2380      	movs	r3, #128	@ 0x80
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	400b      	ands	r3, r1
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	2138      	movs	r1, #56	@ 0x38
 800197e:	400b      	ands	r3, r1
 8001980:	431a      	orrs	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	2180      	movs	r1, #128	@ 0x80
 8001988:	400b      	ands	r3, r1
 800198a:	431a      	orrs	r2, r3
 800198c:	0011      	movs	r1, r2
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001992:	2380      	movs	r3, #128	@ 0x80
 8001994:	019b      	lsls	r3, r3, #6
 8001996:	401a      	ands	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	0c1b      	lsrs	r3, r3, #16
 80019a6:	2204      	movs	r2, #4
 80019a8:	401a      	ands	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ae:	2110      	movs	r1, #16
 80019b0:	400b      	ands	r3, r1
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019b8:	2108      	movs	r1, #8
 80019ba:	400b      	ands	r3, r1
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68d9      	ldr	r1, [r3, #12]
 80019c2:	23f0      	movs	r3, #240	@ 0xf0
 80019c4:	011b      	lsls	r3, r3, #4
 80019c6:	400b      	ands	r3, r1
 80019c8:	431a      	orrs	r2, r3
 80019ca:	0011      	movs	r1, r2
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	2380      	movs	r3, #128	@ 0x80
 80019d0:	015b      	lsls	r3, r3, #5
 80019d2:	401a      	ands	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	69da      	ldr	r2, [r3, #28]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4907      	ldr	r1, [pc, #28]	@ (8001a04 <HAL_SPI_Init+0x16c>)
 80019e8:	400a      	ands	r2, r1
 80019ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	225d      	movs	r2, #93	@ 0x5d
 80019f6:	2101      	movs	r1, #1
 80019f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	0018      	movs	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b004      	add	sp, #16
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	fffff7ff 	.word	0xfffff7ff

08001a08 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	1dbb      	adds	r3, r7, #6
 8001a16:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a18:	231f      	movs	r3, #31
 8001a1a:	18fb      	adds	r3, r7, r3
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	225c      	movs	r2, #92	@ 0x5c
 8001a24:	5c9b      	ldrb	r3, [r3, r2]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d101      	bne.n	8001a2e <HAL_SPI_Transmit+0x26>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e147      	b.n	8001cbe <HAL_SPI_Transmit+0x2b6>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	225c      	movs	r2, #92	@ 0x5c
 8001a32:	2101      	movs	r1, #1
 8001a34:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a36:	f7ff f867 	bl	8000b08 <HAL_GetTick>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001a3e:	2316      	movs	r3, #22
 8001a40:	18fb      	adds	r3, r7, r3
 8001a42:	1dba      	adds	r2, r7, #6
 8001a44:	8812      	ldrh	r2, [r2, #0]
 8001a46:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	225d      	movs	r2, #93	@ 0x5d
 8001a4c:	5c9b      	ldrb	r3, [r3, r2]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d004      	beq.n	8001a5e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001a54:	231f      	movs	r3, #31
 8001a56:	18fb      	adds	r3, r7, r3
 8001a58:	2202      	movs	r2, #2
 8001a5a:	701a      	strb	r2, [r3, #0]
    goto error;
 8001a5c:	e128      	b.n	8001cb0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_SPI_Transmit+0x64>
 8001a64:	1dbb      	adds	r3, r7, #6
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d104      	bne.n	8001a76 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001a6c:	231f      	movs	r3, #31
 8001a6e:	18fb      	adds	r3, r7, r3
 8001a70:	2201      	movs	r2, #1
 8001a72:	701a      	strb	r2, [r3, #0]
    goto error;
 8001a74:	e11c      	b.n	8001cb0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	225d      	movs	r2, #93	@ 0x5d
 8001a7a:	2103      	movs	r1, #3
 8001a7c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1dba      	adds	r2, r7, #6
 8001a8e:	8812      	ldrh	r2, [r2, #0]
 8001a90:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1dba      	adds	r2, r7, #6
 8001a96:	8812      	ldrh	r2, [r2, #0]
 8001a98:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2244      	movs	r2, #68	@ 0x44
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2246      	movs	r2, #70	@ 0x46
 8001aac:	2100      	movs	r1, #0
 8001aae:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	2380      	movs	r3, #128	@ 0x80
 8001ac2:	021b      	lsls	r3, r3, #8
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d110      	bne.n	8001aea <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2140      	movs	r1, #64	@ 0x40
 8001ad4:	438a      	bics	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2180      	movs	r1, #128	@ 0x80
 8001ae4:	01c9      	lsls	r1, r1, #7
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2240      	movs	r2, #64	@ 0x40
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b40      	cmp	r3, #64	@ 0x40
 8001af6:	d007      	beq.n	8001b08 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2140      	movs	r1, #64	@ 0x40
 8001b04:	430a      	orrs	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	23e0      	movs	r3, #224	@ 0xe0
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d952      	bls.n	8001bba <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d004      	beq.n	8001b26 <HAL_SPI_Transmit+0x11e>
 8001b1c:	2316      	movs	r3, #22
 8001b1e:	18fb      	adds	r3, r7, r3
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d143      	bne.n	8001bae <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b2a:	881a      	ldrh	r2, [r3, #0]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b36:	1c9a      	adds	r2, r3, #2
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	3b01      	subs	r3, #1
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b4a:	e030      	b.n	8001bae <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2202      	movs	r2, #2
 8001b54:	4013      	ands	r3, r2
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d112      	bne.n	8001b80 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b5e:	881a      	ldrh	r2, [r3, #0]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b6a:	1c9a      	adds	r2, r3, #2
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	3b01      	subs	r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001b7e:	e016      	b.n	8001bae <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b80:	f7fe ffc2 	bl	8000b08 <HAL_GetTick>
 8001b84:	0002      	movs	r2, r0
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d802      	bhi.n	8001b96 <HAL_SPI_Transmit+0x18e>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	3301      	adds	r3, #1
 8001b94:	d102      	bne.n	8001b9c <HAL_SPI_Transmit+0x194>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d108      	bne.n	8001bae <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8001b9c:	231f      	movs	r3, #31
 8001b9e:	18fb      	adds	r3, r7, r3
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	225d      	movs	r2, #93	@ 0x5d
 8001ba8:	2101      	movs	r1, #1
 8001baa:	5499      	strb	r1, [r3, r2]
          goto error;
 8001bac:	e080      	b.n	8001cb0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1c9      	bne.n	8001b4c <HAL_SPI_Transmit+0x144>
 8001bb8:	e053      	b.n	8001c62 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d004      	beq.n	8001bcc <HAL_SPI_Transmit+0x1c4>
 8001bc2:	2316      	movs	r3, #22
 8001bc4:	18fb      	adds	r3, r7, r3
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d145      	bne.n	8001c58 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	330c      	adds	r3, #12
 8001bd6:	7812      	ldrb	r2, [r2, #0]
 8001bd8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bde:	1c5a      	adds	r2, r3, #1
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	3b01      	subs	r3, #1
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001bf2:	e031      	b.n	8001c58 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d113      	bne.n	8001c2a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	330c      	adds	r3, #12
 8001c0c:	7812      	ldrb	r2, [r2, #0]
 8001c0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c14:	1c5a      	adds	r2, r3, #1
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	3b01      	subs	r3, #1
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001c28:	e016      	b.n	8001c58 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c2a:	f7fe ff6d 	bl	8000b08 <HAL_GetTick>
 8001c2e:	0002      	movs	r2, r0
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d802      	bhi.n	8001c40 <HAL_SPI_Transmit+0x238>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	d102      	bne.n	8001c46 <HAL_SPI_Transmit+0x23e>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d108      	bne.n	8001c58 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8001c46:	231f      	movs	r3, #31
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	225d      	movs	r2, #93	@ 0x5d
 8001c52:	2101      	movs	r1, #1
 8001c54:	5499      	strb	r1, [r3, r2]
          goto error;
 8001c56:	e02b      	b.n	8001cb0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1c8      	bne.n	8001bf4 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	6839      	ldr	r1, [r7, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f000 fcef 	bl	800264c <SPI_EndRxTxTransaction>
 8001c6e:	1e03      	subs	r3, r0, #0
 8001c70:	d002      	beq.n	8001c78 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2220      	movs	r2, #32
 8001c76:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d10a      	bne.n	8001c96 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c80:	2300      	movs	r3, #0
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d004      	beq.n	8001ca8 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8001c9e:	231f      	movs	r3, #31
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	701a      	strb	r2, [r3, #0]
 8001ca6:	e003      	b.n	8001cb0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	225d      	movs	r2, #93	@ 0x5d
 8001cac:	2101      	movs	r1, #1
 8001cae:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	225c      	movs	r2, #92	@ 0x5c
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001cb8:	231f      	movs	r3, #31
 8001cba:	18fb      	adds	r3, r7, r3
 8001cbc:	781b      	ldrb	r3, [r3, #0]
}
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b008      	add	sp, #32
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cc8:	b590      	push	{r4, r7, lr}
 8001cca:	b089      	sub	sp, #36	@ 0x24
 8001ccc:	af02      	add	r7, sp, #8
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	1dbb      	adds	r3, r7, #6
 8001cd6:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001cd8:	2117      	movs	r1, #23
 8001cda:	187b      	adds	r3, r7, r1
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	225d      	movs	r2, #93	@ 0x5d
 8001ce4:	5c9b      	ldrb	r3, [r3, r2]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d003      	beq.n	8001cf4 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8001cec:	187b      	adds	r3, r7, r1
 8001cee:	2202      	movs	r2, #2
 8001cf0:	701a      	strb	r2, [r3, #0]
    goto error;
 8001cf2:	e12b      	b.n	8001f4c <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	2382      	movs	r3, #130	@ 0x82
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d113      	bne.n	8001d28 <HAL_SPI_Receive+0x60>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10f      	bne.n	8001d28 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	225d      	movs	r2, #93	@ 0x5d
 8001d0c:	2104      	movs	r1, #4
 8001d0e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001d10:	1dbb      	adds	r3, r7, #6
 8001d12:	881c      	ldrh	r4, [r3, #0]
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	68b9      	ldr	r1, [r7, #8]
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	0023      	movs	r3, r4
 8001d20:	f000 f924 	bl	8001f6c <HAL_SPI_TransmitReceive>
 8001d24:	0003      	movs	r3, r0
 8001d26:	e118      	b.n	8001f5a <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	225c      	movs	r2, #92	@ 0x5c
 8001d2c:	5c9b      	ldrb	r3, [r3, r2]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_SPI_Receive+0x6e>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e111      	b.n	8001f5a <HAL_SPI_Receive+0x292>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	225c      	movs	r2, #92	@ 0x5c
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d3e:	f7fe fee3 	bl	8000b08 <HAL_GetTick>
 8001d42:	0003      	movs	r3, r0
 8001d44:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_SPI_Receive+0x8c>
 8001d4c:	1dbb      	adds	r3, r7, #6
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d104      	bne.n	8001d5e <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8001d54:	2317      	movs	r3, #23
 8001d56:	18fb      	adds	r3, r7, r3
 8001d58:	2201      	movs	r2, #1
 8001d5a:	701a      	strb	r2, [r3, #0]
    goto error;
 8001d5c:	e0f6      	b.n	8001f4c <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	225d      	movs	r2, #93	@ 0x5d
 8001d62:	2104      	movs	r1, #4
 8001d64:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1dba      	adds	r2, r7, #6
 8001d76:	2144      	movs	r1, #68	@ 0x44
 8001d78:	8812      	ldrh	r2, [r2, #0]
 8001d7a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	1dba      	adds	r2, r7, #6
 8001d80:	2146      	movs	r1, #70	@ 0x46
 8001d82:	8812      	ldrh	r2, [r2, #0]
 8001d84:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	23e0      	movs	r3, #224	@ 0xe0
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d908      	bls.n	8001dc2 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	496a      	ldr	r1, [pc, #424]	@ (8001f64 <HAL_SPI_Receive+0x29c>)
 8001dbc:	400a      	ands	r2, r1
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	e008      	b.n	8001dd4 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2180      	movs	r1, #128	@ 0x80
 8001dce:	0149      	lsls	r1, r1, #5
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	2380      	movs	r3, #128	@ 0x80
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d10f      	bne.n	8001e00 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2140      	movs	r1, #64	@ 0x40
 8001dec:	438a      	bics	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	495b      	ldr	r1, [pc, #364]	@ (8001f68 <HAL_SPI_Receive+0x2a0>)
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2240      	movs	r2, #64	@ 0x40
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b40      	cmp	r3, #64	@ 0x40
 8001e0c:	d007      	beq.n	8001e1e <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2140      	movs	r1, #64	@ 0x40
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	23e0      	movs	r3, #224	@ 0xe0
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d900      	bls.n	8001e2c <HAL_SPI_Receive+0x164>
 8001e2a:	e071      	b.n	8001f10 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001e2c:	e035      	b.n	8001e9a <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2201      	movs	r2, #1
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d117      	bne.n	8001e6c <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	330c      	adds	r3, #12
 8001e42:	001a      	movs	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e48:	7812      	ldrb	r2, [r2, #0]
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	1c5a      	adds	r2, r3, #1
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2246      	movs	r2, #70	@ 0x46
 8001e5c:	5a9b      	ldrh	r3, [r3, r2]
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b299      	uxth	r1, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2246      	movs	r2, #70	@ 0x46
 8001e68:	5299      	strh	r1, [r3, r2]
 8001e6a:	e016      	b.n	8001e9a <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e6c:	f7fe fe4c 	bl	8000b08 <HAL_GetTick>
 8001e70:	0002      	movs	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d802      	bhi.n	8001e82 <HAL_SPI_Receive+0x1ba>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	d102      	bne.n	8001e88 <HAL_SPI_Receive+0x1c0>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d108      	bne.n	8001e9a <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8001e88:	2317      	movs	r3, #23
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	225d      	movs	r2, #93	@ 0x5d
 8001e94:	2101      	movs	r1, #1
 8001e96:	5499      	strb	r1, [r3, r2]
          goto error;
 8001e98:	e058      	b.n	8001f4c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2246      	movs	r2, #70	@ 0x46
 8001e9e:	5a9b      	ldrh	r3, [r3, r2]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1c3      	bne.n	8001e2e <HAL_SPI_Receive+0x166>
 8001ea6:	e039      	b.n	8001f1c <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d115      	bne.n	8001ee2 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec0:	b292      	uxth	r2, r2
 8001ec2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec8:	1c9a      	adds	r2, r3, #2
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2246      	movs	r2, #70	@ 0x46
 8001ed2:	5a9b      	ldrh	r3, [r3, r2]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b299      	uxth	r1, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2246      	movs	r2, #70	@ 0x46
 8001ede:	5299      	strh	r1, [r3, r2]
 8001ee0:	e016      	b.n	8001f10 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ee2:	f7fe fe11 	bl	8000b08 <HAL_GetTick>
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d802      	bhi.n	8001ef8 <HAL_SPI_Receive+0x230>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	d102      	bne.n	8001efe <HAL_SPI_Receive+0x236>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d108      	bne.n	8001f10 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8001efe:	2317      	movs	r3, #23
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	2203      	movs	r2, #3
 8001f04:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	225d      	movs	r2, #93	@ 0x5d
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	5499      	strb	r1, [r3, r2]
          goto error;
 8001f0e:	e01d      	b.n	8001f4c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2246      	movs	r2, #70	@ 0x46
 8001f14:	5a9b      	ldrh	r3, [r3, r2]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1c5      	bne.n	8001ea8 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	6839      	ldr	r1, [r7, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	0018      	movs	r0, r3
 8001f24:	f000 fb34 	bl	8002590 <SPI_EndRxTransaction>
 8001f28:	1e03      	subs	r3, r0, #0
 8001f2a:	d002      	beq.n	8001f32 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d004      	beq.n	8001f44 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8001f3a:	2317      	movs	r3, #23
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	2201      	movs	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]
 8001f42:	e003      	b.n	8001f4c <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	225d      	movs	r2, #93	@ 0x5d
 8001f48:	2101      	movs	r1, #1
 8001f4a:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	225c      	movs	r2, #92	@ 0x5c
 8001f50:	2100      	movs	r1, #0
 8001f52:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001f54:	2317      	movs	r3, #23
 8001f56:	18fb      	adds	r3, r7, r3
 8001f58:	781b      	ldrb	r3, [r3, #0]
}
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b007      	add	sp, #28
 8001f60:	bd90      	pop	{r4, r7, pc}
 8001f62:	46c0      	nop			@ (mov r8, r8)
 8001f64:	ffffefff 	.word	0xffffefff
 8001f68:	ffffbfff 	.word	0xffffbfff

08001f6c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	@ 0x28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	001a      	movs	r2, r3
 8001f7a:	1cbb      	adds	r3, r7, #2
 8001f7c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001f82:	2323      	movs	r3, #35	@ 0x23
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	225c      	movs	r2, #92	@ 0x5c
 8001f8e:	5c9b      	ldrb	r3, [r3, r2]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <HAL_SPI_TransmitReceive+0x2c>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e1c4      	b.n	8002322 <HAL_SPI_TransmitReceive+0x3b6>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	225c      	movs	r2, #92	@ 0x5c
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fa0:	f7fe fdb2 	bl	8000b08 <HAL_GetTick>
 8001fa4:	0003      	movs	r3, r0
 8001fa6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001fa8:	201b      	movs	r0, #27
 8001faa:	183b      	adds	r3, r7, r0
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	215d      	movs	r1, #93	@ 0x5d
 8001fb0:	5c52      	ldrb	r2, [r2, r1]
 8001fb2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001fba:	2312      	movs	r3, #18
 8001fbc:	18fb      	adds	r3, r7, r3
 8001fbe:	1cba      	adds	r2, r7, #2
 8001fc0:	8812      	ldrh	r2, [r2, #0]
 8001fc2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001fc4:	183b      	adds	r3, r7, r0
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d011      	beq.n	8001ff0 <HAL_SPI_TransmitReceive+0x84>
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	2382      	movs	r3, #130	@ 0x82
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d107      	bne.n	8001fe6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d103      	bne.n	8001fe6 <HAL_SPI_TransmitReceive+0x7a>
 8001fde:	183b      	adds	r3, r7, r0
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d004      	beq.n	8001ff0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001fe6:	2323      	movs	r3, #35	@ 0x23
 8001fe8:	18fb      	adds	r3, r7, r3
 8001fea:	2202      	movs	r2, #2
 8001fec:	701a      	strb	r2, [r3, #0]
    goto error;
 8001fee:	e191      	b.n	8002314 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d006      	beq.n	8002004 <HAL_SPI_TransmitReceive+0x98>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_SPI_TransmitReceive+0x98>
 8001ffc:	1cbb      	adds	r3, r7, #2
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d104      	bne.n	800200e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002004:	2323      	movs	r3, #35	@ 0x23
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]
    goto error;
 800200c:	e182      	b.n	8002314 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	225d      	movs	r2, #93	@ 0x5d
 8002012:	5c9b      	ldrb	r3, [r3, r2]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b04      	cmp	r3, #4
 8002018:	d003      	beq.n	8002022 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	225d      	movs	r2, #93	@ 0x5d
 800201e:	2105      	movs	r1, #5
 8002020:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1cba      	adds	r2, r7, #2
 8002032:	2146      	movs	r1, #70	@ 0x46
 8002034:	8812      	ldrh	r2, [r2, #0]
 8002036:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1cba      	adds	r2, r7, #2
 800203c:	2144      	movs	r1, #68	@ 0x44
 800203e:	8812      	ldrh	r2, [r2, #0]
 8002040:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1cba      	adds	r2, r7, #2
 800204c:	8812      	ldrh	r2, [r2, #0]
 800204e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	1cba      	adds	r2, r7, #2
 8002054:	8812      	ldrh	r2, [r2, #0]
 8002056:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	23e0      	movs	r3, #224	@ 0xe0
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	429a      	cmp	r2, r3
 800206e:	d908      	bls.n	8002082 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	49ac      	ldr	r1, [pc, #688]	@ (800232c <HAL_SPI_TransmitReceive+0x3c0>)
 800207c:	400a      	ands	r2, r1
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	e008      	b.n	8002094 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2180      	movs	r1, #128	@ 0x80
 800208e:	0149      	lsls	r1, r1, #5
 8002090:	430a      	orrs	r2, r1
 8002092:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2240      	movs	r2, #64	@ 0x40
 800209c:	4013      	ands	r3, r2
 800209e:	2b40      	cmp	r3, #64	@ 0x40
 80020a0:	d007      	beq.n	80020b2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2140      	movs	r1, #64	@ 0x40
 80020ae:	430a      	orrs	r2, r1
 80020b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	23e0      	movs	r3, #224	@ 0xe0
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d800      	bhi.n	80020c0 <HAL_SPI_TransmitReceive+0x154>
 80020be:	e083      	b.n	80021c8 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_SPI_TransmitReceive+0x168>
 80020c8:	2312      	movs	r3, #18
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d000      	beq.n	80020d4 <HAL_SPI_TransmitReceive+0x168>
 80020d2:	e06d      	b.n	80021b0 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d8:	881a      	ldrh	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020e4:	1c9a      	adds	r2, r3, #2
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020f8:	e05a      	b.n	80021b0 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2202      	movs	r2, #2
 8002102:	4013      	ands	r3, r2
 8002104:	2b02      	cmp	r3, #2
 8002106:	d11b      	bne.n	8002140 <HAL_SPI_TransmitReceive+0x1d4>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800210c:	b29b      	uxth	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d016      	beq.n	8002140 <HAL_SPI_TransmitReceive+0x1d4>
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	2b01      	cmp	r3, #1
 8002116:	d113      	bne.n	8002140 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800211c:	881a      	ldrh	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002128:	1c9a      	adds	r2, r3, #2
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2201      	movs	r2, #1
 8002148:	4013      	ands	r3, r2
 800214a:	2b01      	cmp	r3, #1
 800214c:	d11c      	bne.n	8002188 <HAL_SPI_TransmitReceive+0x21c>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2246      	movs	r2, #70	@ 0x46
 8002152:	5a9b      	ldrh	r3, [r3, r2]
 8002154:	b29b      	uxth	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d016      	beq.n	8002188 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002164:	b292      	uxth	r2, r2
 8002166:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216c:	1c9a      	adds	r2, r3, #2
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2246      	movs	r2, #70	@ 0x46
 8002176:	5a9b      	ldrh	r3, [r3, r2]
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b01      	subs	r3, #1
 800217c:	b299      	uxth	r1, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2246      	movs	r2, #70	@ 0x46
 8002182:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002184:	2301      	movs	r3, #1
 8002186:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002188:	f7fe fcbe 	bl	8000b08 <HAL_GetTick>
 800218c:	0002      	movs	r2, r0
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002194:	429a      	cmp	r2, r3
 8002196:	d80b      	bhi.n	80021b0 <HAL_SPI_TransmitReceive+0x244>
 8002198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800219a:	3301      	adds	r3, #1
 800219c:	d008      	beq.n	80021b0 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800219e:	2323      	movs	r3, #35	@ 0x23
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	2203      	movs	r2, #3
 80021a4:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	225d      	movs	r2, #93	@ 0x5d
 80021aa:	2101      	movs	r1, #1
 80021ac:	5499      	strb	r1, [r3, r2]
        goto error;
 80021ae:	e0b1      	b.n	8002314 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d19f      	bne.n	80020fa <HAL_SPI_TransmitReceive+0x18e>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2246      	movs	r2, #70	@ 0x46
 80021be:	5a9b      	ldrh	r3, [r3, r2]
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d199      	bne.n	80020fa <HAL_SPI_TransmitReceive+0x18e>
 80021c6:	e089      	b.n	80022dc <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d005      	beq.n	80021dc <HAL_SPI_TransmitReceive+0x270>
 80021d0:	2312      	movs	r3, #18
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d000      	beq.n	80021dc <HAL_SPI_TransmitReceive+0x270>
 80021da:	e074      	b.n	80022c6 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	330c      	adds	r3, #12
 80021e6:	7812      	ldrb	r2, [r2, #0]
 80021e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	3b01      	subs	r3, #1
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002202:	e060      	b.n	80022c6 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2202      	movs	r2, #2
 800220c:	4013      	ands	r3, r2
 800220e:	2b02      	cmp	r3, #2
 8002210:	d11c      	bne.n	800224c <HAL_SPI_TransmitReceive+0x2e0>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002216:	b29b      	uxth	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d017      	beq.n	800224c <HAL_SPI_TransmitReceive+0x2e0>
 800221c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221e:	2b01      	cmp	r3, #1
 8002220:	d114      	bne.n	800224c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	330c      	adds	r3, #12
 800222c:	7812      	ldrb	r2, [r2, #0]
 800222e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800223e:	b29b      	uxth	r3, r3
 8002240:	3b01      	subs	r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2201      	movs	r2, #1
 8002254:	4013      	ands	r3, r2
 8002256:	2b01      	cmp	r3, #1
 8002258:	d11e      	bne.n	8002298 <HAL_SPI_TransmitReceive+0x32c>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2246      	movs	r2, #70	@ 0x46
 800225e:	5a9b      	ldrh	r3, [r3, r2]
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d018      	beq.n	8002298 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	330c      	adds	r3, #12
 800226c:	001a      	movs	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	7812      	ldrb	r2, [r2, #0]
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2246      	movs	r2, #70	@ 0x46
 8002286:	5a9b      	ldrh	r3, [r3, r2]
 8002288:	b29b      	uxth	r3, r3
 800228a:	3b01      	subs	r3, #1
 800228c:	b299      	uxth	r1, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2246      	movs	r2, #70	@ 0x46
 8002292:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002294:	2301      	movs	r3, #1
 8002296:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002298:	f7fe fc36 	bl	8000b08 <HAL_GetTick>
 800229c:	0002      	movs	r2, r0
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d802      	bhi.n	80022ae <HAL_SPI_TransmitReceive+0x342>
 80022a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022aa:	3301      	adds	r3, #1
 80022ac:	d102      	bne.n	80022b4 <HAL_SPI_TransmitReceive+0x348>
 80022ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d108      	bne.n	80022c6 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80022b4:	2323      	movs	r3, #35	@ 0x23
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	2203      	movs	r2, #3
 80022ba:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	225d      	movs	r2, #93	@ 0x5d
 80022c0:	2101      	movs	r1, #1
 80022c2:	5499      	strb	r1, [r3, r2]
        goto error;
 80022c4:	e026      	b.n	8002314 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d199      	bne.n	8002204 <HAL_SPI_TransmitReceive+0x298>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2246      	movs	r2, #70	@ 0x46
 80022d4:	5a9b      	ldrh	r3, [r3, r2]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d193      	bne.n	8002204 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022dc:	69fa      	ldr	r2, [r7, #28]
 80022de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	0018      	movs	r0, r3
 80022e4:	f000 f9b2 	bl	800264c <SPI_EndRxTxTransaction>
 80022e8:	1e03      	subs	r3, r0, #0
 80022ea:	d006      	beq.n	80022fa <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80022ec:	2323      	movs	r3, #35	@ 0x23
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	2201      	movs	r2, #1
 80022f2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2220      	movs	r2, #32
 80022f8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d004      	beq.n	800230c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8002302:	2323      	movs	r3, #35	@ 0x23
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	2201      	movs	r2, #1
 8002308:	701a      	strb	r2, [r3, #0]
 800230a:	e003      	b.n	8002314 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	225d      	movs	r2, #93	@ 0x5d
 8002310:	2101      	movs	r1, #1
 8002312:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	225c      	movs	r2, #92	@ 0x5c
 8002318:	2100      	movs	r1, #0
 800231a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800231c:	2323      	movs	r3, #35	@ 0x23
 800231e:	18fb      	adds	r3, r7, r3
 8002320:	781b      	ldrb	r3, [r3, #0]
}
 8002322:	0018      	movs	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	b00a      	add	sp, #40	@ 0x28
 8002328:	bd80      	pop	{r7, pc}
 800232a:	46c0      	nop			@ (mov r8, r8)
 800232c:	ffffefff 	.word	0xffffefff

08002330 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	1dfb      	adds	r3, r7, #7
 800233e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002340:	f7fe fbe2 	bl	8000b08 <HAL_GetTick>
 8002344:	0002      	movs	r2, r0
 8002346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002348:	1a9b      	subs	r3, r3, r2
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	18d3      	adds	r3, r2, r3
 800234e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002350:	f7fe fbda 	bl	8000b08 <HAL_GetTick>
 8002354:	0003      	movs	r3, r0
 8002356:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002358:	4b3a      	ldr	r3, [pc, #232]	@ (8002444 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	015b      	lsls	r3, r3, #5
 800235e:	0d1b      	lsrs	r3, r3, #20
 8002360:	69fa      	ldr	r2, [r7, #28]
 8002362:	4353      	muls	r3, r2
 8002364:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002366:	e058      	b.n	800241a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	3301      	adds	r3, #1
 800236c:	d055      	beq.n	800241a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800236e:	f7fe fbcb 	bl	8000b08 <HAL_GetTick>
 8002372:	0002      	movs	r2, r0
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	69fa      	ldr	r2, [r7, #28]
 800237a:	429a      	cmp	r2, r3
 800237c:	d902      	bls.n	8002384 <SPI_WaitFlagStateUntilTimeout+0x54>
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d142      	bne.n	800240a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	21e0      	movs	r1, #224	@ 0xe0
 8002390:	438a      	bics	r2, r1
 8002392:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	2382      	movs	r3, #130	@ 0x82
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	429a      	cmp	r2, r3
 800239e:	d113      	bne.n	80023c8 <SPI_WaitFlagStateUntilTimeout+0x98>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	2380      	movs	r3, #128	@ 0x80
 80023a6:	021b      	lsls	r3, r3, #8
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d005      	beq.n	80023b8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	2380      	movs	r3, #128	@ 0x80
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d107      	bne.n	80023c8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2140      	movs	r1, #64	@ 0x40
 80023c4:	438a      	bics	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023cc:	2380      	movs	r3, #128	@ 0x80
 80023ce:	019b      	lsls	r3, r3, #6
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d110      	bne.n	80023f6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	491a      	ldr	r1, [pc, #104]	@ (8002448 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80023e0:	400a      	ands	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2180      	movs	r1, #128	@ 0x80
 80023f0:	0189      	lsls	r1, r1, #6
 80023f2:	430a      	orrs	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	225d      	movs	r2, #93	@ 0x5d
 80023fa:	2101      	movs	r1, #1
 80023fc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	225c      	movs	r2, #92	@ 0x5c
 8002402:	2100      	movs	r1, #0
 8002404:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e017      	b.n	800243a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	3b01      	subs	r3, #1
 8002418:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	4013      	ands	r3, r2
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	425a      	negs	r2, r3
 800242a:	4153      	adcs	r3, r2
 800242c:	b2db      	uxtb	r3, r3
 800242e:	001a      	movs	r2, r3
 8002430:	1dfb      	adds	r3, r7, #7
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d197      	bne.n	8002368 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	0018      	movs	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	b008      	add	sp, #32
 8002440:	bd80      	pop	{r7, pc}
 8002442:	46c0      	nop			@ (mov r8, r8)
 8002444:	20000008 	.word	0x20000008
 8002448:	ffffdfff 	.word	0xffffdfff

0800244c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08a      	sub	sp, #40	@ 0x28
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800245a:	2317      	movs	r3, #23
 800245c:	18fb      	adds	r3, r7, r3
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002462:	f7fe fb51 	bl	8000b08 <HAL_GetTick>
 8002466:	0002      	movs	r2, r0
 8002468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246a:	1a9b      	subs	r3, r3, r2
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	18d3      	adds	r3, r2, r3
 8002470:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002472:	f7fe fb49 	bl	8000b08 <HAL_GetTick>
 8002476:	0003      	movs	r3, r0
 8002478:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	330c      	adds	r3, #12
 8002480:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002482:	4b41      	ldr	r3, [pc, #260]	@ (8002588 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	0013      	movs	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	189b      	adds	r3, r3, r2
 800248c:	00da      	lsls	r2, r3, #3
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	0d1b      	lsrs	r3, r3, #20
 8002492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002494:	4353      	muls	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002498:	e068      	b.n	800256c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	23c0      	movs	r3, #192	@ 0xc0
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d10a      	bne.n	80024ba <SPI_WaitFifoStateUntilTimeout+0x6e>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d107      	bne.n	80024ba <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	2117      	movs	r1, #23
 80024b2:	187b      	adds	r3, r7, r1
 80024b4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80024b6:	187b      	adds	r3, r7, r1
 80024b8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	3301      	adds	r3, #1
 80024be:	d055      	beq.n	800256c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024c0:	f7fe fb22 	bl	8000b08 <HAL_GetTick>
 80024c4:	0002      	movs	r2, r0
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d902      	bls.n	80024d6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80024d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d142      	bne.n	800255c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	21e0      	movs	r1, #224	@ 0xe0
 80024e2:	438a      	bics	r2, r1
 80024e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	2382      	movs	r3, #130	@ 0x82
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d113      	bne.n	800251a <SPI_WaitFifoStateUntilTimeout+0xce>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	2380      	movs	r3, #128	@ 0x80
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d005      	beq.n	800250a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	2380      	movs	r3, #128	@ 0x80
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	429a      	cmp	r2, r3
 8002508:	d107      	bne.n	800251a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2140      	movs	r1, #64	@ 0x40
 8002516:	438a      	bics	r2, r1
 8002518:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800251e:	2380      	movs	r3, #128	@ 0x80
 8002520:	019b      	lsls	r3, r3, #6
 8002522:	429a      	cmp	r2, r3
 8002524:	d110      	bne.n	8002548 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4916      	ldr	r1, [pc, #88]	@ (800258c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002532:	400a      	ands	r2, r1
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2180      	movs	r1, #128	@ 0x80
 8002542:	0189      	lsls	r1, r1, #6
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	225d      	movs	r2, #93	@ 0x5d
 800254c:	2101      	movs	r1, #1
 800254e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	225c      	movs	r2, #92	@ 0x5c
 8002554:	2100      	movs	r1, #0
 8002556:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e010      	b.n	800257e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002562:	2300      	movs	r3, #0
 8002564:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	3b01      	subs	r3, #1
 800256a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	4013      	ands	r3, r2
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	429a      	cmp	r2, r3
 800257a:	d18e      	bne.n	800249a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	0018      	movs	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	b00a      	add	sp, #40	@ 0x28
 8002584:	bd80      	pop	{r7, pc}
 8002586:	46c0      	nop			@ (mov r8, r8)
 8002588:	20000008 	.word	0x20000008
 800258c:	ffffdfff 	.word	0xffffdfff

08002590 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af02      	add	r7, sp, #8
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	2382      	movs	r3, #130	@ 0x82
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d113      	bne.n	80025d0 <SPI_EndRxTransaction+0x40>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	2380      	movs	r3, #128	@ 0x80
 80025ae:	021b      	lsls	r3, r3, #8
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d005      	beq.n	80025c0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	2380      	movs	r3, #128	@ 0x80
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	429a      	cmp	r2, r3
 80025be:	d107      	bne.n	80025d0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2140      	movs	r1, #64	@ 0x40
 80025cc:	438a      	bics	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	0013      	movs	r3, r2
 80025da:	2200      	movs	r2, #0
 80025dc:	2180      	movs	r1, #128	@ 0x80
 80025de:	f7ff fea7 	bl	8002330 <SPI_WaitFlagStateUntilTimeout>
 80025e2:	1e03      	subs	r3, r0, #0
 80025e4:	d007      	beq.n	80025f6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ea:	2220      	movs	r2, #32
 80025ec:	431a      	orrs	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e026      	b.n	8002644 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	2382      	movs	r3, #130	@ 0x82
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	429a      	cmp	r2, r3
 8002600:	d11f      	bne.n	8002642 <SPI_EndRxTransaction+0xb2>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	2380      	movs	r3, #128	@ 0x80
 8002608:	021b      	lsls	r3, r3, #8
 800260a:	429a      	cmp	r2, r3
 800260c:	d005      	beq.n	800261a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	2380      	movs	r3, #128	@ 0x80
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	429a      	cmp	r2, r3
 8002618:	d113      	bne.n	8002642 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	23c0      	movs	r3, #192	@ 0xc0
 800261e:	00d9      	lsls	r1, r3, #3
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	0013      	movs	r3, r2
 8002628:	2200      	movs	r2, #0
 800262a:	f7ff ff0f 	bl	800244c <SPI_WaitFifoStateUntilTimeout>
 800262e:	1e03      	subs	r3, r0, #0
 8002630:	d007      	beq.n	8002642 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002636:	2220      	movs	r2, #32
 8002638:	431a      	orrs	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e000      	b.n	8002644 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	0018      	movs	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	b004      	add	sp, #16
 800264a:	bd80      	pop	{r7, pc}

0800264c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af02      	add	r7, sp, #8
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	23c0      	movs	r3, #192	@ 0xc0
 800265c:	0159      	lsls	r1, r3, #5
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	0013      	movs	r3, r2
 8002666:	2200      	movs	r2, #0
 8002668:	f7ff fef0 	bl	800244c <SPI_WaitFifoStateUntilTimeout>
 800266c:	1e03      	subs	r3, r0, #0
 800266e:	d007      	beq.n	8002680 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002674:	2220      	movs	r2, #32
 8002676:	431a      	orrs	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e027      	b.n	80026d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	0013      	movs	r3, r2
 800268a:	2200      	movs	r2, #0
 800268c:	2180      	movs	r1, #128	@ 0x80
 800268e:	f7ff fe4f 	bl	8002330 <SPI_WaitFlagStateUntilTimeout>
 8002692:	1e03      	subs	r3, r0, #0
 8002694:	d007      	beq.n	80026a6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800269a:	2220      	movs	r2, #32
 800269c:	431a      	orrs	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e014      	b.n	80026d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	23c0      	movs	r3, #192	@ 0xc0
 80026aa:	00d9      	lsls	r1, r3, #3
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	0013      	movs	r3, r2
 80026b4:	2200      	movs	r2, #0
 80026b6:	f7ff fec9 	bl	800244c <SPI_WaitFifoStateUntilTimeout>
 80026ba:	1e03      	subs	r3, r0, #0
 80026bc:	d007      	beq.n	80026ce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026c2:	2220      	movs	r2, #32
 80026c4:	431a      	orrs	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e000      	b.n	80026d0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b004      	add	sp, #16
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e042      	b.n	8002770 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	223d      	movs	r2, #61	@ 0x3d
 80026ee:	5c9b      	ldrb	r3, [r3, r2]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d107      	bne.n	8002706 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	223c      	movs	r2, #60	@ 0x3c
 80026fa:	2100      	movs	r1, #0
 80026fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	0018      	movs	r0, r3
 8002702:	f7fe f8ff 	bl	8000904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	223d      	movs	r2, #61	@ 0x3d
 800270a:	2102      	movs	r1, #2
 800270c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3304      	adds	r3, #4
 8002716:	0019      	movs	r1, r3
 8002718:	0010      	movs	r0, r2
 800271a:	f000 fad1 	bl	8002cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2246      	movs	r2, #70	@ 0x46
 8002722:	2101      	movs	r1, #1
 8002724:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	223e      	movs	r2, #62	@ 0x3e
 800272a:	2101      	movs	r1, #1
 800272c:	5499      	strb	r1, [r3, r2]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	223f      	movs	r2, #63	@ 0x3f
 8002732:	2101      	movs	r1, #1
 8002734:	5499      	strb	r1, [r3, r2]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2240      	movs	r2, #64	@ 0x40
 800273a:	2101      	movs	r1, #1
 800273c:	5499      	strb	r1, [r3, r2]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2241      	movs	r2, #65	@ 0x41
 8002742:	2101      	movs	r1, #1
 8002744:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2242      	movs	r2, #66	@ 0x42
 800274a:	2101      	movs	r1, #1
 800274c:	5499      	strb	r1, [r3, r2]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2243      	movs	r2, #67	@ 0x43
 8002752:	2101      	movs	r1, #1
 8002754:	5499      	strb	r1, [r3, r2]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2244      	movs	r2, #68	@ 0x44
 800275a:	2101      	movs	r1, #1
 800275c:	5499      	strb	r1, [r3, r2]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2245      	movs	r2, #69	@ 0x45
 8002762:	2101      	movs	r1, #1
 8002764:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	223d      	movs	r2, #61	@ 0x3d
 800276a:	2101      	movs	r1, #1
 800276c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	0018      	movs	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	b002      	add	sp, #8
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e042      	b.n	8002810 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	223d      	movs	r2, #61	@ 0x3d
 800278e:	5c9b      	ldrb	r3, [r3, r2]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d107      	bne.n	80027a6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	223c      	movs	r2, #60	@ 0x3c
 800279a:	2100      	movs	r1, #0
 800279c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	0018      	movs	r0, r3
 80027a2:	f000 f839 	bl	8002818 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	223d      	movs	r2, #61	@ 0x3d
 80027aa:	2102      	movs	r1, #2
 80027ac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3304      	adds	r3, #4
 80027b6:	0019      	movs	r1, r3
 80027b8:	0010      	movs	r0, r2
 80027ba:	f000 fa81 	bl	8002cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2246      	movs	r2, #70	@ 0x46
 80027c2:	2101      	movs	r1, #1
 80027c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	223e      	movs	r2, #62	@ 0x3e
 80027ca:	2101      	movs	r1, #1
 80027cc:	5499      	strb	r1, [r3, r2]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	223f      	movs	r2, #63	@ 0x3f
 80027d2:	2101      	movs	r1, #1
 80027d4:	5499      	strb	r1, [r3, r2]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2240      	movs	r2, #64	@ 0x40
 80027da:	2101      	movs	r1, #1
 80027dc:	5499      	strb	r1, [r3, r2]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2241      	movs	r2, #65	@ 0x41
 80027e2:	2101      	movs	r1, #1
 80027e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2242      	movs	r2, #66	@ 0x42
 80027ea:	2101      	movs	r1, #1
 80027ec:	5499      	strb	r1, [r3, r2]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2243      	movs	r2, #67	@ 0x43
 80027f2:	2101      	movs	r1, #1
 80027f4:	5499      	strb	r1, [r3, r2]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2244      	movs	r2, #68	@ 0x44
 80027fa:	2101      	movs	r1, #1
 80027fc:	5499      	strb	r1, [r3, r2]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2245      	movs	r2, #69	@ 0x45
 8002802:	2101      	movs	r1, #1
 8002804:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	223d      	movs	r2, #61	@ 0x3d
 800280a:	2101      	movs	r1, #1
 800280c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	0018      	movs	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	b002      	add	sp, #8
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002820:	46c0      	nop			@ (mov r8, r8)
 8002822:	46bd      	mov	sp, r7
 8002824:	b002      	add	sp, #8
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d108      	bne.n	800284a <HAL_TIM_PWM_Start+0x22>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	223e      	movs	r2, #62	@ 0x3e
 800283c:	5c9b      	ldrb	r3, [r3, r2]
 800283e:	b2db      	uxtb	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	1e5a      	subs	r2, r3, #1
 8002844:	4193      	sbcs	r3, r2
 8002846:	b2db      	uxtb	r3, r3
 8002848:	e01f      	b.n	800288a <HAL_TIM_PWM_Start+0x62>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2b04      	cmp	r3, #4
 800284e:	d108      	bne.n	8002862 <HAL_TIM_PWM_Start+0x3a>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	223f      	movs	r2, #63	@ 0x3f
 8002854:	5c9b      	ldrb	r3, [r3, r2]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	3b01      	subs	r3, #1
 800285a:	1e5a      	subs	r2, r3, #1
 800285c:	4193      	sbcs	r3, r2
 800285e:	b2db      	uxtb	r3, r3
 8002860:	e013      	b.n	800288a <HAL_TIM_PWM_Start+0x62>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b08      	cmp	r3, #8
 8002866:	d108      	bne.n	800287a <HAL_TIM_PWM_Start+0x52>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2240      	movs	r2, #64	@ 0x40
 800286c:	5c9b      	ldrb	r3, [r3, r2]
 800286e:	b2db      	uxtb	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	1e5a      	subs	r2, r3, #1
 8002874:	4193      	sbcs	r3, r2
 8002876:	b2db      	uxtb	r3, r3
 8002878:	e007      	b.n	800288a <HAL_TIM_PWM_Start+0x62>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2241      	movs	r2, #65	@ 0x41
 800287e:	5c9b      	ldrb	r3, [r3, r2]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	3b01      	subs	r3, #1
 8002884:	1e5a      	subs	r2, r3, #1
 8002886:	4193      	sbcs	r3, r2
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e06e      	b.n	8002970 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d104      	bne.n	80028a2 <HAL_TIM_PWM_Start+0x7a>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	223e      	movs	r2, #62	@ 0x3e
 800289c:	2102      	movs	r1, #2
 800289e:	5499      	strb	r1, [r3, r2]
 80028a0:	e013      	b.n	80028ca <HAL_TIM_PWM_Start+0xa2>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d104      	bne.n	80028b2 <HAL_TIM_PWM_Start+0x8a>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	223f      	movs	r2, #63	@ 0x3f
 80028ac:	2102      	movs	r1, #2
 80028ae:	5499      	strb	r1, [r3, r2]
 80028b0:	e00b      	b.n	80028ca <HAL_TIM_PWM_Start+0xa2>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d104      	bne.n	80028c2 <HAL_TIM_PWM_Start+0x9a>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2240      	movs	r2, #64	@ 0x40
 80028bc:	2102      	movs	r1, #2
 80028be:	5499      	strb	r1, [r3, r2]
 80028c0:	e003      	b.n	80028ca <HAL_TIM_PWM_Start+0xa2>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2241      	movs	r2, #65	@ 0x41
 80028c6:	2102      	movs	r1, #2
 80028c8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6839      	ldr	r1, [r7, #0]
 80028d0:	2201      	movs	r2, #1
 80028d2:	0018      	movs	r0, r3
 80028d4:	f000 fd0e 	bl	80032f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a26      	ldr	r2, [pc, #152]	@ (8002978 <HAL_TIM_PWM_Start+0x150>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d00e      	beq.n	8002900 <HAL_TIM_PWM_Start+0xd8>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a25      	ldr	r2, [pc, #148]	@ (800297c <HAL_TIM_PWM_Start+0x154>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d009      	beq.n	8002900 <HAL_TIM_PWM_Start+0xd8>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a23      	ldr	r2, [pc, #140]	@ (8002980 <HAL_TIM_PWM_Start+0x158>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d004      	beq.n	8002900 <HAL_TIM_PWM_Start+0xd8>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a22      	ldr	r2, [pc, #136]	@ (8002984 <HAL_TIM_PWM_Start+0x15c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d101      	bne.n	8002904 <HAL_TIM_PWM_Start+0xdc>
 8002900:	2301      	movs	r3, #1
 8002902:	e000      	b.n	8002906 <HAL_TIM_PWM_Start+0xde>
 8002904:	2300      	movs	r3, #0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d008      	beq.n	800291c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2180      	movs	r1, #128	@ 0x80
 8002916:	0209      	lsls	r1, r1, #8
 8002918:	430a      	orrs	r2, r1
 800291a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a15      	ldr	r2, [pc, #84]	@ (8002978 <HAL_TIM_PWM_Start+0x150>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d009      	beq.n	800293a <HAL_TIM_PWM_Start+0x112>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a17      	ldr	r2, [pc, #92]	@ (8002988 <HAL_TIM_PWM_Start+0x160>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d004      	beq.n	800293a <HAL_TIM_PWM_Start+0x112>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a11      	ldr	r2, [pc, #68]	@ (800297c <HAL_TIM_PWM_Start+0x154>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d111      	bne.n	800295e <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2207      	movs	r2, #7
 8002942:	4013      	ands	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2b06      	cmp	r3, #6
 800294a:	d010      	beq.n	800296e <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2101      	movs	r1, #1
 8002958:	430a      	orrs	r2, r1
 800295a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800295c:	e007      	b.n	800296e <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2101      	movs	r1, #1
 800296a:	430a      	orrs	r2, r1
 800296c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	0018      	movs	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	b004      	add	sp, #16
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40012c00 	.word	0x40012c00
 800297c:	40014000 	.word	0x40014000
 8002980:	40014400 	.word	0x40014400
 8002984:	40014800 	.word	0x40014800
 8002988:	40000400 	.word	0x40000400

0800298c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002998:	2317      	movs	r3, #23
 800299a:	18fb      	adds	r3, r7, r3
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	223c      	movs	r2, #60	@ 0x3c
 80029a4:	5c9b      	ldrb	r3, [r3, r2]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d101      	bne.n	80029ae <HAL_TIM_PWM_ConfigChannel+0x22>
 80029aa:	2302      	movs	r3, #2
 80029ac:	e0ad      	b.n	8002b0a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	223c      	movs	r2, #60	@ 0x3c
 80029b2:	2101      	movs	r1, #1
 80029b4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b0c      	cmp	r3, #12
 80029ba:	d100      	bne.n	80029be <HAL_TIM_PWM_ConfigChannel+0x32>
 80029bc:	e076      	b.n	8002aac <HAL_TIM_PWM_ConfigChannel+0x120>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b0c      	cmp	r3, #12
 80029c2:	d900      	bls.n	80029c6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80029c4:	e095      	b.n	8002af2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d04e      	beq.n	8002a6a <HAL_TIM_PWM_ConfigChannel+0xde>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d900      	bls.n	80029d4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80029d2:	e08e      	b.n	8002af2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_TIM_PWM_ConfigChannel+0x56>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d021      	beq.n	8002a24 <HAL_TIM_PWM_ConfigChannel+0x98>
 80029e0:	e087      	b.n	8002af2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	0011      	movs	r1, r2
 80029ea:	0018      	movs	r0, r3
 80029ec:	f000 f9ec 	bl	8002dc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699a      	ldr	r2, [r3, #24]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2108      	movs	r1, #8
 80029fc:	430a      	orrs	r2, r1
 80029fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699a      	ldr	r2, [r3, #24]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2104      	movs	r1, #4
 8002a0c:	438a      	bics	r2, r1
 8002a0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6999      	ldr	r1, [r3, #24]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	619a      	str	r2, [r3, #24]
      break;
 8002a22:	e06b      	b.n	8002afc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	0011      	movs	r1, r2
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f000 fa53 	bl	8002ed8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	699a      	ldr	r2, [r3, #24]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2180      	movs	r1, #128	@ 0x80
 8002a3e:	0109      	lsls	r1, r1, #4
 8002a40:	430a      	orrs	r2, r1
 8002a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699a      	ldr	r2, [r3, #24]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4931      	ldr	r1, [pc, #196]	@ (8002b14 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002a50:	400a      	ands	r2, r1
 8002a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6999      	ldr	r1, [r3, #24]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	021a      	lsls	r2, r3, #8
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	619a      	str	r2, [r3, #24]
      break;
 8002a68:	e048      	b.n	8002afc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	0011      	movs	r1, r2
 8002a72:	0018      	movs	r0, r3
 8002a74:	f000 fab4 	bl	8002fe0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	69da      	ldr	r2, [r3, #28]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2108      	movs	r1, #8
 8002a84:	430a      	orrs	r2, r1
 8002a86:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	69da      	ldr	r2, [r3, #28]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2104      	movs	r1, #4
 8002a94:	438a      	bics	r2, r1
 8002a96:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	69d9      	ldr	r1, [r3, #28]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	61da      	str	r2, [r3, #28]
      break;
 8002aaa:	e027      	b.n	8002afc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	0011      	movs	r1, r2
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f000 fb19 	bl	80030ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	69da      	ldr	r2, [r3, #28]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2180      	movs	r1, #128	@ 0x80
 8002ac6:	0109      	lsls	r1, r1, #4
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	69da      	ldr	r2, [r3, #28]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	490f      	ldr	r1, [pc, #60]	@ (8002b14 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002ad8:	400a      	ands	r2, r1
 8002ada:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	69d9      	ldr	r1, [r3, #28]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	021a      	lsls	r2, r3, #8
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	61da      	str	r2, [r3, #28]
      break;
 8002af0:	e004      	b.n	8002afc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002af2:	2317      	movs	r3, #23
 8002af4:	18fb      	adds	r3, r7, r3
 8002af6:	2201      	movs	r2, #1
 8002af8:	701a      	strb	r2, [r3, #0]
      break;
 8002afa:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	223c      	movs	r2, #60	@ 0x3c
 8002b00:	2100      	movs	r1, #0
 8002b02:	5499      	strb	r1, [r3, r2]

  return status;
 8002b04:	2317      	movs	r3, #23
 8002b06:	18fb      	adds	r3, r7, r3
 8002b08:	781b      	ldrb	r3, [r3, #0]
}
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b006      	add	sp, #24
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	46c0      	nop			@ (mov r8, r8)
 8002b14:	fffffbff 	.word	0xfffffbff

08002b18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b22:	230f      	movs	r3, #15
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	2200      	movs	r2, #0
 8002b28:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	223c      	movs	r2, #60	@ 0x3c
 8002b2e:	5c9b      	ldrb	r3, [r3, r2]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_TIM_ConfigClockSource+0x20>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e0bc      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x19a>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	223c      	movs	r2, #60	@ 0x3c
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	223d      	movs	r2, #61	@ 0x3d
 8002b44:	2102      	movs	r1, #2
 8002b46:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2277      	movs	r2, #119	@ 0x77
 8002b54:	4393      	bics	r3, r2
 8002b56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	4a58      	ldr	r2, [pc, #352]	@ (8002cbc <HAL_TIM_ConfigClockSource+0x1a4>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2280      	movs	r2, #128	@ 0x80
 8002b6e:	0192      	lsls	r2, r2, #6
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d040      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0xde>
 8002b74:	2280      	movs	r2, #128	@ 0x80
 8002b76:	0192      	lsls	r2, r2, #6
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d900      	bls.n	8002b7e <HAL_TIM_ConfigClockSource+0x66>
 8002b7c:	e088      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>
 8002b7e:	2280      	movs	r2, #128	@ 0x80
 8002b80:	0152      	lsls	r2, r2, #5
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d100      	bne.n	8002b88 <HAL_TIM_ConfigClockSource+0x70>
 8002b86:	e088      	b.n	8002c9a <HAL_TIM_ConfigClockSource+0x182>
 8002b88:	2280      	movs	r2, #128	@ 0x80
 8002b8a:	0152      	lsls	r2, r2, #5
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d900      	bls.n	8002b92 <HAL_TIM_ConfigClockSource+0x7a>
 8002b90:	e07e      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>
 8002b92:	2b70      	cmp	r3, #112	@ 0x70
 8002b94:	d018      	beq.n	8002bc8 <HAL_TIM_ConfigClockSource+0xb0>
 8002b96:	d900      	bls.n	8002b9a <HAL_TIM_ConfigClockSource+0x82>
 8002b98:	e07a      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>
 8002b9a:	2b60      	cmp	r3, #96	@ 0x60
 8002b9c:	d04f      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0x126>
 8002b9e:	d900      	bls.n	8002ba2 <HAL_TIM_ConfigClockSource+0x8a>
 8002ba0:	e076      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>
 8002ba2:	2b50      	cmp	r3, #80	@ 0x50
 8002ba4:	d03b      	beq.n	8002c1e <HAL_TIM_ConfigClockSource+0x106>
 8002ba6:	d900      	bls.n	8002baa <HAL_TIM_ConfigClockSource+0x92>
 8002ba8:	e072      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>
 8002baa:	2b40      	cmp	r3, #64	@ 0x40
 8002bac:	d057      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0x146>
 8002bae:	d900      	bls.n	8002bb2 <HAL_TIM_ConfigClockSource+0x9a>
 8002bb0:	e06e      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>
 8002bb2:	2b30      	cmp	r3, #48	@ 0x30
 8002bb4:	d063      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x166>
 8002bb6:	d86b      	bhi.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d060      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x166>
 8002bbc:	d868      	bhi.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d05d      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x166>
 8002bc2:	2b10      	cmp	r3, #16
 8002bc4:	d05b      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x166>
 8002bc6:	e063      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bd8:	f000 fb6c 	bl	80032b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2277      	movs	r2, #119	@ 0x77
 8002be8:	4313      	orrs	r3, r2
 8002bea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	609a      	str	r2, [r3, #8]
      break;
 8002bf4:	e052      	b.n	8002c9c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c06:	f000 fb55 	bl	80032b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2180      	movs	r1, #128	@ 0x80
 8002c16:	01c9      	lsls	r1, r1, #7
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	609a      	str	r2, [r3, #8]
      break;
 8002c1c:	e03e      	b.n	8002c9c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c2a:	001a      	movs	r2, r3
 8002c2c:	f000 fac8 	bl	80031c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2150      	movs	r1, #80	@ 0x50
 8002c36:	0018      	movs	r0, r3
 8002c38:	f000 fb22 	bl	8003280 <TIM_ITRx_SetConfig>
      break;
 8002c3c:	e02e      	b.n	8002c9c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c4a:	001a      	movs	r2, r3
 8002c4c:	f000 fae6 	bl	800321c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2160      	movs	r1, #96	@ 0x60
 8002c56:	0018      	movs	r0, r3
 8002c58:	f000 fb12 	bl	8003280 <TIM_ITRx_SetConfig>
      break;
 8002c5c:	e01e      	b.n	8002c9c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c6a:	001a      	movs	r2, r3
 8002c6c:	f000 faa8 	bl	80031c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2140      	movs	r1, #64	@ 0x40
 8002c76:	0018      	movs	r0, r3
 8002c78:	f000 fb02 	bl	8003280 <TIM_ITRx_SetConfig>
      break;
 8002c7c:	e00e      	b.n	8002c9c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	0019      	movs	r1, r3
 8002c88:	0010      	movs	r0, r2
 8002c8a:	f000 faf9 	bl	8003280 <TIM_ITRx_SetConfig>
      break;
 8002c8e:	e005      	b.n	8002c9c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002c90:	230f      	movs	r3, #15
 8002c92:	18fb      	adds	r3, r7, r3
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
      break;
 8002c98:	e000      	b.n	8002c9c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002c9a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	223d      	movs	r2, #61	@ 0x3d
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	223c      	movs	r2, #60	@ 0x3c
 8002ca8:	2100      	movs	r1, #0
 8002caa:	5499      	strb	r1, [r3, r2]

  return status;
 8002cac:	230f      	movs	r3, #15
 8002cae:	18fb      	adds	r3, r7, r3
 8002cb0:	781b      	ldrb	r3, [r3, #0]
}
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	b004      	add	sp, #16
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	46c0      	nop			@ (mov r8, r8)
 8002cbc:	ffff00ff 	.word	0xffff00ff

08002cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a36      	ldr	r2, [pc, #216]	@ (8002dac <TIM_Base_SetConfig+0xec>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d003      	beq.n	8002ce0 <TIM_Base_SetConfig+0x20>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a35      	ldr	r2, [pc, #212]	@ (8002db0 <TIM_Base_SetConfig+0xf0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d108      	bne.n	8002cf2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2270      	movs	r2, #112	@ 0x70
 8002ce4:	4393      	bics	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a2d      	ldr	r2, [pc, #180]	@ (8002dac <TIM_Base_SetConfig+0xec>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d013      	beq.n	8002d22 <TIM_Base_SetConfig+0x62>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a2c      	ldr	r2, [pc, #176]	@ (8002db0 <TIM_Base_SetConfig+0xf0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00f      	beq.n	8002d22 <TIM_Base_SetConfig+0x62>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a2b      	ldr	r2, [pc, #172]	@ (8002db4 <TIM_Base_SetConfig+0xf4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00b      	beq.n	8002d22 <TIM_Base_SetConfig+0x62>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a2a      	ldr	r2, [pc, #168]	@ (8002db8 <TIM_Base_SetConfig+0xf8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d007      	beq.n	8002d22 <TIM_Base_SetConfig+0x62>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a29      	ldr	r2, [pc, #164]	@ (8002dbc <TIM_Base_SetConfig+0xfc>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d003      	beq.n	8002d22 <TIM_Base_SetConfig+0x62>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a28      	ldr	r2, [pc, #160]	@ (8002dc0 <TIM_Base_SetConfig+0x100>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d108      	bne.n	8002d34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4a27      	ldr	r2, [pc, #156]	@ (8002dc4 <TIM_Base_SetConfig+0x104>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2280      	movs	r2, #128	@ 0x80
 8002d38:	4393      	bics	r3, r2
 8002d3a:	001a      	movs	r2, r3
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a13      	ldr	r2, [pc, #76]	@ (8002dac <TIM_Base_SetConfig+0xec>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00b      	beq.n	8002d7a <TIM_Base_SetConfig+0xba>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a14      	ldr	r2, [pc, #80]	@ (8002db8 <TIM_Base_SetConfig+0xf8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d007      	beq.n	8002d7a <TIM_Base_SetConfig+0xba>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a13      	ldr	r2, [pc, #76]	@ (8002dbc <TIM_Base_SetConfig+0xfc>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d003      	beq.n	8002d7a <TIM_Base_SetConfig+0xba>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a12      	ldr	r2, [pc, #72]	@ (8002dc0 <TIM_Base_SetConfig+0x100>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d103      	bne.n	8002d82 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	691a      	ldr	r2, [r3, #16]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d106      	bne.n	8002da2 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	4393      	bics	r3, r2
 8002d9c:	001a      	movs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	611a      	str	r2, [r3, #16]
  }
}
 8002da2:	46c0      	nop			@ (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b004      	add	sp, #16
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			@ (mov r8, r8)
 8002dac:	40012c00 	.word	0x40012c00
 8002db0:	40000400 	.word	0x40000400
 8002db4:	40002000 	.word	0x40002000
 8002db8:	40014000 	.word	0x40014000
 8002dbc:	40014400 	.word	0x40014400
 8002dc0:	40014800 	.word	0x40014800
 8002dc4:	fffffcff 	.word	0xfffffcff

08002dc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	4393      	bics	r3, r2
 8002de0:	001a      	movs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2270      	movs	r2, #112	@ 0x70
 8002df6:	4393      	bics	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	4393      	bics	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	4393      	bics	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a27      	ldr	r2, [pc, #156]	@ (8002ec0 <TIM_OC1_SetConfig+0xf8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00b      	beq.n	8002e3e <TIM_OC1_SetConfig+0x76>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a26      	ldr	r2, [pc, #152]	@ (8002ec4 <TIM_OC1_SetConfig+0xfc>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d007      	beq.n	8002e3e <TIM_OC1_SetConfig+0x76>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a25      	ldr	r2, [pc, #148]	@ (8002ec8 <TIM_OC1_SetConfig+0x100>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d003      	beq.n	8002e3e <TIM_OC1_SetConfig+0x76>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a24      	ldr	r2, [pc, #144]	@ (8002ecc <TIM_OC1_SetConfig+0x104>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d10c      	bne.n	8002e58 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2208      	movs	r2, #8
 8002e42:	4393      	bics	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2204      	movs	r2, #4
 8002e54:	4393      	bics	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a19      	ldr	r2, [pc, #100]	@ (8002ec0 <TIM_OC1_SetConfig+0xf8>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d00b      	beq.n	8002e78 <TIM_OC1_SetConfig+0xb0>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a18      	ldr	r2, [pc, #96]	@ (8002ec4 <TIM_OC1_SetConfig+0xfc>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d007      	beq.n	8002e78 <TIM_OC1_SetConfig+0xb0>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a17      	ldr	r2, [pc, #92]	@ (8002ec8 <TIM_OC1_SetConfig+0x100>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d003      	beq.n	8002e78 <TIM_OC1_SetConfig+0xb0>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a16      	ldr	r2, [pc, #88]	@ (8002ecc <TIM_OC1_SetConfig+0x104>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d111      	bne.n	8002e9c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4a15      	ldr	r2, [pc, #84]	@ (8002ed0 <TIM_OC1_SetConfig+0x108>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	4a14      	ldr	r2, [pc, #80]	@ (8002ed4 <TIM_OC1_SetConfig+0x10c>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	621a      	str	r2, [r3, #32]
}
 8002eb6:	46c0      	nop			@ (mov r8, r8)
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b006      	add	sp, #24
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			@ (mov r8, r8)
 8002ec0:	40012c00 	.word	0x40012c00
 8002ec4:	40014000 	.word	0x40014000
 8002ec8:	40014400 	.word	0x40014400
 8002ecc:	40014800 	.word	0x40014800
 8002ed0:	fffffeff 	.word	0xfffffeff
 8002ed4:	fffffdff 	.word	0xfffffdff

08002ed8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	2210      	movs	r2, #16
 8002eee:	4393      	bics	r3, r2
 8002ef0:	001a      	movs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	4a2e      	ldr	r2, [pc, #184]	@ (8002fc0 <TIM_OC2_SetConfig+0xe8>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8002fc4 <TIM_OC2_SetConfig+0xec>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2220      	movs	r2, #32
 8002f22:	4393      	bics	r3, r2
 8002f24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a24      	ldr	r2, [pc, #144]	@ (8002fc8 <TIM_OC2_SetConfig+0xf0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d10d      	bne.n	8002f56 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2280      	movs	r2, #128	@ 0x80
 8002f3e:	4393      	bics	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2240      	movs	r2, #64	@ 0x40
 8002f52:	4393      	bics	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a1b      	ldr	r2, [pc, #108]	@ (8002fc8 <TIM_OC2_SetConfig+0xf0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00b      	beq.n	8002f76 <TIM_OC2_SetConfig+0x9e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a1a      	ldr	r2, [pc, #104]	@ (8002fcc <TIM_OC2_SetConfig+0xf4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d007      	beq.n	8002f76 <TIM_OC2_SetConfig+0x9e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a19      	ldr	r2, [pc, #100]	@ (8002fd0 <TIM_OC2_SetConfig+0xf8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d003      	beq.n	8002f76 <TIM_OC2_SetConfig+0x9e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a18      	ldr	r2, [pc, #96]	@ (8002fd4 <TIM_OC2_SetConfig+0xfc>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d113      	bne.n	8002f9e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4a17      	ldr	r2, [pc, #92]	@ (8002fd8 <TIM_OC2_SetConfig+0x100>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4a16      	ldr	r2, [pc, #88]	@ (8002fdc <TIM_OC2_SetConfig+0x104>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	621a      	str	r2, [r3, #32]
}
 8002fb8:	46c0      	nop			@ (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b006      	add	sp, #24
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	ffff8fff 	.word	0xffff8fff
 8002fc4:	fffffcff 	.word	0xfffffcff
 8002fc8:	40012c00 	.word	0x40012c00
 8002fcc:	40014000 	.word	0x40014000
 8002fd0:	40014400 	.word	0x40014400
 8002fd4:	40014800 	.word	0x40014800
 8002fd8:	fffffbff 	.word	0xfffffbff
 8002fdc:	fffff7ff 	.word	0xfffff7ff

08002fe0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	4a33      	ldr	r2, [pc, #204]	@ (80030c4 <TIM_OC3_SetConfig+0xe4>)
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2270      	movs	r2, #112	@ 0x70
 800300c:	4393      	bics	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2203      	movs	r2, #3
 8003014:	4393      	bics	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	4a28      	ldr	r2, [pc, #160]	@ (80030c8 <TIM_OC3_SetConfig+0xe8>)
 8003026:	4013      	ands	r3, r2
 8003028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	021b      	lsls	r3, r3, #8
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	4313      	orrs	r3, r2
 8003034:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a24      	ldr	r2, [pc, #144]	@ (80030cc <TIM_OC3_SetConfig+0xec>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d10d      	bne.n	800305a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	4a23      	ldr	r2, [pc, #140]	@ (80030d0 <TIM_OC3_SetConfig+0xf0>)
 8003042:	4013      	ands	r3, r2
 8003044:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	021b      	lsls	r3, r3, #8
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	4a1f      	ldr	r2, [pc, #124]	@ (80030d4 <TIM_OC3_SetConfig+0xf4>)
 8003056:	4013      	ands	r3, r2
 8003058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a1b      	ldr	r2, [pc, #108]	@ (80030cc <TIM_OC3_SetConfig+0xec>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00b      	beq.n	800307a <TIM_OC3_SetConfig+0x9a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a1c      	ldr	r2, [pc, #112]	@ (80030d8 <TIM_OC3_SetConfig+0xf8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d007      	beq.n	800307a <TIM_OC3_SetConfig+0x9a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a1b      	ldr	r2, [pc, #108]	@ (80030dc <TIM_OC3_SetConfig+0xfc>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d003      	beq.n	800307a <TIM_OC3_SetConfig+0x9a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a1a      	ldr	r2, [pc, #104]	@ (80030e0 <TIM_OC3_SetConfig+0x100>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d113      	bne.n	80030a2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4a19      	ldr	r2, [pc, #100]	@ (80030e4 <TIM_OC3_SetConfig+0x104>)
 800307e:	4013      	ands	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4a18      	ldr	r2, [pc, #96]	@ (80030e8 <TIM_OC3_SetConfig+0x108>)
 8003086:	4013      	ands	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	621a      	str	r2, [r3, #32]
}
 80030bc:	46c0      	nop			@ (mov r8, r8)
 80030be:	46bd      	mov	sp, r7
 80030c0:	b006      	add	sp, #24
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	fffffeff 	.word	0xfffffeff
 80030c8:	fffffdff 	.word	0xfffffdff
 80030cc:	40012c00 	.word	0x40012c00
 80030d0:	fffff7ff 	.word	0xfffff7ff
 80030d4:	fffffbff 	.word	0xfffffbff
 80030d8:	40014000 	.word	0x40014000
 80030dc:	40014400 	.word	0x40014400
 80030e0:	40014800 	.word	0x40014800
 80030e4:	ffffefff 	.word	0xffffefff
 80030e8:	ffffdfff 	.word	0xffffdfff

080030ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	4a26      	ldr	r2, [pc, #152]	@ (800319c <TIM_OC4_SetConfig+0xb0>)
 8003102:	401a      	ands	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4a22      	ldr	r2, [pc, #136]	@ (80031a0 <TIM_OC4_SetConfig+0xb4>)
 8003118:	4013      	ands	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4a21      	ldr	r2, [pc, #132]	@ (80031a4 <TIM_OC4_SetConfig+0xb8>)
 8003120:	4013      	ands	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	021b      	lsls	r3, r3, #8
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4313      	orrs	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4a1d      	ldr	r2, [pc, #116]	@ (80031a8 <TIM_OC4_SetConfig+0xbc>)
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	031b      	lsls	r3, r3, #12
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a19      	ldr	r2, [pc, #100]	@ (80031ac <TIM_OC4_SetConfig+0xc0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00b      	beq.n	8003164 <TIM_OC4_SetConfig+0x78>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a18      	ldr	r2, [pc, #96]	@ (80031b0 <TIM_OC4_SetConfig+0xc4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d007      	beq.n	8003164 <TIM_OC4_SetConfig+0x78>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a17      	ldr	r2, [pc, #92]	@ (80031b4 <TIM_OC4_SetConfig+0xc8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d003      	beq.n	8003164 <TIM_OC4_SetConfig+0x78>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a16      	ldr	r2, [pc, #88]	@ (80031b8 <TIM_OC4_SetConfig+0xcc>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d109      	bne.n	8003178 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	4a15      	ldr	r2, [pc, #84]	@ (80031bc <TIM_OC4_SetConfig+0xd0>)
 8003168:	4013      	ands	r3, r2
 800316a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	019b      	lsls	r3, r3, #6
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	621a      	str	r2, [r3, #32]
}
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	46bd      	mov	sp, r7
 8003196:	b006      	add	sp, #24
 8003198:	bd80      	pop	{r7, pc}
 800319a:	46c0      	nop			@ (mov r8, r8)
 800319c:	ffffefff 	.word	0xffffefff
 80031a0:	ffff8fff 	.word	0xffff8fff
 80031a4:	fffffcff 	.word	0xfffffcff
 80031a8:	ffffdfff 	.word	0xffffdfff
 80031ac:	40012c00 	.word	0x40012c00
 80031b0:	40014000 	.word	0x40014000
 80031b4:	40014400 	.word	0x40014400
 80031b8:	40014800 	.word	0x40014800
 80031bc:	ffffbfff 	.word	0xffffbfff

080031c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	2201      	movs	r2, #1
 80031d8:	4393      	bics	r3, r2
 80031da:	001a      	movs	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	22f0      	movs	r2, #240	@ 0xf0
 80031ea:	4393      	bics	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	220a      	movs	r2, #10
 80031fc:	4393      	bics	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	621a      	str	r2, [r3, #32]
}
 8003214:	46c0      	nop			@ (mov r8, r8)
 8003216:	46bd      	mov	sp, r7
 8003218:	b006      	add	sp, #24
 800321a:	bd80      	pop	{r7, pc}

0800321c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	2210      	movs	r2, #16
 8003234:	4393      	bics	r3, r2
 8003236:	001a      	movs	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4a0d      	ldr	r2, [pc, #52]	@ (800327c <TIM_TI2_ConfigInputStage+0x60>)
 8003246:	4013      	ands	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	031b      	lsls	r3, r3, #12
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	22a0      	movs	r2, #160	@ 0xa0
 8003258:	4393      	bics	r3, r2
 800325a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	621a      	str	r2, [r3, #32]
}
 8003272:	46c0      	nop			@ (mov r8, r8)
 8003274:	46bd      	mov	sp, r7
 8003276:	b006      	add	sp, #24
 8003278:	bd80      	pop	{r7, pc}
 800327a:	46c0      	nop			@ (mov r8, r8)
 800327c:	ffff0fff 	.word	0xffff0fff

08003280 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2270      	movs	r2, #112	@ 0x70
 8003294:	4393      	bics	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4313      	orrs	r3, r2
 800329e:	2207      	movs	r2, #7
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	609a      	str	r2, [r3, #8]
}
 80032aa:	46c0      	nop			@ (mov r8, r8)
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b004      	add	sp, #16
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
 80032c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	4a09      	ldr	r2, [pc, #36]	@ (80032f0 <TIM_ETR_SetConfig+0x3c>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	021a      	lsls	r2, r3, #8
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	431a      	orrs	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	4313      	orrs	r3, r2
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	609a      	str	r2, [r3, #8]
}
 80032e8:	46c0      	nop			@ (mov r8, r8)
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b006      	add	sp, #24
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	ffff00ff 	.word	0xffff00ff

080032f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	221f      	movs	r2, #31
 8003304:	4013      	ands	r3, r2
 8003306:	2201      	movs	r2, #1
 8003308:	409a      	lsls	r2, r3
 800330a:	0013      	movs	r3, r2
 800330c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	43d2      	mvns	r2, r2
 8003316:	401a      	ands	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a1a      	ldr	r2, [r3, #32]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	211f      	movs	r1, #31
 8003324:	400b      	ands	r3, r1
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4099      	lsls	r1, r3
 800332a:	000b      	movs	r3, r1
 800332c:	431a      	orrs	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	621a      	str	r2, [r3, #32]
}
 8003332:	46c0      	nop			@ (mov r8, r8)
 8003334:	46bd      	mov	sp, r7
 8003336:	b006      	add	sp, #24
 8003338:	bd80      	pop	{r7, pc}
	...

0800333c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	223c      	movs	r2, #60	@ 0x3c
 800334a:	5c9b      	ldrb	r3, [r3, r2]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003350:	2302      	movs	r3, #2
 8003352:	e041      	b.n	80033d8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	223c      	movs	r2, #60	@ 0x3c
 8003358:	2101      	movs	r1, #1
 800335a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	223d      	movs	r2, #61	@ 0x3d
 8003360:	2102      	movs	r1, #2
 8003362:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2270      	movs	r2, #112	@ 0x70
 8003378:	4393      	bics	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a13      	ldr	r2, [pc, #76]	@ (80033e0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d009      	beq.n	80033ac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a11      	ldr	r2, [pc, #68]	@ (80033e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d004      	beq.n	80033ac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a10      	ldr	r2, [pc, #64]	@ (80033e8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d10c      	bne.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2280      	movs	r2, #128	@ 0x80
 80033b0:	4393      	bics	r3, r2
 80033b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	223d      	movs	r2, #61	@ 0x3d
 80033ca:	2101      	movs	r1, #1
 80033cc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	223c      	movs	r2, #60	@ 0x3c
 80033d2:	2100      	movs	r1, #0
 80033d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	0018      	movs	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	b004      	add	sp, #16
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40012c00 	.word	0x40012c00
 80033e4:	40000400 	.word	0x40000400
 80033e8:	40014000 	.word	0x40014000

080033ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	223c      	movs	r2, #60	@ 0x3c
 80033fe:	5c9b      	ldrb	r3, [r3, r2]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003404:	2302      	movs	r3, #2
 8003406:	e03e      	b.n	8003486 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	223c      	movs	r2, #60	@ 0x3c
 800340c:	2101      	movs	r1, #1
 800340e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	22ff      	movs	r2, #255	@ 0xff
 8003414:	4393      	bics	r3, r2
 8003416:	001a      	movs	r2, r3
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4a1b      	ldr	r2, [pc, #108]	@ (8003490 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003424:	401a      	ands	r2, r3
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4a18      	ldr	r2, [pc, #96]	@ (8003494 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003432:	401a      	ands	r2, r3
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4a16      	ldr	r2, [pc, #88]	@ (8003498 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003440:	401a      	ands	r2, r3
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4a13      	ldr	r2, [pc, #76]	@ (800349c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800344e:	401a      	ands	r2, r3
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4a11      	ldr	r2, [pc, #68]	@ (80034a0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800345c:	401a      	ands	r2, r3
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4a0e      	ldr	r2, [pc, #56]	@ (80034a4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800346a:	401a      	ands	r2, r3
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	223c      	movs	r2, #60	@ 0x3c
 8003480:	2100      	movs	r1, #0
 8003482:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	0018      	movs	r0, r3
 8003488:	46bd      	mov	sp, r7
 800348a:	b004      	add	sp, #16
 800348c:	bd80      	pop	{r7, pc}
 800348e:	46c0      	nop			@ (mov r8, r8)
 8003490:	fffffcff 	.word	0xfffffcff
 8003494:	fffffbff 	.word	0xfffffbff
 8003498:	fffff7ff 	.word	0xfffff7ff
 800349c:	ffffefff 	.word	0xffffefff
 80034a0:	ffffdfff 	.word	0xffffdfff
 80034a4:	ffffbfff 	.word	0xffffbfff

080034a8 <memset>:
 80034a8:	0003      	movs	r3, r0
 80034aa:	1882      	adds	r2, r0, r2
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d100      	bne.n	80034b2 <memset+0xa>
 80034b0:	4770      	bx	lr
 80034b2:	7019      	strb	r1, [r3, #0]
 80034b4:	3301      	adds	r3, #1
 80034b6:	e7f9      	b.n	80034ac <memset+0x4>

080034b8 <__libc_init_array>:
 80034b8:	b570      	push	{r4, r5, r6, lr}
 80034ba:	2600      	movs	r6, #0
 80034bc:	4c0c      	ldr	r4, [pc, #48]	@ (80034f0 <__libc_init_array+0x38>)
 80034be:	4d0d      	ldr	r5, [pc, #52]	@ (80034f4 <__libc_init_array+0x3c>)
 80034c0:	1b64      	subs	r4, r4, r5
 80034c2:	10a4      	asrs	r4, r4, #2
 80034c4:	42a6      	cmp	r6, r4
 80034c6:	d109      	bne.n	80034dc <__libc_init_array+0x24>
 80034c8:	2600      	movs	r6, #0
 80034ca:	f000 f819 	bl	8003500 <_init>
 80034ce:	4c0a      	ldr	r4, [pc, #40]	@ (80034f8 <__libc_init_array+0x40>)
 80034d0:	4d0a      	ldr	r5, [pc, #40]	@ (80034fc <__libc_init_array+0x44>)
 80034d2:	1b64      	subs	r4, r4, r5
 80034d4:	10a4      	asrs	r4, r4, #2
 80034d6:	42a6      	cmp	r6, r4
 80034d8:	d105      	bne.n	80034e6 <__libc_init_array+0x2e>
 80034da:	bd70      	pop	{r4, r5, r6, pc}
 80034dc:	00b3      	lsls	r3, r6, #2
 80034de:	58eb      	ldr	r3, [r5, r3]
 80034e0:	4798      	blx	r3
 80034e2:	3601      	adds	r6, #1
 80034e4:	e7ee      	b.n	80034c4 <__libc_init_array+0xc>
 80034e6:	00b3      	lsls	r3, r6, #2
 80034e8:	58eb      	ldr	r3, [r5, r3]
 80034ea:	4798      	blx	r3
 80034ec:	3601      	adds	r6, #1
 80034ee:	e7f2      	b.n	80034d6 <__libc_init_array+0x1e>
 80034f0:	08003548 	.word	0x08003548
 80034f4:	08003548 	.word	0x08003548
 80034f8:	0800354c 	.word	0x0800354c
 80034fc:	08003548 	.word	0x08003548

08003500 <_init>:
 8003500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003502:	46c0      	nop			@ (mov r8, r8)
 8003504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003506:	bc08      	pop	{r3}
 8003508:	469e      	mov	lr, r3
 800350a:	4770      	bx	lr

0800350c <_fini>:
 800350c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350e:	46c0      	nop			@ (mov r8, r8)
 8003510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003512:	bc08      	pop	{r3}
 8003514:	469e      	mov	lr, r3
 8003516:	4770      	bx	lr
